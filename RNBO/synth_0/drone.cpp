/*******************************************************************************************************************
Copyright (c) 2023 Cycling '74

The code that Max generates automatically and that end users are capable of
exporting and using, and any associated documentation files (the “Software”)
is a work of authorship for which Cycling '74 is the author and owner for
copyright purposes.

This Software is dual-licensed either under the terms of the Cycling '74
License for Max-Generated Code for Export, or alternatively under the terms
of the General Public License (GPL) Version 3. You may use the Software
according to either of these licenses as it is most appropriate for your
project on a case-by-case basis (proprietary or not).

A) Cycling '74 License for Max-Generated Code for Export

A license is hereby granted, free of charge, to any person obtaining a copy
of the Software (“Licensee”) to use, copy, modify, merge, publish, and
distribute copies of the Software, and to permit persons to whom the Software
is furnished to do so, subject to the following conditions:

The Software is licensed to Licensee for all uses that do not include the sale,
sublicensing, or commercial distribution of software that incorporates this
source code. This means that the Licensee is free to use this software for
educational, research, and prototyping purposes, to create musical or other
creative works with software that incorporates this source code, or any other
use that does not constitute selling software that makes use of this source
code. Commercial distribution also includes the packaging of free software with
other paid software, hardware, or software-provided commercial services.

For entities with UNDER $200k in annual revenue or funding, a license is hereby
granted, free of charge, for the sale, sublicensing, or commercial distribution
of software that incorporates this source code, for as long as the entity's
annual revenue remains below $200k annual revenue or funding.

For entities with OVER $200k in annual revenue or funding interested in the
sale, sublicensing, or commercial distribution of software that incorporates
this source code, please send inquiries to licensing@cycling74.com.

The above copyright notice and this license shall be included in all copies or
substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

Please see
https://support.cycling74.com/hc/en-us/articles/10730637742483-RNBO-Export-Licensing-FAQ
for additional information

B) General Public License Version 3 (GPLv3)
Details of the GPLv3 license can be found at: https://www.gnu.org/licenses/gpl-3.0.html
*******************************************************************************************************************/

#include "RNBO_Common.h"
#include "RNBO_AudioSignal.h"

namespace RNBO {


#define trunc(x) ((Int)(x))

#if defined(__GNUC__) || defined(__clang__)
    #define RNBO_RESTRICT __restrict__
#elif defined(_MSC_VER)
    #define RNBO_RESTRICT __restrict
#endif

#define FIXEDSIZEARRAYINIT(...) { }

class drone : public PatcherInterfaceImpl {
public:

class RNBOSubpatcher_804 : public PatcherInterfaceImpl {
    
    friend class drone;
    
    public:
    
    class RNBOSubpatcher_791 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_804;
            friend class drone;
            
            public:
            
            RNBOSubpatcher_791()
            {
            }
            
            ~RNBOSubpatcher_791()
            {
            }
            
            virtual RNBOSubpatcher_804* getPatcher() const {
                return static_cast<RNBOSubpatcher_804 *>(_parentPatcher);
            }
            
            drone* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
                getEngine()->flushClockEvents(this, -281953904, false);
                getEngine()->flushClockEvents(this, -1841075377, false);
                getEngine()->flushClockEvents(this, 894770446, false);
            }
            
            SampleIndex currentsampletime() {
                return this->audioProcessSampleCount + this->sampleOffsetIntoNextAudioBuffer;
            }
            
            number mstosamps(MillisecondTime ms) {
                return ms * this->sr * 0.001;
            }
            
            inline number safesqrt(number num) {
                return (num > 0.0 ? rnbo_sqrt(num) : 0.0);
            }
            
            Index vectorsize() const {
                return this->vs;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
                const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
                this->linetilde_01_perform(this->signals[0], n);
                this->linetilde_02_perform(this->signals[1], n);
                this->linetilde_03_perform(this->signals[2], n);
            
                this->filtercoeff_01_perform(
                    this->signals[0],
                    this->signals[1],
                    this->signals[2],
                    this->signals[3],
                    this->signals[4],
                    this->signals[5],
                    this->signals[6],
                    this->signals[7],
                    n
                );
            
                this->biquad_tilde_02_perform(
                    in2,
                    this->signals[3],
                    this->signals[4],
                    this->signals[5],
                    this->signals[6],
                    this->signals[7],
                    out2,
                    n
                );
            
                this->biquad_tilde_01_perform(
                    in1,
                    this->signals[3],
                    this->signals[4],
                    this->signals[5],
                    this->signals[6],
                    this->signals[7],
                    out1,
                    n
                );
            
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 8; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->filtercoeff_01_dspsetup(forceDSPSetup);
                this->biquad_tilde_02_dspsetup(forceDSPSetup);
                this->biquad_tilde_01_dspsetup(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
                RNBO_UNUSED(value);
                RNBO_UNUSED(hasValue);
                this->updateTime(time);
            
                switch (index) {
                case -281953904:
                    {
                    this->linetilde_01_target_bang();
                    break;
                    }
                case -1841075377:
                    {
                    this->linetilde_02_target_bang();
                    break;
                    }
                case 894770446:
                    {
                    this->linetilde_03_target_bang();
                    break;
                    }
                }
            }
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("valin"):
                    {
                    if (TAG("Post-EQ~/Bass~/number_obj-7") == objectId)
                        this->numberobj_01_valin_set(payload);
            
                    if (TAG("Post-EQ~/Bass~/number_obj-4") == objectId)
                        this->numberobj_02_valin_set(payload);
            
                    if (TAG("Post-EQ~/Bass~/number_obj-12") == objectId)
                        this->numberobj_03_valin_set(payload);
            
                    break;
                    }
                case TAG("format"):
                    {
                    if (TAG("Post-EQ~/Bass~/number_obj-7") == objectId)
                        this->numberobj_01_format_set(payload);
            
                    if (TAG("Post-EQ~/Bass~/number_obj-4") == objectId)
                        this->numberobj_02_format_set(payload);
            
                    if (TAG("Post-EQ~/Bass~/number_obj-12") == objectId)
                        this->numberobj_03_format_set(payload);
            
                    break;
                    }
                }
            }
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
                case TAG("valout"):
                    {
                    return "valout";
                    }
                case TAG("Post-EQ~/Bass~/number_obj-7"):
                    {
                    return "Post-EQ~/Bass~/number_obj-7";
                    }
                case TAG("setup"):
                    {
                    return "setup";
                    }
                case TAG("Post-EQ~/Bass~/number_obj-4"):
                    {
                    return "Post-EQ~/Bass~/number_obj-4";
                    }
                case TAG("Post-EQ~/Bass~/number_obj-12"):
                    {
                    return "Post-EQ~/Bass~/number_obj-12";
                    }
                case TAG("valin"):
                    {
                    return "valin";
                    }
                case TAG("format"):
                    {
                    return "format";
                    }
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            void numberobj_01_valin_set(number v) {
                this->numberobj_01_value_set(v);
            }
            
            void numberobj_01_format_set(number v) {
                this->numberobj_01_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void eventinlet_01_out1_bang_bang() {}
            
            void eventinlet_01_out1_number_set(number v) {
                {
                    list converted = {v};
                    this->unjoin_01_input_set(converted);
                }
            }
            
            void numberobj_02_valin_set(number v) {
                this->numberobj_02_value_set(v);
            }
            
            void numberobj_02_format_set(number v) {
                this->numberobj_02_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_03_valin_set(number v) {
                this->numberobj_03_value_set(v);
            }
            
            void numberobj_03_format_set(number v) {
                this->numberobj_03_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void linetilde_01_target_bang() {}
            
            void linetilde_02_target_bang() {}
            
            void linetilde_03_target_bang() {}
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 2;
            }
            
            Index getNumOutputChannels() const {
                return 2;
            }
            
            void initializeObjects() {
                this->numberobj_01_init();
                this->numberobj_02_init();
                this->numberobj_03_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {}
            
            void unjoin_01_extra_set(const list& ) {}
            
            void linetilde_03_time_set(number v) {
                this->linetilde_03_time = v;
            }
            
            void linetilde_03_segments_set(const list& v) {
                this->linetilde_03_segments = jsCreateListCopy(v);
            
                if ((bool)(v->length)) {
                    if (v->length == 1 && this->linetilde_03_time == 0) {
                        this->linetilde_03_activeRamps->length = 0;
                        this->linetilde_03_currentValue = v[0];
                    } else {
                        auto currentTime = this->currentsampletime();
                        number lastRampValue = this->linetilde_03_currentValue;
                        number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
            
                        for (Index i = 0; i < this->linetilde_03_activeRamps->length; i += 3) {
                            rampEnd = this->linetilde_03_activeRamps[(Index)(i + 2)];
            
                            if (rampEnd > currentTime) {
                                this->linetilde_03_activeRamps[(Index)(i + 2)] = currentTime;
                                number diff = rampEnd - currentTime;
                                number valueDiff = diff * this->linetilde_03_activeRamps[(Index)(i + 1)];
                                lastRampValue = this->linetilde_03_activeRamps[(Index)i] - valueDiff;
                                this->linetilde_03_activeRamps[(Index)i] = lastRampValue;
                                this->linetilde_03_activeRamps->length = i + 3;
                                rampEnd = currentTime;
                            } else {
                                lastRampValue = this->linetilde_03_activeRamps[(Index)i];
                            }
                        }
            
                        if (rampEnd < currentTime) {
                            this->linetilde_03_activeRamps->push(lastRampValue);
                            this->linetilde_03_activeRamps->push(0);
                            this->linetilde_03_activeRamps->push(currentTime);
                        }
            
                        number lastRampEnd = currentTime;
            
                        for (Index i = 0; i < v->length; i += 2) {
                            number destinationValue = v[(Index)i];
                            number inc = 0;
                            number rampTimeInSamples;
            
                            if (v->length > i + 1) {
                                rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
            
                                if ((bool)(this->linetilde_03_keepramp)) {
                                    this->linetilde_03_time_set(v[(Index)(i + 1)]);
                                }
                            } else {
                                rampTimeInSamples = this->mstosamps(this->linetilde_03_time);
                            }
            
                            if (rampTimeInSamples <= 0) {
                                rampTimeInSamples = 1;
                            }
            
                            inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                            lastRampEnd += rampTimeInSamples;
                            this->linetilde_03_activeRamps->push(destinationValue);
                            this->linetilde_03_activeRamps->push(inc);
                            this->linetilde_03_activeRamps->push(lastRampEnd);
                            lastRampValue = destinationValue;
                        }
                    }
                }
            }
            
            void numberobj_03_output_set(number v) {
                {
                    list converted = {v};
                    this->linetilde_03_segments_set(converted);
                }
            }
            
            void numberobj_03_value_set(number v) {
                this->numberobj_03_value_setter(v);
                v = this->numberobj_03_value;
                number localvalue = v;
            
                if (this->numberobj_03_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Post-EQ~/Bass~/number_obj-12"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_03_output_set(localvalue);
            }
            
            void unjoin_01_out3_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_03_value_set(converted);
                }
            }
            
            void linetilde_02_time_set(number v) {
                this->linetilde_02_time = v;
            }
            
            void linetilde_02_segments_set(const list& v) {
                this->linetilde_02_segments = jsCreateListCopy(v);
            
                if ((bool)(v->length)) {
                    if (v->length == 1 && this->linetilde_02_time == 0) {
                        this->linetilde_02_activeRamps->length = 0;
                        this->linetilde_02_currentValue = v[0];
                    } else {
                        auto currentTime = this->currentsampletime();
                        number lastRampValue = this->linetilde_02_currentValue;
                        number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
            
                        for (Index i = 0; i < this->linetilde_02_activeRamps->length; i += 3) {
                            rampEnd = this->linetilde_02_activeRamps[(Index)(i + 2)];
            
                            if (rampEnd > currentTime) {
                                this->linetilde_02_activeRamps[(Index)(i + 2)] = currentTime;
                                number diff = rampEnd - currentTime;
                                number valueDiff = diff * this->linetilde_02_activeRamps[(Index)(i + 1)];
                                lastRampValue = this->linetilde_02_activeRamps[(Index)i] - valueDiff;
                                this->linetilde_02_activeRamps[(Index)i] = lastRampValue;
                                this->linetilde_02_activeRamps->length = i + 3;
                                rampEnd = currentTime;
                            } else {
                                lastRampValue = this->linetilde_02_activeRamps[(Index)i];
                            }
                        }
            
                        if (rampEnd < currentTime) {
                            this->linetilde_02_activeRamps->push(lastRampValue);
                            this->linetilde_02_activeRamps->push(0);
                            this->linetilde_02_activeRamps->push(currentTime);
                        }
            
                        number lastRampEnd = currentTime;
            
                        for (Index i = 0; i < v->length; i += 2) {
                            number destinationValue = v[(Index)i];
                            number inc = 0;
                            number rampTimeInSamples;
            
                            if (v->length > i + 1) {
                                rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
            
                                if ((bool)(this->linetilde_02_keepramp)) {
                                    this->linetilde_02_time_set(v[(Index)(i + 1)]);
                                }
                            } else {
                                rampTimeInSamples = this->mstosamps(this->linetilde_02_time);
                            }
            
                            if (rampTimeInSamples <= 0) {
                                rampTimeInSamples = 1;
                            }
            
                            inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                            lastRampEnd += rampTimeInSamples;
                            this->linetilde_02_activeRamps->push(destinationValue);
                            this->linetilde_02_activeRamps->push(inc);
                            this->linetilde_02_activeRamps->push(lastRampEnd);
                            lastRampValue = destinationValue;
                        }
                    }
                }
            }
            
            void expr_01_out1_set(number v) {
                this->expr_01_out1 = v;
            
                {
                    list converted = {this->expr_01_out1};
                    this->linetilde_02_segments_set(converted);
                }
            }
            
            void expr_01_in1_set(number in1) {
                this->expr_01_in1 = in1;
                this->expr_01_out1_set(rnbo_pow(10, this->expr_01_in1 * 0.05));//#map:Post-EQ~/Bass~/dbtoa_obj-9:1
            }
            
            void numberobj_02_output_set(number v) {
                this->expr_01_in1_set(v);
            }
            
            void numberobj_02_value_set(number v) {
                this->numberobj_02_value_setter(v);
                v = this->numberobj_02_value;
                number localvalue = v;
            
                if (this->numberobj_02_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Post-EQ~/Bass~/number_obj-4"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_02_output_set(localvalue);
            }
            
            void unjoin_01_out2_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_02_value_set(converted);
                }
            }
            
            void linetilde_01_time_set(number v) {
                this->linetilde_01_time = v;
            }
            
            void linetilde_01_segments_set(const list& v) {
                this->linetilde_01_segments = jsCreateListCopy(v);
            
                if ((bool)(v->length)) {
                    if (v->length == 1 && this->linetilde_01_time == 0) {
                        this->linetilde_01_activeRamps->length = 0;
                        this->linetilde_01_currentValue = v[0];
                    } else {
                        auto currentTime = this->currentsampletime();
                        number lastRampValue = this->linetilde_01_currentValue;
                        number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
            
                        for (Index i = 0; i < this->linetilde_01_activeRamps->length; i += 3) {
                            rampEnd = this->linetilde_01_activeRamps[(Index)(i + 2)];
            
                            if (rampEnd > currentTime) {
                                this->linetilde_01_activeRamps[(Index)(i + 2)] = currentTime;
                                number diff = rampEnd - currentTime;
                                number valueDiff = diff * this->linetilde_01_activeRamps[(Index)(i + 1)];
                                lastRampValue = this->linetilde_01_activeRamps[(Index)i] - valueDiff;
                                this->linetilde_01_activeRamps[(Index)i] = lastRampValue;
                                this->linetilde_01_activeRamps->length = i + 3;
                                rampEnd = currentTime;
                            } else {
                                lastRampValue = this->linetilde_01_activeRamps[(Index)i];
                            }
                        }
            
                        if (rampEnd < currentTime) {
                            this->linetilde_01_activeRamps->push(lastRampValue);
                            this->linetilde_01_activeRamps->push(0);
                            this->linetilde_01_activeRamps->push(currentTime);
                        }
            
                        number lastRampEnd = currentTime;
            
                        for (Index i = 0; i < v->length; i += 2) {
                            number destinationValue = v[(Index)i];
                            number inc = 0;
                            number rampTimeInSamples;
            
                            if (v->length > i + 1) {
                                rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
            
                                if ((bool)(this->linetilde_01_keepramp)) {
                                    this->linetilde_01_time_set(v[(Index)(i + 1)]);
                                }
                            } else {
                                rampTimeInSamples = this->mstosamps(this->linetilde_01_time);
                            }
            
                            if (rampTimeInSamples <= 0) {
                                rampTimeInSamples = 1;
                            }
            
                            inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                            lastRampEnd += rampTimeInSamples;
                            this->linetilde_01_activeRamps->push(destinationValue);
                            this->linetilde_01_activeRamps->push(inc);
                            this->linetilde_01_activeRamps->push(lastRampEnd);
                            lastRampValue = destinationValue;
                        }
                    }
                }
            }
            
            void numberobj_01_output_set(number v) {
                {
                    list converted = {v};
                    this->linetilde_01_segments_set(converted);
                }
            }
            
            void numberobj_01_value_set(number v) {
                this->numberobj_01_value_setter(v);
                v = this->numberobj_01_value;
                number localvalue = v;
            
                if (this->numberobj_01_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Post-EQ~/Bass~/number_obj-7"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_01_output_set(localvalue);
            }
            
            void unjoin_01_out1_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_01_value_set(converted);
                }
            }
            
            void unjoin_01_input_set(const list& v) {
                if (v->length > 3) {
                    list tmp = {};
            
                    for (number i = 3; i < v->length; i++) {
                        tmp->push(v[(Index)i]);
                    }
            
                    this->unjoin_01_extra_set(tmp);
                }
            
                if (v->length > 2) {
                    list tmp = {};
            
                    for (Index i = 2; i < 3 && i < v->length; i++) {
                        tmp->push(v[(Index)i]);
                    }
            
                    this->unjoin_01_out3_set(tmp);
                }
            
                if (v->length > 1) {
                    list tmp = {};
            
                    for (Index i = 1; i < 2 && i < v->length; i++) {
                        tmp->push(v[(Index)i]);
                    }
            
                    this->unjoin_01_out2_set(tmp);
                }
            
                if (v->length > 0) {
                    list tmp = {};
            
                    for (Index i = 0; i < 1 && i < v->length; i++) {
                        tmp->push(v[(Index)i]);
                    }
            
                    this->unjoin_01_out1_set(tmp);
                }
            }
            
            void eventinlet_01_out1_list_set(const list& v) {
                this->unjoin_01_input_set(v);
            }
            
            void linetilde_01_perform(SampleValue * out, Index n) {
                auto __linetilde_01_time = this->linetilde_01_time;
                auto __linetilde_01_keepramp = this->linetilde_01_keepramp;
                auto __linetilde_01_currentValue = this->linetilde_01_currentValue;
                Index i = 0;
            
                if ((bool)(this->linetilde_01_activeRamps->length)) {
                    while ((bool)(this->linetilde_01_activeRamps->length) && i < n) {
                        number destinationValue = this->linetilde_01_activeRamps[0];
                        number inc = this->linetilde_01_activeRamps[1];
                        number rampTimeInSamples = this->linetilde_01_activeRamps[2] - this->audioProcessSampleCount - i;
                        number val = __linetilde_01_currentValue;
            
                        while (rampTimeInSamples > 0 && i < n) {
                            out[(Index)i] = val;
                            val += inc;
                            i++;
                            rampTimeInSamples--;
                        }
            
                        if (rampTimeInSamples <= 0) {
                            val = destinationValue;
                            this->linetilde_01_activeRamps->splice(0, 3);
            
                            if ((bool)(!(bool)(this->linetilde_01_activeRamps->length))) {
                                this->getEngine()->scheduleClockEventWithValue(
                                    this,
                                    -281953904,
                                    this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                                    0
                                );;
            
                                if ((bool)(!(bool)(__linetilde_01_keepramp))) {
                                    __linetilde_01_time = 0;
                                }
                            }
                        }
            
                        __linetilde_01_currentValue = val;
                    }
                }
            
                while (i < n) {
                    out[(Index)i] = __linetilde_01_currentValue;
                    i++;
                }
            
                this->linetilde_01_currentValue = __linetilde_01_currentValue;
                this->linetilde_01_time = __linetilde_01_time;
            }
            
            void linetilde_02_perform(SampleValue * out, Index n) {
                auto __linetilde_02_time = this->linetilde_02_time;
                auto __linetilde_02_keepramp = this->linetilde_02_keepramp;
                auto __linetilde_02_currentValue = this->linetilde_02_currentValue;
                Index i = 0;
            
                if ((bool)(this->linetilde_02_activeRamps->length)) {
                    while ((bool)(this->linetilde_02_activeRamps->length) && i < n) {
                        number destinationValue = this->linetilde_02_activeRamps[0];
                        number inc = this->linetilde_02_activeRamps[1];
                        number rampTimeInSamples = this->linetilde_02_activeRamps[2] - this->audioProcessSampleCount - i;
                        number val = __linetilde_02_currentValue;
            
                        while (rampTimeInSamples > 0 && i < n) {
                            out[(Index)i] = val;
                            val += inc;
                            i++;
                            rampTimeInSamples--;
                        }
            
                        if (rampTimeInSamples <= 0) {
                            val = destinationValue;
                            this->linetilde_02_activeRamps->splice(0, 3);
            
                            if ((bool)(!(bool)(this->linetilde_02_activeRamps->length))) {
                                this->getEngine()->scheduleClockEventWithValue(
                                    this,
                                    -1841075377,
                                    this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                                    0
                                );;
            
                                if ((bool)(!(bool)(__linetilde_02_keepramp))) {
                                    __linetilde_02_time = 0;
                                }
                            }
                        }
            
                        __linetilde_02_currentValue = val;
                    }
                }
            
                while (i < n) {
                    out[(Index)i] = __linetilde_02_currentValue;
                    i++;
                }
            
                this->linetilde_02_currentValue = __linetilde_02_currentValue;
                this->linetilde_02_time = __linetilde_02_time;
            }
            
            void linetilde_03_perform(SampleValue * out, Index n) {
                auto __linetilde_03_time = this->linetilde_03_time;
                auto __linetilde_03_keepramp = this->linetilde_03_keepramp;
                auto __linetilde_03_currentValue = this->linetilde_03_currentValue;
                Index i = 0;
            
                if ((bool)(this->linetilde_03_activeRamps->length)) {
                    while ((bool)(this->linetilde_03_activeRamps->length) && i < n) {
                        number destinationValue = this->linetilde_03_activeRamps[0];
                        number inc = this->linetilde_03_activeRamps[1];
                        number rampTimeInSamples = this->linetilde_03_activeRamps[2] - this->audioProcessSampleCount - i;
                        number val = __linetilde_03_currentValue;
            
                        while (rampTimeInSamples > 0 && i < n) {
                            out[(Index)i] = val;
                            val += inc;
                            i++;
                            rampTimeInSamples--;
                        }
            
                        if (rampTimeInSamples <= 0) {
                            val = destinationValue;
                            this->linetilde_03_activeRamps->splice(0, 3);
            
                            if ((bool)(!(bool)(this->linetilde_03_activeRamps->length))) {
                                this->getEngine()->scheduleClockEventWithValue(
                                    this,
                                    894770446,
                                    this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                                    0
                                );;
            
                                if ((bool)(!(bool)(__linetilde_03_keepramp))) {
                                    __linetilde_03_time = 0;
                                }
                            }
                        }
            
                        __linetilde_03_currentValue = val;
                    }
                }
            
                while (i < n) {
                    out[(Index)i] = __linetilde_03_currentValue;
                    i++;
                }
            
                this->linetilde_03_currentValue = __linetilde_03_currentValue;
                this->linetilde_03_time = __linetilde_03_time;
            }
            
            void filtercoeff_01_perform(
                const Sample * frequency,
                const Sample * gain,
                const Sample * q,
                SampleValue * a0,
                SampleValue * a1,
                SampleValue * a2,
                SampleValue * b1,
                SampleValue * b2,
                Index n
            ) {
                auto __filtercoeff_01_activeResamp = this->filtercoeff_01_activeResamp;
                auto __filtercoeff_01_resamp_counter = this->filtercoeff_01_resamp_counter;
                auto __filtercoeff_01_K_EPSILON = this->filtercoeff_01_K_EPSILON;
            
                for (Index i = 0; i < n; i++) {
                    number local_q = q[(Index)i];
                    number local_gain = gain[(Index)i];
            
                    if (local_gain < 0)
                        local_gain = 0;
            
                    number local_frequency = frequency[(Index)i];
            
                    if (local_q < __filtercoeff_01_K_EPSILON)
                        local_q = __filtercoeff_01_K_EPSILON;
            
                    local_frequency = (local_frequency > this->sr * 0.5 ? this->sr * 0.5 : (local_frequency < 1 ? 1 : local_frequency));
                    __filtercoeff_01_resamp_counter--;
            
                    if (__filtercoeff_01_resamp_counter <= 0) {
                        __filtercoeff_01_resamp_counter = __filtercoeff_01_activeResamp;
                        this->filtercoeff_01_updateTerms(local_frequency, local_gain, local_q);
                    }
            
                    a0[(Index)i] = this->filtercoeff_01_la0;
                    a1[(Index)i] = this->filtercoeff_01_la1;
                    a2[(Index)i] = this->filtercoeff_01_la2;
                    b1[(Index)i] = this->filtercoeff_01_lb1;
                    b2[(Index)i] = this->filtercoeff_01_lb2;
                }
            
                this->filtercoeff_01_resamp_counter = __filtercoeff_01_resamp_counter;
            }
            
            void biquad_tilde_02_perform(
                const Sample * x,
                const Sample * a0,
                const Sample * a1,
                const Sample * a2,
                const Sample * b1,
                const Sample * b2,
                SampleValue * out1,
                Index n
            ) {
                auto __biquad_tilde_02_y2 = this->biquad_tilde_02_y2;
                auto __biquad_tilde_02_y1 = this->biquad_tilde_02_y1;
                auto __biquad_tilde_02_x2 = this->biquad_tilde_02_x2;
                auto __biquad_tilde_02_x1 = this->biquad_tilde_02_x1;
                Index i;
            
                for (i = 0; i < n; i++) {
                    number tmp = x[(Index)i] * a0[(Index)i] + __biquad_tilde_02_x1 * a1[(Index)i] + __biquad_tilde_02_x2 * a2[(Index)i] - (__biquad_tilde_02_y1 * b1[(Index)i] + __biquad_tilde_02_y2 * b2[(Index)i]);
                    __biquad_tilde_02_x2 = __biquad_tilde_02_x1;
                    __biquad_tilde_02_x1 = x[(Index)i];
                    __biquad_tilde_02_y2 = __biquad_tilde_02_y1;
                    __biquad_tilde_02_y1 = tmp;
                    out1[(Index)i] = tmp;
                }
            
                this->biquad_tilde_02_x1 = __biquad_tilde_02_x1;
                this->biquad_tilde_02_x2 = __biquad_tilde_02_x2;
                this->biquad_tilde_02_y1 = __biquad_tilde_02_y1;
                this->biquad_tilde_02_y2 = __biquad_tilde_02_y2;
            }
            
            void biquad_tilde_01_perform(
                const Sample * x,
                const Sample * a0,
                const Sample * a1,
                const Sample * a2,
                const Sample * b1,
                const Sample * b2,
                SampleValue * out1,
                Index n
            ) {
                auto __biquad_tilde_01_y2 = this->biquad_tilde_01_y2;
                auto __biquad_tilde_01_y1 = this->biquad_tilde_01_y1;
                auto __biquad_tilde_01_x2 = this->biquad_tilde_01_x2;
                auto __biquad_tilde_01_x1 = this->biquad_tilde_01_x1;
                Index i;
            
                for (i = 0; i < n; i++) {
                    number tmp = x[(Index)i] * a0[(Index)i] + __biquad_tilde_01_x1 * a1[(Index)i] + __biquad_tilde_01_x2 * a2[(Index)i] - (__biquad_tilde_01_y1 * b1[(Index)i] + __biquad_tilde_01_y2 * b2[(Index)i]);
                    __biquad_tilde_01_x2 = __biquad_tilde_01_x1;
                    __biquad_tilde_01_x1 = x[(Index)i];
                    __biquad_tilde_01_y2 = __biquad_tilde_01_y1;
                    __biquad_tilde_01_y1 = tmp;
                    out1[(Index)i] = tmp;
                }
            
                this->biquad_tilde_01_x1 = __biquad_tilde_01_x1;
                this->biquad_tilde_01_x2 = __biquad_tilde_01_x2;
                this->biquad_tilde_01_y1 = __biquad_tilde_01_y1;
                this->biquad_tilde_01_y2 = __biquad_tilde_01_y2;
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void numberobj_01_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_01_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_01_value = localvalue;
            }
            
            void numberobj_02_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_02_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_02_value = localvalue;
            }
            
            void numberobj_03_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_03_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_03_value = localvalue;
            }
            
            void biquad_tilde_01_reset() {
                this->biquad_tilde_01_x1 = 0;
                this->biquad_tilde_01_x2 = 0;
                this->biquad_tilde_01_y1 = 0;
                this->biquad_tilde_01_y2 = 0;
            }
            
            void biquad_tilde_01_dspsetup(bool force) {
                if ((bool)(this->biquad_tilde_01_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->biquad_tilde_01_reset();
                this->biquad_tilde_01_setupDone = true;
            }
            
            void biquad_tilde_02_reset() {
                this->biquad_tilde_02_x1 = 0;
                this->biquad_tilde_02_x2 = 0;
                this->biquad_tilde_02_y1 = 0;
                this->biquad_tilde_02_y2 = 0;
            }
            
            void biquad_tilde_02_dspsetup(bool force) {
                if ((bool)(this->biquad_tilde_02_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->biquad_tilde_02_reset();
                this->biquad_tilde_02_setupDone = true;
            }
            
            void numberobj_01_init() {
                this->numberobj_01_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("Post-EQ~/Bass~/number_obj-7"), 1, this->_currentTime);
            }
            
            void numberobj_01_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_01_value;
            }
            
            void numberobj_01_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_01_value_set(preset["value"]);
            }
            
            array<number, 5> filtercoeff_01_localop_next(number frequency, number q, number gain, number type) {
                number omega = frequency * this->filtercoeff_01_localop_twopi_over_sr;
                this->filtercoeff_01_localop_cs = rnbo_cos(omega);
                this->filtercoeff_01_localop_sn = rnbo_sin(omega);
                this->filtercoeff_01_localop_one_over_gain = (gain >= 0 ? (number)1 / gain : 0.0);
                this->filtercoeff_01_localop_one_over_q = (number)1 / q;
                this->filtercoeff_01_localop_alpha = this->filtercoeff_01_localop_sn * 0.5 * this->filtercoeff_01_localop_one_over_q;
            
                switch ((int)type) {
                case 5:
                    {
                    this->filtercoeff_01_localop_A = this->safesqrt(gain);
            
                    this->filtercoeff_01_localop_beta = this->safesqrt(
                        (this->filtercoeff_01_localop_A * this->filtercoeff_01_localop_A + 1.) * this->filtercoeff_01_localop_one_over_q - (this->filtercoeff_01_localop_A - 1.) * (this->filtercoeff_01_localop_A - 1.)
                    );
            
                    this->filtercoeff_01_localop_b0 = (number)1 / (this->filtercoeff_01_localop_A + 1. + (this->filtercoeff_01_localop_A - 1.) * this->filtercoeff_01_localop_cs + this->filtercoeff_01_localop_beta * this->filtercoeff_01_localop_sn);
                    break;
                    }
                case 6:
                    {
                    this->filtercoeff_01_localop_A = this->safesqrt(gain);
            
                    this->filtercoeff_01_localop_beta = this->safesqrt(
                        (this->filtercoeff_01_localop_A * this->filtercoeff_01_localop_A + 1.) * this->filtercoeff_01_localop_one_over_q - (this->filtercoeff_01_localop_A - 1.) * (this->filtercoeff_01_localop_A - 1.)
                    );
            
                    this->filtercoeff_01_localop_b0 = (number)1 / (this->filtercoeff_01_localop_A + 1. - (this->filtercoeff_01_localop_A - 1.) * this->filtercoeff_01_localop_cs + this->filtercoeff_01_localop_beta * this->filtercoeff_01_localop_sn);
                    break;
                    }
                case 4:
                    {
                    this->filtercoeff_01_localop_A = this->safesqrt(gain);
                    this->filtercoeff_01_localop_one_over_a = (this->filtercoeff_01_localop_A == 0 ? 0 : (number)1 / this->filtercoeff_01_localop_A);
                    this->filtercoeff_01_localop_b0 = (number)1 / (1. + this->filtercoeff_01_localop_alpha * this->filtercoeff_01_localop_one_over_a);
                    break;
                    }
                case 9:
                case 10:
                case 11:
                case 13:
                case 14:
                    {
                    this->filtercoeff_01_localop_b0 = (number)1 / (1. + this->filtercoeff_01_localop_alpha);
                    this->filtercoeff_01_localop_b0g = (number)1 / (this->filtercoeff_01_localop_one_over_gain + this->filtercoeff_01_localop_alpha * this->filtercoeff_01_localop_one_over_gain);
                    break;
                    }
                default:
                    {
                    this->filtercoeff_01_localop_b0 = (number)1 / (1. + this->filtercoeff_01_localop_alpha);
                    break;
                    }
                }
            
                switch ((int)type) {
                case 0:
                    {
                    this->filtercoeff_01_localop_la0 = this->filtercoeff_01_localop_la2 = (1. - this->filtercoeff_01_localop_cs) * 0.5 * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_la1 = (1. - this->filtercoeff_01_localop_cs) * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_lb1 = -2. * this->filtercoeff_01_localop_cs * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_lb2 = (1. - this->filtercoeff_01_localop_alpha) * this->filtercoeff_01_localop_b0;
                    break;
                    }
                case 1:
                    {
                    this->filtercoeff_01_localop_la0 = this->filtercoeff_01_localop_la2 = (1. + this->filtercoeff_01_localop_cs) * 0.5 * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_la1 = -(1. + this->filtercoeff_01_localop_cs) * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_lb1 = -2. * this->filtercoeff_01_localop_cs * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_lb2 = (1. - this->filtercoeff_01_localop_alpha) * this->filtercoeff_01_localop_b0;
                    break;
                    }
                case 2:
                    {
                    this->filtercoeff_01_localop_la0 = this->filtercoeff_01_localop_alpha * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_la1 = 0.;
                    this->filtercoeff_01_localop_la2 = -this->filtercoeff_01_localop_alpha * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_lb1 = -2. * this->filtercoeff_01_localop_cs * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_lb2 = (1. - this->filtercoeff_01_localop_alpha) * this->filtercoeff_01_localop_b0;
                    break;
                    }
                case 7:
                    {
                    this->filtercoeff_01_localop_la0 = this->filtercoeff_01_localop_alpha * q * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_la1 = 0.;
                    this->filtercoeff_01_localop_la2 = -this->filtercoeff_01_localop_alpha * q * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_lb1 = -2. * this->filtercoeff_01_localop_cs * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_lb2 = (1. - this->filtercoeff_01_localop_alpha) * this->filtercoeff_01_localop_b0;
                    break;
                    }
                case 3:
                    {
                    this->filtercoeff_01_localop_la1 = this->filtercoeff_01_localop_lb1 = -2. * this->filtercoeff_01_localop_cs * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_lb2 = (1. - this->filtercoeff_01_localop_alpha) * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_la0 = this->filtercoeff_01_localop_la2 = this->filtercoeff_01_localop_b0;
                    break;
                    }
                case 8:
                    {
                    this->filtercoeff_01_localop_la1 = this->filtercoeff_01_localop_lb1 = -2. * this->filtercoeff_01_localop_cs * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_lb2 = this->filtercoeff_01_localop_la0 = (1. - this->filtercoeff_01_localop_alpha) * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_la2 = 1.0;
                    break;
                    }
                case 4:
                    {
                    this->filtercoeff_01_localop_la0 = (1. + this->filtercoeff_01_localop_alpha * this->filtercoeff_01_localop_A) * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_la1 = this->filtercoeff_01_localop_lb1 = -2. * this->filtercoeff_01_localop_cs * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_la2 = (1. - this->filtercoeff_01_localop_alpha * this->filtercoeff_01_localop_A) * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_lb2 = (1. - this->filtercoeff_01_localop_alpha * this->filtercoeff_01_localop_one_over_a) * this->filtercoeff_01_localop_b0;
                    break;
                    }
                case 5:
                    {
                    this->filtercoeff_01_localop_la0 = this->filtercoeff_01_localop_A * (this->filtercoeff_01_localop_A + 1. - (this->filtercoeff_01_localop_A - 1.) * this->filtercoeff_01_localop_cs + this->filtercoeff_01_localop_beta * this->filtercoeff_01_localop_sn) * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_la1 = 2. * this->filtercoeff_01_localop_A * (this->filtercoeff_01_localop_A - 1 - (this->filtercoeff_01_localop_A + 1) * this->filtercoeff_01_localop_cs) * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_la2 = this->filtercoeff_01_localop_A * (this->filtercoeff_01_localop_A + 1. - (this->filtercoeff_01_localop_A - 1.) * this->filtercoeff_01_localop_cs - this->filtercoeff_01_localop_beta * this->filtercoeff_01_localop_sn) * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_lb1 = -2. * (this->filtercoeff_01_localop_A - 1. + (this->filtercoeff_01_localop_A + 1.) * this->filtercoeff_01_localop_cs) * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_lb2 = (this->filtercoeff_01_localop_A + 1. + (this->filtercoeff_01_localop_A - 1.) * this->filtercoeff_01_localop_cs - this->filtercoeff_01_localop_beta * this->filtercoeff_01_localop_sn) * this->filtercoeff_01_localop_b0;
                    break;
                    }
                case 6:
                    {
                    this->filtercoeff_01_localop_la0 = this->filtercoeff_01_localop_A * (this->filtercoeff_01_localop_A + 1. + (this->filtercoeff_01_localop_A - 1.) * this->filtercoeff_01_localop_cs + this->filtercoeff_01_localop_beta * this->filtercoeff_01_localop_sn) * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_la1 = -2. * this->filtercoeff_01_localop_A * (this->filtercoeff_01_localop_A - 1. + (this->filtercoeff_01_localop_A + 1.) * this->filtercoeff_01_localop_cs) * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_la2 = this->filtercoeff_01_localop_A * (this->filtercoeff_01_localop_A + 1. + (this->filtercoeff_01_localop_A - 1.) * this->filtercoeff_01_localop_cs - this->filtercoeff_01_localop_beta * this->filtercoeff_01_localop_sn) * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_lb1 = 2. * (this->filtercoeff_01_localop_A - 1. - (this->filtercoeff_01_localop_A + 1.) * this->filtercoeff_01_localop_cs) * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_lb2 = (this->filtercoeff_01_localop_A + 1. - (this->filtercoeff_01_localop_A - 1.) * this->filtercoeff_01_localop_cs - this->filtercoeff_01_localop_beta * this->filtercoeff_01_localop_sn) * this->filtercoeff_01_localop_b0;
                    break;
                    }
                case 9:
                    {
                    this->filtercoeff_01_localop_b0g = (number)1 / (this->filtercoeff_01_localop_one_over_gain + this->filtercoeff_01_localop_alpha * this->filtercoeff_01_localop_one_over_gain);
                    this->filtercoeff_01_localop_la0 = this->filtercoeff_01_localop_la2 = (1. - this->filtercoeff_01_localop_cs) * 0.5 * this->filtercoeff_01_localop_b0g;
                    this->filtercoeff_01_localop_la1 = (1. - this->filtercoeff_01_localop_cs) * this->filtercoeff_01_localop_b0g;
                    this->filtercoeff_01_localop_lb1 = -2. * this->filtercoeff_01_localop_cs * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_lb2 = (1. - this->filtercoeff_01_localop_alpha) * this->filtercoeff_01_localop_b0;
                    break;
                    }
                case 10:
                    {
                    this->filtercoeff_01_localop_b0g = (number)1 / (this->filtercoeff_01_localop_one_over_gain + this->filtercoeff_01_localop_alpha * this->filtercoeff_01_localop_one_over_gain);
                    this->filtercoeff_01_localop_la0 = this->filtercoeff_01_localop_la2 = (1. + this->filtercoeff_01_localop_cs) * 0.5 * this->filtercoeff_01_localop_b0g;
                    this->filtercoeff_01_localop_la1 = -(1. + this->filtercoeff_01_localop_cs) * this->filtercoeff_01_localop_b0g;
                    this->filtercoeff_01_localop_lb1 = -2. * this->filtercoeff_01_localop_cs * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_lb2 = (1. - this->filtercoeff_01_localop_alpha) * this->filtercoeff_01_localop_b0;
                    break;
                    }
                case 11:
                    {
                    this->filtercoeff_01_localop_la0 = this->filtercoeff_01_localop_alpha * gain * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_la1 = 0.;
                    this->filtercoeff_01_localop_la2 = -this->filtercoeff_01_localop_alpha * gain * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_lb1 = -2. * this->filtercoeff_01_localop_cs * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_lb2 = (1. - this->filtercoeff_01_localop_alpha) * this->filtercoeff_01_localop_b0;
                    break;
                    }
                case 13:
                    {
                    this->filtercoeff_01_localop_la0 = this->filtercoeff_01_localop_alpha * gain * q * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_la1 = 0.;
                    this->filtercoeff_01_localop_la2 = -this->filtercoeff_01_localop_alpha * gain * q * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_lb1 = -2. * this->filtercoeff_01_localop_cs * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_lb2 = (1. - this->filtercoeff_01_localop_alpha) * this->filtercoeff_01_localop_b0;
                    break;
                    }
                case 12:
                    {
                    this->filtercoeff_01_localop_b0g = (number)1 / (this->filtercoeff_01_localop_one_over_gain + this->filtercoeff_01_localop_alpha * this->filtercoeff_01_localop_one_over_gain);
                    this->filtercoeff_01_localop_la1 = this->filtercoeff_01_localop_lb1 = -2. * this->filtercoeff_01_localop_cs;
                    this->filtercoeff_01_localop_lb2 = (1. - this->filtercoeff_01_localop_alpha) * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_la1 *= this->filtercoeff_01_localop_b0g;
                    this->filtercoeff_01_localop_lb1 *= this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_la0 = this->filtercoeff_01_localop_b0g;
                    this->filtercoeff_01_localop_la2 = this->filtercoeff_01_localop_b0g;
                    break;
                    }
                case 14:
                    {
                    this->filtercoeff_01_localop_b0g = (number)1 / (this->filtercoeff_01_localop_one_over_gain + this->filtercoeff_01_localop_alpha * this->filtercoeff_01_localop_one_over_gain);
                    this->filtercoeff_01_localop_la0 = (1. - this->filtercoeff_01_localop_alpha) * this->filtercoeff_01_localop_b0g;
                    this->filtercoeff_01_localop_la1 = -2. * this->filtercoeff_01_localop_cs * this->filtercoeff_01_localop_b0g;
                    this->filtercoeff_01_localop_la2 = gain;
                    this->filtercoeff_01_localop_lb1 = -2. * this->filtercoeff_01_localop_cs * this->filtercoeff_01_localop_b0;
                    this->filtercoeff_01_localop_lb2 = (1. - this->filtercoeff_01_localop_alpha) * this->filtercoeff_01_localop_b0;
                    break;
                    }
                case 15:
                    {
                    this->filtercoeff_01_localop_la0 = 1;
                    this->filtercoeff_01_localop_la1 = 0;
                    this->filtercoeff_01_localop_la2 = 0;
                    this->filtercoeff_01_localop_lb1 = 0;
                    this->filtercoeff_01_localop_lb2 = 0;
                    }
                default:
                    {
                    break;
                    }
                }
            
                return {
                    this->filtercoeff_01_localop_la0,
                    this->filtercoeff_01_localop_la1,
                    this->filtercoeff_01_localop_la2,
                    this->filtercoeff_01_localop_lb1,
                    this->filtercoeff_01_localop_lb2
                };
            }
            
            void filtercoeff_01_localop_dspsetup() {
                this->filtercoeff_01_localop_twopi_over_sr = (number)6.283185307179586 / this->sr;
            }
            
            void filtercoeff_01_localop_reset() {
                this->filtercoeff_01_localop_twopi_over_sr = 0;
                this->filtercoeff_01_localop_cs = 0;
                this->filtercoeff_01_localop_sn = 0;
                this->filtercoeff_01_localop_one_over_gain = 0;
                this->filtercoeff_01_localop_one_over_q = 0;
                this->filtercoeff_01_localop_alpha = 0;
                this->filtercoeff_01_localop_beta = 0;
                this->filtercoeff_01_localop_b0 = 0;
                this->filtercoeff_01_localop_b0g = 0;
                this->filtercoeff_01_localop_A = 0;
                this->filtercoeff_01_localop_one_over_a = 0;
                this->filtercoeff_01_localop_la0 = 0;
                this->filtercoeff_01_localop_la1 = 0;
                this->filtercoeff_01_localop_la2 = 0;
                this->filtercoeff_01_localop_lb1 = 0;
                this->filtercoeff_01_localop_lb2 = 0;
            }
            
            void filtercoeff_01_updateTerms(number local_frequency, number local_gain, number local_q) {
                if ((bool)(this->filtercoeff_01_force_update) || local_frequency != this->filtercoeff_01_last_frequency || local_q != this->filtercoeff_01_last_q || local_gain != this->filtercoeff_01_last_gain || this->filtercoeff_01_type != this->filtercoeff_01_last_type) {
                    array<number, 5> tmp = this->filtercoeff_01_localop_next(local_frequency, local_q, local_gain, this->filtercoeff_01_type);
                    this->filtercoeff_01_la0 = tmp[0];
                    this->filtercoeff_01_la1 = tmp[1];
                    this->filtercoeff_01_la2 = tmp[2];
                    this->filtercoeff_01_lb1 = tmp[3];
                    this->filtercoeff_01_lb2 = tmp[4];
                    this->filtercoeff_01_last_frequency = local_frequency;
                    this->filtercoeff_01_last_q = local_q;
                    this->filtercoeff_01_last_gain = local_gain;
                    this->filtercoeff_01_last_type = this->filtercoeff_01_type;
                    this->filtercoeff_01_force_update = false;
                }
            }
            
            void filtercoeff_01_dspsetup(bool force) {
                if ((bool)(this->filtercoeff_01_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                {
                    this->filtercoeff_01_activeResamp = this->vectorsize();
                }
            
                this->filtercoeff_01_resamp_counter = 0;
                this->filtercoeff_01_la0 = 0.;
                this->filtercoeff_01_la1 = 0.;
                this->filtercoeff_01_la2 = 0.;
                this->filtercoeff_01_lb1 = 0.;
                this->filtercoeff_01_lb2 = 0.;
                this->filtercoeff_01_last_frequency = -1.;
                this->filtercoeff_01_last_q = -1.;
                this->filtercoeff_01_last_gain = -1.;
                this->filtercoeff_01_last_type = this->filtercoeff_01_type;
                this->filtercoeff_01_force_update = true;
                this->filtercoeff_01_setupDone = true;
                this->filtercoeff_01_localop_dspsetup();
            }
            
            void numberobj_02_init() {
                this->numberobj_02_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("Post-EQ~/Bass~/number_obj-4"), 1, this->_currentTime);
            }
            
            void numberobj_02_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_02_value;
            }
            
            void numberobj_02_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_02_value_set(preset["value"]);
            }
            
            void numberobj_03_init() {
                this->numberobj_03_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("Post-EQ~/Bass~/number_obj-12"), 1, this->_currentTime);
            }
            
            void numberobj_03_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_03_value;
            }
            
            void numberobj_03_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_03_value_set(preset["value"]);
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                biquad_tilde_01_x = 0;
                biquad_tilde_01_a0 = 0;
                biquad_tilde_01_a1 = 0;
                biquad_tilde_01_a2 = 0;
                biquad_tilde_01_b1 = 0;
                biquad_tilde_01_b2 = 0;
                biquad_tilde_02_x = 0;
                biquad_tilde_02_a0 = 0;
                biquad_tilde_02_a1 = 0;
                biquad_tilde_02_a2 = 0;
                biquad_tilde_02_b1 = 0;
                biquad_tilde_02_b2 = 0;
                numberobj_01_value = 0;
                numberobj_01_value_setter(numberobj_01_value);
                linetilde_01_time = 10;
                linetilde_01_keepramp = 0;
                filtercoeff_01_frequency = 1000;
                filtercoeff_01_gain = 1;
                filtercoeff_01_q = 1;
                filtercoeff_01_type = 4;
                numberobj_02_value = 0;
                numberobj_02_value_setter(numberobj_02_value);
                expr_01_in1 = 0;
                expr_01_out1 = 0;
                linetilde_02_time = 10;
                linetilde_02_keepramp = 0;
                numberobj_03_value = 0;
                numberobj_03_value_setter(numberobj_03_value);
                linetilde_03_time = 10;
                linetilde_03_keepramp = 0;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                signals[1] = nullptr;
                signals[2] = nullptr;
                signals[3] = nullptr;
                signals[4] = nullptr;
                signals[5] = nullptr;
                signals[6] = nullptr;
                signals[7] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                biquad_tilde_01_x1 = 0;
                biquad_tilde_01_x2 = 0;
                biquad_tilde_01_y1 = 0;
                biquad_tilde_01_y2 = 0;
                biquad_tilde_01_setupDone = false;
                biquad_tilde_02_x1 = 0;
                biquad_tilde_02_x2 = 0;
                biquad_tilde_02_y1 = 0;
                biquad_tilde_02_y2 = 0;
                biquad_tilde_02_setupDone = false;
                numberobj_01_currentFormat = 6;
                numberobj_01_lastValue = 0;
                linetilde_01_currentValue = 100;
                filtercoeff_01_K_EPSILON = 1e-9;
                filtercoeff_01_setupDone = false;
                numberobj_02_currentFormat = 6;
                numberobj_02_lastValue = 0;
                linetilde_02_currentValue = 1;
                numberobj_03_currentFormat = 6;
                numberobj_03_lastValue = 0;
                linetilde_03_currentValue = 0.7;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number biquad_tilde_01_x;
                number biquad_tilde_01_a0;
                number biquad_tilde_01_a1;
                number biquad_tilde_01_a2;
                number biquad_tilde_01_b1;
                number biquad_tilde_01_b2;
                number biquad_tilde_02_x;
                number biquad_tilde_02_a0;
                number biquad_tilde_02_a1;
                number biquad_tilde_02_a2;
                number biquad_tilde_02_b1;
                number biquad_tilde_02_b2;
                number numberobj_01_value;
                list linetilde_01_segments;
                number linetilde_01_time;
                number linetilde_01_keepramp;
                number filtercoeff_01_frequency;
                number filtercoeff_01_gain;
                number filtercoeff_01_q;
                Int filtercoeff_01_type;
                number numberobj_02_value;
                number expr_01_in1;
                number expr_01_out1;
                list linetilde_02_segments;
                number linetilde_02_time;
                number linetilde_02_keepramp;
                number numberobj_03_value;
                list linetilde_03_segments;
                number linetilde_03_time;
                number linetilde_03_keepramp;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[8];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                number biquad_tilde_01_x1;
                number biquad_tilde_01_x2;
                number biquad_tilde_01_y1;
                number biquad_tilde_01_y2;
                bool biquad_tilde_01_setupDone;
                number biquad_tilde_02_x1;
                number biquad_tilde_02_x2;
                number biquad_tilde_02_y1;
                number biquad_tilde_02_y2;
                bool biquad_tilde_02_setupDone;
                Int numberobj_01_currentFormat;
                number numberobj_01_lastValue;
                list linetilde_01_activeRamps;
                number linetilde_01_currentValue;
                number filtercoeff_01_resamp_counter;
                number filtercoeff_01_activeResamp;
                number filtercoeff_01_K_EPSILON;
                number filtercoeff_01_la0;
                number filtercoeff_01_la1;
                number filtercoeff_01_la2;
                number filtercoeff_01_lb1;
                number filtercoeff_01_lb2;
                number filtercoeff_01_last_frequency;
                number filtercoeff_01_last_q;
                number filtercoeff_01_last_gain;
                Int filtercoeff_01_last_type;
                bool filtercoeff_01_force_update;
                number filtercoeff_01_localop_twopi_over_sr;
                number filtercoeff_01_localop_cs;
                number filtercoeff_01_localop_sn;
                number filtercoeff_01_localop_one_over_gain;
                number filtercoeff_01_localop_one_over_q;
                number filtercoeff_01_localop_alpha;
                number filtercoeff_01_localop_beta;
                number filtercoeff_01_localop_b0;
                number filtercoeff_01_localop_b0g;
                number filtercoeff_01_localop_A;
                number filtercoeff_01_localop_one_over_a;
                number filtercoeff_01_localop_la0;
                number filtercoeff_01_localop_la1;
                number filtercoeff_01_localop_la2;
                number filtercoeff_01_localop_lb1;
                number filtercoeff_01_localop_lb2;
                bool filtercoeff_01_setupDone;
                Int numberobj_02_currentFormat;
                number numberobj_02_lastValue;
                list linetilde_02_activeRamps;
                number linetilde_02_currentValue;
                Int numberobj_03_currentFormat;
                number numberobj_03_lastValue;
                list linetilde_03_activeRamps;
                number linetilde_03_currentValue;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_792 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_804;
            friend class drone;
            
            public:
            
            RNBOSubpatcher_792()
            {
            }
            
            ~RNBOSubpatcher_792()
            {
            }
            
            virtual RNBOSubpatcher_804* getPatcher() const {
                return static_cast<RNBOSubpatcher_804 *>(_parentPatcher);
            }
            
            drone* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
                getEngine()->flushClockEvents(this, -281953904, false);
                getEngine()->flushClockEvents(this, -1841075377, false);
                getEngine()->flushClockEvents(this, 894770446, false);
            }
            
            SampleIndex currentsampletime() {
                return this->audioProcessSampleCount + this->sampleOffsetIntoNextAudioBuffer;
            }
            
            number mstosamps(MillisecondTime ms) {
                return ms * this->sr * 0.001;
            }
            
            inline number safesqrt(number num) {
                return (num > 0.0 ? rnbo_sqrt(num) : 0.0);
            }
            
            Index vectorsize() const {
                return this->vs;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
                const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
                this->linetilde_04_perform(this->signals[0], n);
                this->linetilde_05_perform(this->signals[1], n);
                this->linetilde_06_perform(this->signals[2], n);
            
                this->filtercoeff_02_perform(
                    this->signals[0],
                    this->signals[1],
                    this->signals[2],
                    this->signals[3],
                    this->signals[4],
                    this->signals[5],
                    this->signals[6],
                    this->signals[7],
                    n
                );
            
                this->biquad_tilde_04_perform(
                    in2,
                    this->signals[3],
                    this->signals[4],
                    this->signals[5],
                    this->signals[6],
                    this->signals[7],
                    out2,
                    n
                );
            
                this->biquad_tilde_03_perform(
                    in1,
                    this->signals[3],
                    this->signals[4],
                    this->signals[5],
                    this->signals[6],
                    this->signals[7],
                    out1,
                    n
                );
            
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 8; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->filtercoeff_02_dspsetup(forceDSPSetup);
                this->biquad_tilde_04_dspsetup(forceDSPSetup);
                this->biquad_tilde_03_dspsetup(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
                RNBO_UNUSED(value);
                RNBO_UNUSED(hasValue);
                this->updateTime(time);
            
                switch (index) {
                case -281953904:
                    {
                    this->linetilde_04_target_bang();
                    break;
                    }
                case -1841075377:
                    {
                    this->linetilde_05_target_bang();
                    break;
                    }
                case 894770446:
                    {
                    this->linetilde_06_target_bang();
                    break;
                    }
                }
            }
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("valin"):
                    {
                    if (TAG("Post-EQ~/Mid~/number_obj-7") == objectId)
                        this->numberobj_04_valin_set(payload);
            
                    if (TAG("Post-EQ~/Mid~/number_obj-4") == objectId)
                        this->numberobj_05_valin_set(payload);
            
                    if (TAG("Post-EQ~/Mid~/number_obj-12") == objectId)
                        this->numberobj_06_valin_set(payload);
            
                    break;
                    }
                case TAG("format"):
                    {
                    if (TAG("Post-EQ~/Mid~/number_obj-7") == objectId)
                        this->numberobj_04_format_set(payload);
            
                    if (TAG("Post-EQ~/Mid~/number_obj-4") == objectId)
                        this->numberobj_05_format_set(payload);
            
                    if (TAG("Post-EQ~/Mid~/number_obj-12") == objectId)
                        this->numberobj_06_format_set(payload);
            
                    break;
                    }
                }
            }
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
                case TAG("valout"):
                    {
                    return "valout";
                    }
                case TAG("Post-EQ~/Mid~/number_obj-7"):
                    {
                    return "Post-EQ~/Mid~/number_obj-7";
                    }
                case TAG("setup"):
                    {
                    return "setup";
                    }
                case TAG("Post-EQ~/Mid~/number_obj-4"):
                    {
                    return "Post-EQ~/Mid~/number_obj-4";
                    }
                case TAG("Post-EQ~/Mid~/number_obj-12"):
                    {
                    return "Post-EQ~/Mid~/number_obj-12";
                    }
                case TAG("valin"):
                    {
                    return "valin";
                    }
                case TAG("format"):
                    {
                    return "format";
                    }
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            void numberobj_04_valin_set(number v) {
                this->numberobj_04_value_set(v);
            }
            
            void numberobj_04_format_set(number v) {
                this->numberobj_04_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void eventinlet_02_out1_bang_bang() {}
            
            void eventinlet_02_out1_number_set(number v) {
                {
                    list converted = {v};
                    this->unjoin_02_input_set(converted);
                }
            }
            
            void numberobj_05_valin_set(number v) {
                this->numberobj_05_value_set(v);
            }
            
            void numberobj_05_format_set(number v) {
                this->numberobj_05_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_06_valin_set(number v) {
                this->numberobj_06_value_set(v);
            }
            
            void numberobj_06_format_set(number v) {
                this->numberobj_06_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void linetilde_04_target_bang() {}
            
            void linetilde_05_target_bang() {}
            
            void linetilde_06_target_bang() {}
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 2;
            }
            
            Index getNumOutputChannels() const {
                return 2;
            }
            
            void initializeObjects() {
                this->numberobj_04_init();
                this->numberobj_05_init();
                this->numberobj_06_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {}
            
            void unjoin_02_extra_set(const list& ) {}
            
            void linetilde_06_time_set(number v) {
                this->linetilde_06_time = v;
            }
            
            void linetilde_06_segments_set(const list& v) {
                this->linetilde_06_segments = jsCreateListCopy(v);
            
                if ((bool)(v->length)) {
                    if (v->length == 1 && this->linetilde_06_time == 0) {
                        this->linetilde_06_activeRamps->length = 0;
                        this->linetilde_06_currentValue = v[0];
                    } else {
                        auto currentTime = this->currentsampletime();
                        number lastRampValue = this->linetilde_06_currentValue;
                        number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
            
                        for (Index i = 0; i < this->linetilde_06_activeRamps->length; i += 3) {
                            rampEnd = this->linetilde_06_activeRamps[(Index)(i + 2)];
            
                            if (rampEnd > currentTime) {
                                this->linetilde_06_activeRamps[(Index)(i + 2)] = currentTime;
                                number diff = rampEnd - currentTime;
                                number valueDiff = diff * this->linetilde_06_activeRamps[(Index)(i + 1)];
                                lastRampValue = this->linetilde_06_activeRamps[(Index)i] - valueDiff;
                                this->linetilde_06_activeRamps[(Index)i] = lastRampValue;
                                this->linetilde_06_activeRamps->length = i + 3;
                                rampEnd = currentTime;
                            } else {
                                lastRampValue = this->linetilde_06_activeRamps[(Index)i];
                            }
                        }
            
                        if (rampEnd < currentTime) {
                            this->linetilde_06_activeRamps->push(lastRampValue);
                            this->linetilde_06_activeRamps->push(0);
                            this->linetilde_06_activeRamps->push(currentTime);
                        }
            
                        number lastRampEnd = currentTime;
            
                        for (Index i = 0; i < v->length; i += 2) {
                            number destinationValue = v[(Index)i];
                            number inc = 0;
                            number rampTimeInSamples;
            
                            if (v->length > i + 1) {
                                rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
            
                                if ((bool)(this->linetilde_06_keepramp)) {
                                    this->linetilde_06_time_set(v[(Index)(i + 1)]);
                                }
                            } else {
                                rampTimeInSamples = this->mstosamps(this->linetilde_06_time);
                            }
            
                            if (rampTimeInSamples <= 0) {
                                rampTimeInSamples = 1;
                            }
            
                            inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                            lastRampEnd += rampTimeInSamples;
                            this->linetilde_06_activeRamps->push(destinationValue);
                            this->linetilde_06_activeRamps->push(inc);
                            this->linetilde_06_activeRamps->push(lastRampEnd);
                            lastRampValue = destinationValue;
                        }
                    }
                }
            }
            
            void numberobj_06_output_set(number v) {
                {
                    list converted = {v};
                    this->linetilde_06_segments_set(converted);
                }
            }
            
            void numberobj_06_value_set(number v) {
                this->numberobj_06_value_setter(v);
                v = this->numberobj_06_value;
                number localvalue = v;
            
                if (this->numberobj_06_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Post-EQ~/Mid~/number_obj-12"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_06_output_set(localvalue);
            }
            
            void unjoin_02_out3_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_06_value_set(converted);
                }
            }
            
            void linetilde_05_time_set(number v) {
                this->linetilde_05_time = v;
            }
            
            void linetilde_05_segments_set(const list& v) {
                this->linetilde_05_segments = jsCreateListCopy(v);
            
                if ((bool)(v->length)) {
                    if (v->length == 1 && this->linetilde_05_time == 0) {
                        this->linetilde_05_activeRamps->length = 0;
                        this->linetilde_05_currentValue = v[0];
                    } else {
                        auto currentTime = this->currentsampletime();
                        number lastRampValue = this->linetilde_05_currentValue;
                        number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
            
                        for (Index i = 0; i < this->linetilde_05_activeRamps->length; i += 3) {
                            rampEnd = this->linetilde_05_activeRamps[(Index)(i + 2)];
            
                            if (rampEnd > currentTime) {
                                this->linetilde_05_activeRamps[(Index)(i + 2)] = currentTime;
                                number diff = rampEnd - currentTime;
                                number valueDiff = diff * this->linetilde_05_activeRamps[(Index)(i + 1)];
                                lastRampValue = this->linetilde_05_activeRamps[(Index)i] - valueDiff;
                                this->linetilde_05_activeRamps[(Index)i] = lastRampValue;
                                this->linetilde_05_activeRamps->length = i + 3;
                                rampEnd = currentTime;
                            } else {
                                lastRampValue = this->linetilde_05_activeRamps[(Index)i];
                            }
                        }
            
                        if (rampEnd < currentTime) {
                            this->linetilde_05_activeRamps->push(lastRampValue);
                            this->linetilde_05_activeRamps->push(0);
                            this->linetilde_05_activeRamps->push(currentTime);
                        }
            
                        number lastRampEnd = currentTime;
            
                        for (Index i = 0; i < v->length; i += 2) {
                            number destinationValue = v[(Index)i];
                            number inc = 0;
                            number rampTimeInSamples;
            
                            if (v->length > i + 1) {
                                rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
            
                                if ((bool)(this->linetilde_05_keepramp)) {
                                    this->linetilde_05_time_set(v[(Index)(i + 1)]);
                                }
                            } else {
                                rampTimeInSamples = this->mstosamps(this->linetilde_05_time);
                            }
            
                            if (rampTimeInSamples <= 0) {
                                rampTimeInSamples = 1;
                            }
            
                            inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                            lastRampEnd += rampTimeInSamples;
                            this->linetilde_05_activeRamps->push(destinationValue);
                            this->linetilde_05_activeRamps->push(inc);
                            this->linetilde_05_activeRamps->push(lastRampEnd);
                            lastRampValue = destinationValue;
                        }
                    }
                }
            }
            
            void expr_02_out1_set(number v) {
                this->expr_02_out1 = v;
            
                {
                    list converted = {this->expr_02_out1};
                    this->linetilde_05_segments_set(converted);
                }
            }
            
            void expr_02_in1_set(number in1) {
                this->expr_02_in1 = in1;
                this->expr_02_out1_set(rnbo_pow(10, this->expr_02_in1 * 0.05));//#map:Post-EQ~/Mid~/dbtoa_obj-9:1
            }
            
            void numberobj_05_output_set(number v) {
                this->expr_02_in1_set(v);
            }
            
            void numberobj_05_value_set(number v) {
                this->numberobj_05_value_setter(v);
                v = this->numberobj_05_value;
                number localvalue = v;
            
                if (this->numberobj_05_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Post-EQ~/Mid~/number_obj-4"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_05_output_set(localvalue);
            }
            
            void unjoin_02_out2_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_05_value_set(converted);
                }
            }
            
            void linetilde_04_time_set(number v) {
                this->linetilde_04_time = v;
            }
            
            void linetilde_04_segments_set(const list& v) {
                this->linetilde_04_segments = jsCreateListCopy(v);
            
                if ((bool)(v->length)) {
                    if (v->length == 1 && this->linetilde_04_time == 0) {
                        this->linetilde_04_activeRamps->length = 0;
                        this->linetilde_04_currentValue = v[0];
                    } else {
                        auto currentTime = this->currentsampletime();
                        number lastRampValue = this->linetilde_04_currentValue;
                        number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
            
                        for (Index i = 0; i < this->linetilde_04_activeRamps->length; i += 3) {
                            rampEnd = this->linetilde_04_activeRamps[(Index)(i + 2)];
            
                            if (rampEnd > currentTime) {
                                this->linetilde_04_activeRamps[(Index)(i + 2)] = currentTime;
                                number diff = rampEnd - currentTime;
                                number valueDiff = diff * this->linetilde_04_activeRamps[(Index)(i + 1)];
                                lastRampValue = this->linetilde_04_activeRamps[(Index)i] - valueDiff;
                                this->linetilde_04_activeRamps[(Index)i] = lastRampValue;
                                this->linetilde_04_activeRamps->length = i + 3;
                                rampEnd = currentTime;
                            } else {
                                lastRampValue = this->linetilde_04_activeRamps[(Index)i];
                            }
                        }
            
                        if (rampEnd < currentTime) {
                            this->linetilde_04_activeRamps->push(lastRampValue);
                            this->linetilde_04_activeRamps->push(0);
                            this->linetilde_04_activeRamps->push(currentTime);
                        }
            
                        number lastRampEnd = currentTime;
            
                        for (Index i = 0; i < v->length; i += 2) {
                            number destinationValue = v[(Index)i];
                            number inc = 0;
                            number rampTimeInSamples;
            
                            if (v->length > i + 1) {
                                rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
            
                                if ((bool)(this->linetilde_04_keepramp)) {
                                    this->linetilde_04_time_set(v[(Index)(i + 1)]);
                                }
                            } else {
                                rampTimeInSamples = this->mstosamps(this->linetilde_04_time);
                            }
            
                            if (rampTimeInSamples <= 0) {
                                rampTimeInSamples = 1;
                            }
            
                            inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                            lastRampEnd += rampTimeInSamples;
                            this->linetilde_04_activeRamps->push(destinationValue);
                            this->linetilde_04_activeRamps->push(inc);
                            this->linetilde_04_activeRamps->push(lastRampEnd);
                            lastRampValue = destinationValue;
                        }
                    }
                }
            }
            
            void numberobj_04_output_set(number v) {
                {
                    list converted = {v};
                    this->linetilde_04_segments_set(converted);
                }
            }
            
            void numberobj_04_value_set(number v) {
                this->numberobj_04_value_setter(v);
                v = this->numberobj_04_value;
                number localvalue = v;
            
                if (this->numberobj_04_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Post-EQ~/Mid~/number_obj-7"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_04_output_set(localvalue);
            }
            
            void unjoin_02_out1_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_04_value_set(converted);
                }
            }
            
            void unjoin_02_input_set(const list& v) {
                if (v->length > 3) {
                    list tmp = {};
            
                    for (number i = 3; i < v->length; i++) {
                        tmp->push(v[(Index)i]);
                    }
            
                    this->unjoin_02_extra_set(tmp);
                }
            
                if (v->length > 2) {
                    list tmp = {};
            
                    for (Index i = 2; i < 3 && i < v->length; i++) {
                        tmp->push(v[(Index)i]);
                    }
            
                    this->unjoin_02_out3_set(tmp);
                }
            
                if (v->length > 1) {
                    list tmp = {};
            
                    for (Index i = 1; i < 2 && i < v->length; i++) {
                        tmp->push(v[(Index)i]);
                    }
            
                    this->unjoin_02_out2_set(tmp);
                }
            
                if (v->length > 0) {
                    list tmp = {};
            
                    for (Index i = 0; i < 1 && i < v->length; i++) {
                        tmp->push(v[(Index)i]);
                    }
            
                    this->unjoin_02_out1_set(tmp);
                }
            }
            
            void eventinlet_02_out1_list_set(const list& v) {
                this->unjoin_02_input_set(v);
            }
            
            void linetilde_04_perform(SampleValue * out, Index n) {
                auto __linetilde_04_time = this->linetilde_04_time;
                auto __linetilde_04_keepramp = this->linetilde_04_keepramp;
                auto __linetilde_04_currentValue = this->linetilde_04_currentValue;
                Index i = 0;
            
                if ((bool)(this->linetilde_04_activeRamps->length)) {
                    while ((bool)(this->linetilde_04_activeRamps->length) && i < n) {
                        number destinationValue = this->linetilde_04_activeRamps[0];
                        number inc = this->linetilde_04_activeRamps[1];
                        number rampTimeInSamples = this->linetilde_04_activeRamps[2] - this->audioProcessSampleCount - i;
                        number val = __linetilde_04_currentValue;
            
                        while (rampTimeInSamples > 0 && i < n) {
                            out[(Index)i] = val;
                            val += inc;
                            i++;
                            rampTimeInSamples--;
                        }
            
                        if (rampTimeInSamples <= 0) {
                            val = destinationValue;
                            this->linetilde_04_activeRamps->splice(0, 3);
            
                            if ((bool)(!(bool)(this->linetilde_04_activeRamps->length))) {
                                this->getEngine()->scheduleClockEventWithValue(
                                    this,
                                    -281953904,
                                    this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                                    0
                                );;
            
                                if ((bool)(!(bool)(__linetilde_04_keepramp))) {
                                    __linetilde_04_time = 0;
                                }
                            }
                        }
            
                        __linetilde_04_currentValue = val;
                    }
                }
            
                while (i < n) {
                    out[(Index)i] = __linetilde_04_currentValue;
                    i++;
                }
            
                this->linetilde_04_currentValue = __linetilde_04_currentValue;
                this->linetilde_04_time = __linetilde_04_time;
            }
            
            void linetilde_05_perform(SampleValue * out, Index n) {
                auto __linetilde_05_time = this->linetilde_05_time;
                auto __linetilde_05_keepramp = this->linetilde_05_keepramp;
                auto __linetilde_05_currentValue = this->linetilde_05_currentValue;
                Index i = 0;
            
                if ((bool)(this->linetilde_05_activeRamps->length)) {
                    while ((bool)(this->linetilde_05_activeRamps->length) && i < n) {
                        number destinationValue = this->linetilde_05_activeRamps[0];
                        number inc = this->linetilde_05_activeRamps[1];
                        number rampTimeInSamples = this->linetilde_05_activeRamps[2] - this->audioProcessSampleCount - i;
                        number val = __linetilde_05_currentValue;
            
                        while (rampTimeInSamples > 0 && i < n) {
                            out[(Index)i] = val;
                            val += inc;
                            i++;
                            rampTimeInSamples--;
                        }
            
                        if (rampTimeInSamples <= 0) {
                            val = destinationValue;
                            this->linetilde_05_activeRamps->splice(0, 3);
            
                            if ((bool)(!(bool)(this->linetilde_05_activeRamps->length))) {
                                this->getEngine()->scheduleClockEventWithValue(
                                    this,
                                    -1841075377,
                                    this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                                    0
                                );;
            
                                if ((bool)(!(bool)(__linetilde_05_keepramp))) {
                                    __linetilde_05_time = 0;
                                }
                            }
                        }
            
                        __linetilde_05_currentValue = val;
                    }
                }
            
                while (i < n) {
                    out[(Index)i] = __linetilde_05_currentValue;
                    i++;
                }
            
                this->linetilde_05_currentValue = __linetilde_05_currentValue;
                this->linetilde_05_time = __linetilde_05_time;
            }
            
            void linetilde_06_perform(SampleValue * out, Index n) {
                auto __linetilde_06_time = this->linetilde_06_time;
                auto __linetilde_06_keepramp = this->linetilde_06_keepramp;
                auto __linetilde_06_currentValue = this->linetilde_06_currentValue;
                Index i = 0;
            
                if ((bool)(this->linetilde_06_activeRamps->length)) {
                    while ((bool)(this->linetilde_06_activeRamps->length) && i < n) {
                        number destinationValue = this->linetilde_06_activeRamps[0];
                        number inc = this->linetilde_06_activeRamps[1];
                        number rampTimeInSamples = this->linetilde_06_activeRamps[2] - this->audioProcessSampleCount - i;
                        number val = __linetilde_06_currentValue;
            
                        while (rampTimeInSamples > 0 && i < n) {
                            out[(Index)i] = val;
                            val += inc;
                            i++;
                            rampTimeInSamples--;
                        }
            
                        if (rampTimeInSamples <= 0) {
                            val = destinationValue;
                            this->linetilde_06_activeRamps->splice(0, 3);
            
                            if ((bool)(!(bool)(this->linetilde_06_activeRamps->length))) {
                                this->getEngine()->scheduleClockEventWithValue(
                                    this,
                                    894770446,
                                    this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                                    0
                                );;
            
                                if ((bool)(!(bool)(__linetilde_06_keepramp))) {
                                    __linetilde_06_time = 0;
                                }
                            }
                        }
            
                        __linetilde_06_currentValue = val;
                    }
                }
            
                while (i < n) {
                    out[(Index)i] = __linetilde_06_currentValue;
                    i++;
                }
            
                this->linetilde_06_currentValue = __linetilde_06_currentValue;
                this->linetilde_06_time = __linetilde_06_time;
            }
            
            void filtercoeff_02_perform(
                const Sample * frequency,
                const Sample * gain,
                const Sample * q,
                SampleValue * a0,
                SampleValue * a1,
                SampleValue * a2,
                SampleValue * b1,
                SampleValue * b2,
                Index n
            ) {
                auto __filtercoeff_02_activeResamp = this->filtercoeff_02_activeResamp;
                auto __filtercoeff_02_resamp_counter = this->filtercoeff_02_resamp_counter;
                auto __filtercoeff_02_K_EPSILON = this->filtercoeff_02_K_EPSILON;
            
                for (Index i = 0; i < n; i++) {
                    number local_q = q[(Index)i];
                    number local_gain = gain[(Index)i];
            
                    if (local_gain < 0)
                        local_gain = 0;
            
                    number local_frequency = frequency[(Index)i];
            
                    if (local_q < __filtercoeff_02_K_EPSILON)
                        local_q = __filtercoeff_02_K_EPSILON;
            
                    local_frequency = (local_frequency > this->sr * 0.5 ? this->sr * 0.5 : (local_frequency < 1 ? 1 : local_frequency));
                    __filtercoeff_02_resamp_counter--;
            
                    if (__filtercoeff_02_resamp_counter <= 0) {
                        __filtercoeff_02_resamp_counter = __filtercoeff_02_activeResamp;
                        this->filtercoeff_02_updateTerms(local_frequency, local_gain, local_q);
                    }
            
                    a0[(Index)i] = this->filtercoeff_02_la0;
                    a1[(Index)i] = this->filtercoeff_02_la1;
                    a2[(Index)i] = this->filtercoeff_02_la2;
                    b1[(Index)i] = this->filtercoeff_02_lb1;
                    b2[(Index)i] = this->filtercoeff_02_lb2;
                }
            
                this->filtercoeff_02_resamp_counter = __filtercoeff_02_resamp_counter;
            }
            
            void biquad_tilde_04_perform(
                const Sample * x,
                const Sample * a0,
                const Sample * a1,
                const Sample * a2,
                const Sample * b1,
                const Sample * b2,
                SampleValue * out1,
                Index n
            ) {
                auto __biquad_tilde_04_y2 = this->biquad_tilde_04_y2;
                auto __biquad_tilde_04_y1 = this->biquad_tilde_04_y1;
                auto __biquad_tilde_04_x2 = this->biquad_tilde_04_x2;
                auto __biquad_tilde_04_x1 = this->biquad_tilde_04_x1;
                Index i;
            
                for (i = 0; i < n; i++) {
                    number tmp = x[(Index)i] * a0[(Index)i] + __biquad_tilde_04_x1 * a1[(Index)i] + __biquad_tilde_04_x2 * a2[(Index)i] - (__biquad_tilde_04_y1 * b1[(Index)i] + __biquad_tilde_04_y2 * b2[(Index)i]);
                    __biquad_tilde_04_x2 = __biquad_tilde_04_x1;
                    __biquad_tilde_04_x1 = x[(Index)i];
                    __biquad_tilde_04_y2 = __biquad_tilde_04_y1;
                    __biquad_tilde_04_y1 = tmp;
                    out1[(Index)i] = tmp;
                }
            
                this->biquad_tilde_04_x1 = __biquad_tilde_04_x1;
                this->biquad_tilde_04_x2 = __biquad_tilde_04_x2;
                this->biquad_tilde_04_y1 = __biquad_tilde_04_y1;
                this->biquad_tilde_04_y2 = __biquad_tilde_04_y2;
            }
            
            void biquad_tilde_03_perform(
                const Sample * x,
                const Sample * a0,
                const Sample * a1,
                const Sample * a2,
                const Sample * b1,
                const Sample * b2,
                SampleValue * out1,
                Index n
            ) {
                auto __biquad_tilde_03_y2 = this->biquad_tilde_03_y2;
                auto __biquad_tilde_03_y1 = this->biquad_tilde_03_y1;
                auto __biquad_tilde_03_x2 = this->biquad_tilde_03_x2;
                auto __biquad_tilde_03_x1 = this->biquad_tilde_03_x1;
                Index i;
            
                for (i = 0; i < n; i++) {
                    number tmp = x[(Index)i] * a0[(Index)i] + __biquad_tilde_03_x1 * a1[(Index)i] + __biquad_tilde_03_x2 * a2[(Index)i] - (__biquad_tilde_03_y1 * b1[(Index)i] + __biquad_tilde_03_y2 * b2[(Index)i]);
                    __biquad_tilde_03_x2 = __biquad_tilde_03_x1;
                    __biquad_tilde_03_x1 = x[(Index)i];
                    __biquad_tilde_03_y2 = __biquad_tilde_03_y1;
                    __biquad_tilde_03_y1 = tmp;
                    out1[(Index)i] = tmp;
                }
            
                this->biquad_tilde_03_x1 = __biquad_tilde_03_x1;
                this->biquad_tilde_03_x2 = __biquad_tilde_03_x2;
                this->biquad_tilde_03_y1 = __biquad_tilde_03_y1;
                this->biquad_tilde_03_y2 = __biquad_tilde_03_y2;
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void numberobj_04_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_04_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_04_value = localvalue;
            }
            
            void numberobj_05_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_05_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_05_value = localvalue;
            }
            
            void numberobj_06_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_06_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_06_value = localvalue;
            }
            
            void biquad_tilde_03_reset() {
                this->biquad_tilde_03_x1 = 0;
                this->biquad_tilde_03_x2 = 0;
                this->biquad_tilde_03_y1 = 0;
                this->biquad_tilde_03_y2 = 0;
            }
            
            void biquad_tilde_03_dspsetup(bool force) {
                if ((bool)(this->biquad_tilde_03_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->biquad_tilde_03_reset();
                this->biquad_tilde_03_setupDone = true;
            }
            
            void biquad_tilde_04_reset() {
                this->biquad_tilde_04_x1 = 0;
                this->biquad_tilde_04_x2 = 0;
                this->biquad_tilde_04_y1 = 0;
                this->biquad_tilde_04_y2 = 0;
            }
            
            void biquad_tilde_04_dspsetup(bool force) {
                if ((bool)(this->biquad_tilde_04_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->biquad_tilde_04_reset();
                this->biquad_tilde_04_setupDone = true;
            }
            
            void numberobj_04_init() {
                this->numberobj_04_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("Post-EQ~/Mid~/number_obj-7"), 1, this->_currentTime);
            }
            
            void numberobj_04_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_04_value;
            }
            
            void numberobj_04_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_04_value_set(preset["value"]);
            }
            
            array<number, 5> filtercoeff_02_localop_next(number frequency, number q, number gain, number type) {
                number omega = frequency * this->filtercoeff_02_localop_twopi_over_sr;
                this->filtercoeff_02_localop_cs = rnbo_cos(omega);
                this->filtercoeff_02_localop_sn = rnbo_sin(omega);
                this->filtercoeff_02_localop_one_over_gain = (gain >= 0 ? (number)1 / gain : 0.0);
                this->filtercoeff_02_localop_one_over_q = (number)1 / q;
                this->filtercoeff_02_localop_alpha = this->filtercoeff_02_localop_sn * 0.5 * this->filtercoeff_02_localop_one_over_q;
            
                switch ((int)type) {
                case 5:
                    {
                    this->filtercoeff_02_localop_A = this->safesqrt(gain);
            
                    this->filtercoeff_02_localop_beta = this->safesqrt(
                        (this->filtercoeff_02_localop_A * this->filtercoeff_02_localop_A + 1.) * this->filtercoeff_02_localop_one_over_q - (this->filtercoeff_02_localop_A - 1.) * (this->filtercoeff_02_localop_A - 1.)
                    );
            
                    this->filtercoeff_02_localop_b0 = (number)1 / (this->filtercoeff_02_localop_A + 1. + (this->filtercoeff_02_localop_A - 1.) * this->filtercoeff_02_localop_cs + this->filtercoeff_02_localop_beta * this->filtercoeff_02_localop_sn);
                    break;
                    }
                case 6:
                    {
                    this->filtercoeff_02_localop_A = this->safesqrt(gain);
            
                    this->filtercoeff_02_localop_beta = this->safesqrt(
                        (this->filtercoeff_02_localop_A * this->filtercoeff_02_localop_A + 1.) * this->filtercoeff_02_localop_one_over_q - (this->filtercoeff_02_localop_A - 1.) * (this->filtercoeff_02_localop_A - 1.)
                    );
            
                    this->filtercoeff_02_localop_b0 = (number)1 / (this->filtercoeff_02_localop_A + 1. - (this->filtercoeff_02_localop_A - 1.) * this->filtercoeff_02_localop_cs + this->filtercoeff_02_localop_beta * this->filtercoeff_02_localop_sn);
                    break;
                    }
                case 4:
                    {
                    this->filtercoeff_02_localop_A = this->safesqrt(gain);
                    this->filtercoeff_02_localop_one_over_a = (this->filtercoeff_02_localop_A == 0 ? 0 : (number)1 / this->filtercoeff_02_localop_A);
                    this->filtercoeff_02_localop_b0 = (number)1 / (1. + this->filtercoeff_02_localop_alpha * this->filtercoeff_02_localop_one_over_a);
                    break;
                    }
                case 9:
                case 10:
                case 11:
                case 13:
                case 14:
                    {
                    this->filtercoeff_02_localop_b0 = (number)1 / (1. + this->filtercoeff_02_localop_alpha);
                    this->filtercoeff_02_localop_b0g = (number)1 / (this->filtercoeff_02_localop_one_over_gain + this->filtercoeff_02_localop_alpha * this->filtercoeff_02_localop_one_over_gain);
                    break;
                    }
                default:
                    {
                    this->filtercoeff_02_localop_b0 = (number)1 / (1. + this->filtercoeff_02_localop_alpha);
                    break;
                    }
                }
            
                switch ((int)type) {
                case 0:
                    {
                    this->filtercoeff_02_localop_la0 = this->filtercoeff_02_localop_la2 = (1. - this->filtercoeff_02_localop_cs) * 0.5 * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_la1 = (1. - this->filtercoeff_02_localop_cs) * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_lb1 = -2. * this->filtercoeff_02_localop_cs * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_lb2 = (1. - this->filtercoeff_02_localop_alpha) * this->filtercoeff_02_localop_b0;
                    break;
                    }
                case 1:
                    {
                    this->filtercoeff_02_localop_la0 = this->filtercoeff_02_localop_la2 = (1. + this->filtercoeff_02_localop_cs) * 0.5 * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_la1 = -(1. + this->filtercoeff_02_localop_cs) * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_lb1 = -2. * this->filtercoeff_02_localop_cs * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_lb2 = (1. - this->filtercoeff_02_localop_alpha) * this->filtercoeff_02_localop_b0;
                    break;
                    }
                case 2:
                    {
                    this->filtercoeff_02_localop_la0 = this->filtercoeff_02_localop_alpha * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_la1 = 0.;
                    this->filtercoeff_02_localop_la2 = -this->filtercoeff_02_localop_alpha * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_lb1 = -2. * this->filtercoeff_02_localop_cs * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_lb2 = (1. - this->filtercoeff_02_localop_alpha) * this->filtercoeff_02_localop_b0;
                    break;
                    }
                case 7:
                    {
                    this->filtercoeff_02_localop_la0 = this->filtercoeff_02_localop_alpha * q * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_la1 = 0.;
                    this->filtercoeff_02_localop_la2 = -this->filtercoeff_02_localop_alpha * q * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_lb1 = -2. * this->filtercoeff_02_localop_cs * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_lb2 = (1. - this->filtercoeff_02_localop_alpha) * this->filtercoeff_02_localop_b0;
                    break;
                    }
                case 3:
                    {
                    this->filtercoeff_02_localop_la1 = this->filtercoeff_02_localop_lb1 = -2. * this->filtercoeff_02_localop_cs * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_lb2 = (1. - this->filtercoeff_02_localop_alpha) * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_la0 = this->filtercoeff_02_localop_la2 = this->filtercoeff_02_localop_b0;
                    break;
                    }
                case 8:
                    {
                    this->filtercoeff_02_localop_la1 = this->filtercoeff_02_localop_lb1 = -2. * this->filtercoeff_02_localop_cs * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_lb2 = this->filtercoeff_02_localop_la0 = (1. - this->filtercoeff_02_localop_alpha) * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_la2 = 1.0;
                    break;
                    }
                case 4:
                    {
                    this->filtercoeff_02_localop_la0 = (1. + this->filtercoeff_02_localop_alpha * this->filtercoeff_02_localop_A) * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_la1 = this->filtercoeff_02_localop_lb1 = -2. * this->filtercoeff_02_localop_cs * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_la2 = (1. - this->filtercoeff_02_localop_alpha * this->filtercoeff_02_localop_A) * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_lb2 = (1. - this->filtercoeff_02_localop_alpha * this->filtercoeff_02_localop_one_over_a) * this->filtercoeff_02_localop_b0;
                    break;
                    }
                case 5:
                    {
                    this->filtercoeff_02_localop_la0 = this->filtercoeff_02_localop_A * (this->filtercoeff_02_localop_A + 1. - (this->filtercoeff_02_localop_A - 1.) * this->filtercoeff_02_localop_cs + this->filtercoeff_02_localop_beta * this->filtercoeff_02_localop_sn) * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_la1 = 2. * this->filtercoeff_02_localop_A * (this->filtercoeff_02_localop_A - 1 - (this->filtercoeff_02_localop_A + 1) * this->filtercoeff_02_localop_cs) * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_la2 = this->filtercoeff_02_localop_A * (this->filtercoeff_02_localop_A + 1. - (this->filtercoeff_02_localop_A - 1.) * this->filtercoeff_02_localop_cs - this->filtercoeff_02_localop_beta * this->filtercoeff_02_localop_sn) * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_lb1 = -2. * (this->filtercoeff_02_localop_A - 1. + (this->filtercoeff_02_localop_A + 1.) * this->filtercoeff_02_localop_cs) * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_lb2 = (this->filtercoeff_02_localop_A + 1. + (this->filtercoeff_02_localop_A - 1.) * this->filtercoeff_02_localop_cs - this->filtercoeff_02_localop_beta * this->filtercoeff_02_localop_sn) * this->filtercoeff_02_localop_b0;
                    break;
                    }
                case 6:
                    {
                    this->filtercoeff_02_localop_la0 = this->filtercoeff_02_localop_A * (this->filtercoeff_02_localop_A + 1. + (this->filtercoeff_02_localop_A - 1.) * this->filtercoeff_02_localop_cs + this->filtercoeff_02_localop_beta * this->filtercoeff_02_localop_sn) * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_la1 = -2. * this->filtercoeff_02_localop_A * (this->filtercoeff_02_localop_A - 1. + (this->filtercoeff_02_localop_A + 1.) * this->filtercoeff_02_localop_cs) * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_la2 = this->filtercoeff_02_localop_A * (this->filtercoeff_02_localop_A + 1. + (this->filtercoeff_02_localop_A - 1.) * this->filtercoeff_02_localop_cs - this->filtercoeff_02_localop_beta * this->filtercoeff_02_localop_sn) * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_lb1 = 2. * (this->filtercoeff_02_localop_A - 1. - (this->filtercoeff_02_localop_A + 1.) * this->filtercoeff_02_localop_cs) * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_lb2 = (this->filtercoeff_02_localop_A + 1. - (this->filtercoeff_02_localop_A - 1.) * this->filtercoeff_02_localop_cs - this->filtercoeff_02_localop_beta * this->filtercoeff_02_localop_sn) * this->filtercoeff_02_localop_b0;
                    break;
                    }
                case 9:
                    {
                    this->filtercoeff_02_localop_b0g = (number)1 / (this->filtercoeff_02_localop_one_over_gain + this->filtercoeff_02_localop_alpha * this->filtercoeff_02_localop_one_over_gain);
                    this->filtercoeff_02_localop_la0 = this->filtercoeff_02_localop_la2 = (1. - this->filtercoeff_02_localop_cs) * 0.5 * this->filtercoeff_02_localop_b0g;
                    this->filtercoeff_02_localop_la1 = (1. - this->filtercoeff_02_localop_cs) * this->filtercoeff_02_localop_b0g;
                    this->filtercoeff_02_localop_lb1 = -2. * this->filtercoeff_02_localop_cs * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_lb2 = (1. - this->filtercoeff_02_localop_alpha) * this->filtercoeff_02_localop_b0;
                    break;
                    }
                case 10:
                    {
                    this->filtercoeff_02_localop_b0g = (number)1 / (this->filtercoeff_02_localop_one_over_gain + this->filtercoeff_02_localop_alpha * this->filtercoeff_02_localop_one_over_gain);
                    this->filtercoeff_02_localop_la0 = this->filtercoeff_02_localop_la2 = (1. + this->filtercoeff_02_localop_cs) * 0.5 * this->filtercoeff_02_localop_b0g;
                    this->filtercoeff_02_localop_la1 = -(1. + this->filtercoeff_02_localop_cs) * this->filtercoeff_02_localop_b0g;
                    this->filtercoeff_02_localop_lb1 = -2. * this->filtercoeff_02_localop_cs * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_lb2 = (1. - this->filtercoeff_02_localop_alpha) * this->filtercoeff_02_localop_b0;
                    break;
                    }
                case 11:
                    {
                    this->filtercoeff_02_localop_la0 = this->filtercoeff_02_localop_alpha * gain * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_la1 = 0.;
                    this->filtercoeff_02_localop_la2 = -this->filtercoeff_02_localop_alpha * gain * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_lb1 = -2. * this->filtercoeff_02_localop_cs * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_lb2 = (1. - this->filtercoeff_02_localop_alpha) * this->filtercoeff_02_localop_b0;
                    break;
                    }
                case 13:
                    {
                    this->filtercoeff_02_localop_la0 = this->filtercoeff_02_localop_alpha * gain * q * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_la1 = 0.;
                    this->filtercoeff_02_localop_la2 = -this->filtercoeff_02_localop_alpha * gain * q * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_lb1 = -2. * this->filtercoeff_02_localop_cs * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_lb2 = (1. - this->filtercoeff_02_localop_alpha) * this->filtercoeff_02_localop_b0;
                    break;
                    }
                case 12:
                    {
                    this->filtercoeff_02_localop_b0g = (number)1 / (this->filtercoeff_02_localop_one_over_gain + this->filtercoeff_02_localop_alpha * this->filtercoeff_02_localop_one_over_gain);
                    this->filtercoeff_02_localop_la1 = this->filtercoeff_02_localop_lb1 = -2. * this->filtercoeff_02_localop_cs;
                    this->filtercoeff_02_localop_lb2 = (1. - this->filtercoeff_02_localop_alpha) * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_la1 *= this->filtercoeff_02_localop_b0g;
                    this->filtercoeff_02_localop_lb1 *= this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_la0 = this->filtercoeff_02_localop_b0g;
                    this->filtercoeff_02_localop_la2 = this->filtercoeff_02_localop_b0g;
                    break;
                    }
                case 14:
                    {
                    this->filtercoeff_02_localop_b0g = (number)1 / (this->filtercoeff_02_localop_one_over_gain + this->filtercoeff_02_localop_alpha * this->filtercoeff_02_localop_one_over_gain);
                    this->filtercoeff_02_localop_la0 = (1. - this->filtercoeff_02_localop_alpha) * this->filtercoeff_02_localop_b0g;
                    this->filtercoeff_02_localop_la1 = -2. * this->filtercoeff_02_localop_cs * this->filtercoeff_02_localop_b0g;
                    this->filtercoeff_02_localop_la2 = gain;
                    this->filtercoeff_02_localop_lb1 = -2. * this->filtercoeff_02_localop_cs * this->filtercoeff_02_localop_b0;
                    this->filtercoeff_02_localop_lb2 = (1. - this->filtercoeff_02_localop_alpha) * this->filtercoeff_02_localop_b0;
                    break;
                    }
                case 15:
                    {
                    this->filtercoeff_02_localop_la0 = 1;
                    this->filtercoeff_02_localop_la1 = 0;
                    this->filtercoeff_02_localop_la2 = 0;
                    this->filtercoeff_02_localop_lb1 = 0;
                    this->filtercoeff_02_localop_lb2 = 0;
                    }
                default:
                    {
                    break;
                    }
                }
            
                return {
                    this->filtercoeff_02_localop_la0,
                    this->filtercoeff_02_localop_la1,
                    this->filtercoeff_02_localop_la2,
                    this->filtercoeff_02_localop_lb1,
                    this->filtercoeff_02_localop_lb2
                };
            }
            
            void filtercoeff_02_localop_dspsetup() {
                this->filtercoeff_02_localop_twopi_over_sr = (number)6.283185307179586 / this->sr;
            }
            
            void filtercoeff_02_localop_reset() {
                this->filtercoeff_02_localop_twopi_over_sr = 0;
                this->filtercoeff_02_localop_cs = 0;
                this->filtercoeff_02_localop_sn = 0;
                this->filtercoeff_02_localop_one_over_gain = 0;
                this->filtercoeff_02_localop_one_over_q = 0;
                this->filtercoeff_02_localop_alpha = 0;
                this->filtercoeff_02_localop_beta = 0;
                this->filtercoeff_02_localop_b0 = 0;
                this->filtercoeff_02_localop_b0g = 0;
                this->filtercoeff_02_localop_A = 0;
                this->filtercoeff_02_localop_one_over_a = 0;
                this->filtercoeff_02_localop_la0 = 0;
                this->filtercoeff_02_localop_la1 = 0;
                this->filtercoeff_02_localop_la2 = 0;
                this->filtercoeff_02_localop_lb1 = 0;
                this->filtercoeff_02_localop_lb2 = 0;
            }
            
            void filtercoeff_02_updateTerms(number local_frequency, number local_gain, number local_q) {
                if ((bool)(this->filtercoeff_02_force_update) || local_frequency != this->filtercoeff_02_last_frequency || local_q != this->filtercoeff_02_last_q || local_gain != this->filtercoeff_02_last_gain || this->filtercoeff_02_type != this->filtercoeff_02_last_type) {
                    array<number, 5> tmp = this->filtercoeff_02_localop_next(local_frequency, local_q, local_gain, this->filtercoeff_02_type);
                    this->filtercoeff_02_la0 = tmp[0];
                    this->filtercoeff_02_la1 = tmp[1];
                    this->filtercoeff_02_la2 = tmp[2];
                    this->filtercoeff_02_lb1 = tmp[3];
                    this->filtercoeff_02_lb2 = tmp[4];
                    this->filtercoeff_02_last_frequency = local_frequency;
                    this->filtercoeff_02_last_q = local_q;
                    this->filtercoeff_02_last_gain = local_gain;
                    this->filtercoeff_02_last_type = this->filtercoeff_02_type;
                    this->filtercoeff_02_force_update = false;
                }
            }
            
            void filtercoeff_02_dspsetup(bool force) {
                if ((bool)(this->filtercoeff_02_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                {
                    this->filtercoeff_02_activeResamp = this->vectorsize();
                }
            
                this->filtercoeff_02_resamp_counter = 0;
                this->filtercoeff_02_la0 = 0.;
                this->filtercoeff_02_la1 = 0.;
                this->filtercoeff_02_la2 = 0.;
                this->filtercoeff_02_lb1 = 0.;
                this->filtercoeff_02_lb2 = 0.;
                this->filtercoeff_02_last_frequency = -1.;
                this->filtercoeff_02_last_q = -1.;
                this->filtercoeff_02_last_gain = -1.;
                this->filtercoeff_02_last_type = this->filtercoeff_02_type;
                this->filtercoeff_02_force_update = true;
                this->filtercoeff_02_setupDone = true;
                this->filtercoeff_02_localop_dspsetup();
            }
            
            void numberobj_05_init() {
                this->numberobj_05_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("Post-EQ~/Mid~/number_obj-4"), 1, this->_currentTime);
            }
            
            void numberobj_05_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_05_value;
            }
            
            void numberobj_05_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_05_value_set(preset["value"]);
            }
            
            void numberobj_06_init() {
                this->numberobj_06_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("Post-EQ~/Mid~/number_obj-12"), 1, this->_currentTime);
            }
            
            void numberobj_06_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_06_value;
            }
            
            void numberobj_06_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_06_value_set(preset["value"]);
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                biquad_tilde_03_x = 0;
                biquad_tilde_03_a0 = 0;
                biquad_tilde_03_a1 = 0;
                biquad_tilde_03_a2 = 0;
                biquad_tilde_03_b1 = 0;
                biquad_tilde_03_b2 = 0;
                biquad_tilde_04_x = 0;
                biquad_tilde_04_a0 = 0;
                biquad_tilde_04_a1 = 0;
                biquad_tilde_04_a2 = 0;
                biquad_tilde_04_b1 = 0;
                biquad_tilde_04_b2 = 0;
                numberobj_04_value = 0;
                numberobj_04_value_setter(numberobj_04_value);
                linetilde_04_time = 10;
                linetilde_04_keepramp = 0;
                filtercoeff_02_frequency = 1000;
                filtercoeff_02_gain = 1;
                filtercoeff_02_q = 1;
                filtercoeff_02_type = 4;
                numberobj_05_value = 0;
                numberobj_05_value_setter(numberobj_05_value);
                expr_02_in1 = 0;
                expr_02_out1 = 0;
                linetilde_05_time = 10;
                linetilde_05_keepramp = 0;
                numberobj_06_value = 0;
                numberobj_06_value_setter(numberobj_06_value);
                linetilde_06_time = 10;
                linetilde_06_keepramp = 0;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                signals[1] = nullptr;
                signals[2] = nullptr;
                signals[3] = nullptr;
                signals[4] = nullptr;
                signals[5] = nullptr;
                signals[6] = nullptr;
                signals[7] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                biquad_tilde_03_x1 = 0;
                biquad_tilde_03_x2 = 0;
                biquad_tilde_03_y1 = 0;
                biquad_tilde_03_y2 = 0;
                biquad_tilde_03_setupDone = false;
                biquad_tilde_04_x1 = 0;
                biquad_tilde_04_x2 = 0;
                biquad_tilde_04_y1 = 0;
                biquad_tilde_04_y2 = 0;
                biquad_tilde_04_setupDone = false;
                numberobj_04_currentFormat = 6;
                numberobj_04_lastValue = 0;
                linetilde_04_currentValue = 1000;
                filtercoeff_02_K_EPSILON = 1e-9;
                filtercoeff_02_setupDone = false;
                numberobj_05_currentFormat = 6;
                numberobj_05_lastValue = 0;
                linetilde_05_currentValue = 1;
                numberobj_06_currentFormat = 6;
                numberobj_06_lastValue = 0;
                linetilde_06_currentValue = 0.7;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number biquad_tilde_03_x;
                number biquad_tilde_03_a0;
                number biquad_tilde_03_a1;
                number biquad_tilde_03_a2;
                number biquad_tilde_03_b1;
                number biquad_tilde_03_b2;
                number biquad_tilde_04_x;
                number biquad_tilde_04_a0;
                number biquad_tilde_04_a1;
                number biquad_tilde_04_a2;
                number biquad_tilde_04_b1;
                number biquad_tilde_04_b2;
                number numberobj_04_value;
                list linetilde_04_segments;
                number linetilde_04_time;
                number linetilde_04_keepramp;
                number filtercoeff_02_frequency;
                number filtercoeff_02_gain;
                number filtercoeff_02_q;
                Int filtercoeff_02_type;
                number numberobj_05_value;
                number expr_02_in1;
                number expr_02_out1;
                list linetilde_05_segments;
                number linetilde_05_time;
                number linetilde_05_keepramp;
                number numberobj_06_value;
                list linetilde_06_segments;
                number linetilde_06_time;
                number linetilde_06_keepramp;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[8];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                number biquad_tilde_03_x1;
                number biquad_tilde_03_x2;
                number biquad_tilde_03_y1;
                number biquad_tilde_03_y2;
                bool biquad_tilde_03_setupDone;
                number biquad_tilde_04_x1;
                number biquad_tilde_04_x2;
                number biquad_tilde_04_y1;
                number biquad_tilde_04_y2;
                bool biquad_tilde_04_setupDone;
                Int numberobj_04_currentFormat;
                number numberobj_04_lastValue;
                list linetilde_04_activeRamps;
                number linetilde_04_currentValue;
                number filtercoeff_02_resamp_counter;
                number filtercoeff_02_activeResamp;
                number filtercoeff_02_K_EPSILON;
                number filtercoeff_02_la0;
                number filtercoeff_02_la1;
                number filtercoeff_02_la2;
                number filtercoeff_02_lb1;
                number filtercoeff_02_lb2;
                number filtercoeff_02_last_frequency;
                number filtercoeff_02_last_q;
                number filtercoeff_02_last_gain;
                Int filtercoeff_02_last_type;
                bool filtercoeff_02_force_update;
                number filtercoeff_02_localop_twopi_over_sr;
                number filtercoeff_02_localop_cs;
                number filtercoeff_02_localop_sn;
                number filtercoeff_02_localop_one_over_gain;
                number filtercoeff_02_localop_one_over_q;
                number filtercoeff_02_localop_alpha;
                number filtercoeff_02_localop_beta;
                number filtercoeff_02_localop_b0;
                number filtercoeff_02_localop_b0g;
                number filtercoeff_02_localop_A;
                number filtercoeff_02_localop_one_over_a;
                number filtercoeff_02_localop_la0;
                number filtercoeff_02_localop_la1;
                number filtercoeff_02_localop_la2;
                number filtercoeff_02_localop_lb1;
                number filtercoeff_02_localop_lb2;
                bool filtercoeff_02_setupDone;
                Int numberobj_05_currentFormat;
                number numberobj_05_lastValue;
                list linetilde_05_activeRamps;
                number linetilde_05_currentValue;
                Int numberobj_06_currentFormat;
                number numberobj_06_lastValue;
                list linetilde_06_activeRamps;
                number linetilde_06_currentValue;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_793 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_804;
            friend class drone;
            
            public:
            
            RNBOSubpatcher_793()
            {
            }
            
            ~RNBOSubpatcher_793()
            {
            }
            
            virtual RNBOSubpatcher_804* getPatcher() const {
                return static_cast<RNBOSubpatcher_804 *>(_parentPatcher);
            }
            
            drone* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
                getEngine()->flushClockEvents(this, -281953904, false);
                getEngine()->flushClockEvents(this, -1841075377, false);
                getEngine()->flushClockEvents(this, 894770446, false);
            }
            
            SampleIndex currentsampletime() {
                return this->audioProcessSampleCount + this->sampleOffsetIntoNextAudioBuffer;
            }
            
            number mstosamps(MillisecondTime ms) {
                return ms * this->sr * 0.001;
            }
            
            inline number safesqrt(number num) {
                return (num > 0.0 ? rnbo_sqrt(num) : 0.0);
            }
            
            Index vectorsize() const {
                return this->vs;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
                const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
                this->linetilde_07_perform(this->signals[0], n);
                this->linetilde_08_perform(this->signals[1], n);
                this->linetilde_09_perform(this->signals[2], n);
            
                this->filtercoeff_03_perform(
                    this->signals[0],
                    this->signals[1],
                    this->signals[2],
                    this->signals[3],
                    this->signals[4],
                    this->signals[5],
                    this->signals[6],
                    this->signals[7],
                    n
                );
            
                this->biquad_tilde_06_perform(
                    in2,
                    this->signals[3],
                    this->signals[4],
                    this->signals[5],
                    this->signals[6],
                    this->signals[7],
                    out2,
                    n
                );
            
                this->biquad_tilde_05_perform(
                    in1,
                    this->signals[3],
                    this->signals[4],
                    this->signals[5],
                    this->signals[6],
                    this->signals[7],
                    out1,
                    n
                );
            
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 8; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->filtercoeff_03_dspsetup(forceDSPSetup);
                this->biquad_tilde_06_dspsetup(forceDSPSetup);
                this->biquad_tilde_05_dspsetup(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
                RNBO_UNUSED(value);
                RNBO_UNUSED(hasValue);
                this->updateTime(time);
            
                switch (index) {
                case -281953904:
                    {
                    this->linetilde_07_target_bang();
                    break;
                    }
                case -1841075377:
                    {
                    this->linetilde_08_target_bang();
                    break;
                    }
                case 894770446:
                    {
                    this->linetilde_09_target_bang();
                    break;
                    }
                }
            }
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("valin"):
                    {
                    if (TAG("Post-EQ~/Treble~/number_obj-7") == objectId)
                        this->numberobj_07_valin_set(payload);
            
                    if (TAG("Post-EQ~/Treble~/number_obj-4") == objectId)
                        this->numberobj_08_valin_set(payload);
            
                    if (TAG("Post-EQ~/Treble~/number_obj-12") == objectId)
                        this->numberobj_09_valin_set(payload);
            
                    break;
                    }
                case TAG("format"):
                    {
                    if (TAG("Post-EQ~/Treble~/number_obj-7") == objectId)
                        this->numberobj_07_format_set(payload);
            
                    if (TAG("Post-EQ~/Treble~/number_obj-4") == objectId)
                        this->numberobj_08_format_set(payload);
            
                    if (TAG("Post-EQ~/Treble~/number_obj-12") == objectId)
                        this->numberobj_09_format_set(payload);
            
                    break;
                    }
                }
            }
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
                case TAG("valout"):
                    {
                    return "valout";
                    }
                case TAG("Post-EQ~/Treble~/number_obj-7"):
                    {
                    return "Post-EQ~/Treble~/number_obj-7";
                    }
                case TAG("setup"):
                    {
                    return "setup";
                    }
                case TAG("Post-EQ~/Treble~/number_obj-4"):
                    {
                    return "Post-EQ~/Treble~/number_obj-4";
                    }
                case TAG("Post-EQ~/Treble~/number_obj-12"):
                    {
                    return "Post-EQ~/Treble~/number_obj-12";
                    }
                case TAG("valin"):
                    {
                    return "valin";
                    }
                case TAG("format"):
                    {
                    return "format";
                    }
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            void numberobj_07_valin_set(number v) {
                this->numberobj_07_value_set(v);
            }
            
            void numberobj_07_format_set(number v) {
                this->numberobj_07_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void eventinlet_03_out1_bang_bang() {}
            
            void eventinlet_03_out1_number_set(number v) {
                {
                    list converted = {v};
                    this->unjoin_03_input_set(converted);
                }
            }
            
            void numberobj_08_valin_set(number v) {
                this->numberobj_08_value_set(v);
            }
            
            void numberobj_08_format_set(number v) {
                this->numberobj_08_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_09_valin_set(number v) {
                this->numberobj_09_value_set(v);
            }
            
            void numberobj_09_format_set(number v) {
                this->numberobj_09_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void linetilde_07_target_bang() {}
            
            void linetilde_08_target_bang() {}
            
            void linetilde_09_target_bang() {}
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 2;
            }
            
            Index getNumOutputChannels() const {
                return 2;
            }
            
            void initializeObjects() {
                this->numberobj_07_init();
                this->numberobj_08_init();
                this->numberobj_09_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {}
            
            void unjoin_03_extra_set(const list& ) {}
            
            void linetilde_09_time_set(number v) {
                this->linetilde_09_time = v;
            }
            
            void linetilde_09_segments_set(const list& v) {
                this->linetilde_09_segments = jsCreateListCopy(v);
            
                if ((bool)(v->length)) {
                    if (v->length == 1 && this->linetilde_09_time == 0) {
                        this->linetilde_09_activeRamps->length = 0;
                        this->linetilde_09_currentValue = v[0];
                    } else {
                        auto currentTime = this->currentsampletime();
                        number lastRampValue = this->linetilde_09_currentValue;
                        number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
            
                        for (Index i = 0; i < this->linetilde_09_activeRamps->length; i += 3) {
                            rampEnd = this->linetilde_09_activeRamps[(Index)(i + 2)];
            
                            if (rampEnd > currentTime) {
                                this->linetilde_09_activeRamps[(Index)(i + 2)] = currentTime;
                                number diff = rampEnd - currentTime;
                                number valueDiff = diff * this->linetilde_09_activeRamps[(Index)(i + 1)];
                                lastRampValue = this->linetilde_09_activeRamps[(Index)i] - valueDiff;
                                this->linetilde_09_activeRamps[(Index)i] = lastRampValue;
                                this->linetilde_09_activeRamps->length = i + 3;
                                rampEnd = currentTime;
                            } else {
                                lastRampValue = this->linetilde_09_activeRamps[(Index)i];
                            }
                        }
            
                        if (rampEnd < currentTime) {
                            this->linetilde_09_activeRamps->push(lastRampValue);
                            this->linetilde_09_activeRamps->push(0);
                            this->linetilde_09_activeRamps->push(currentTime);
                        }
            
                        number lastRampEnd = currentTime;
            
                        for (Index i = 0; i < v->length; i += 2) {
                            number destinationValue = v[(Index)i];
                            number inc = 0;
                            number rampTimeInSamples;
            
                            if (v->length > i + 1) {
                                rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
            
                                if ((bool)(this->linetilde_09_keepramp)) {
                                    this->linetilde_09_time_set(v[(Index)(i + 1)]);
                                }
                            } else {
                                rampTimeInSamples = this->mstosamps(this->linetilde_09_time);
                            }
            
                            if (rampTimeInSamples <= 0) {
                                rampTimeInSamples = 1;
                            }
            
                            inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                            lastRampEnd += rampTimeInSamples;
                            this->linetilde_09_activeRamps->push(destinationValue);
                            this->linetilde_09_activeRamps->push(inc);
                            this->linetilde_09_activeRamps->push(lastRampEnd);
                            lastRampValue = destinationValue;
                        }
                    }
                }
            }
            
            void numberobj_09_output_set(number v) {
                {
                    list converted = {v};
                    this->linetilde_09_segments_set(converted);
                }
            }
            
            void numberobj_09_value_set(number v) {
                this->numberobj_09_value_setter(v);
                v = this->numberobj_09_value;
                number localvalue = v;
            
                if (this->numberobj_09_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Post-EQ~/Treble~/number_obj-12"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_09_output_set(localvalue);
            }
            
            void unjoin_03_out3_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_09_value_set(converted);
                }
            }
            
            void linetilde_08_time_set(number v) {
                this->linetilde_08_time = v;
            }
            
            void linetilde_08_segments_set(const list& v) {
                this->linetilde_08_segments = jsCreateListCopy(v);
            
                if ((bool)(v->length)) {
                    if (v->length == 1 && this->linetilde_08_time == 0) {
                        this->linetilde_08_activeRamps->length = 0;
                        this->linetilde_08_currentValue = v[0];
                    } else {
                        auto currentTime = this->currentsampletime();
                        number lastRampValue = this->linetilde_08_currentValue;
                        number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
            
                        for (Index i = 0; i < this->linetilde_08_activeRamps->length; i += 3) {
                            rampEnd = this->linetilde_08_activeRamps[(Index)(i + 2)];
            
                            if (rampEnd > currentTime) {
                                this->linetilde_08_activeRamps[(Index)(i + 2)] = currentTime;
                                number diff = rampEnd - currentTime;
                                number valueDiff = diff * this->linetilde_08_activeRamps[(Index)(i + 1)];
                                lastRampValue = this->linetilde_08_activeRamps[(Index)i] - valueDiff;
                                this->linetilde_08_activeRamps[(Index)i] = lastRampValue;
                                this->linetilde_08_activeRamps->length = i + 3;
                                rampEnd = currentTime;
                            } else {
                                lastRampValue = this->linetilde_08_activeRamps[(Index)i];
                            }
                        }
            
                        if (rampEnd < currentTime) {
                            this->linetilde_08_activeRamps->push(lastRampValue);
                            this->linetilde_08_activeRamps->push(0);
                            this->linetilde_08_activeRamps->push(currentTime);
                        }
            
                        number lastRampEnd = currentTime;
            
                        for (Index i = 0; i < v->length; i += 2) {
                            number destinationValue = v[(Index)i];
                            number inc = 0;
                            number rampTimeInSamples;
            
                            if (v->length > i + 1) {
                                rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
            
                                if ((bool)(this->linetilde_08_keepramp)) {
                                    this->linetilde_08_time_set(v[(Index)(i + 1)]);
                                }
                            } else {
                                rampTimeInSamples = this->mstosamps(this->linetilde_08_time);
                            }
            
                            if (rampTimeInSamples <= 0) {
                                rampTimeInSamples = 1;
                            }
            
                            inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                            lastRampEnd += rampTimeInSamples;
                            this->linetilde_08_activeRamps->push(destinationValue);
                            this->linetilde_08_activeRamps->push(inc);
                            this->linetilde_08_activeRamps->push(lastRampEnd);
                            lastRampValue = destinationValue;
                        }
                    }
                }
            }
            
            void expr_03_out1_set(number v) {
                this->expr_03_out1 = v;
            
                {
                    list converted = {this->expr_03_out1};
                    this->linetilde_08_segments_set(converted);
                }
            }
            
            void expr_03_in1_set(number in1) {
                this->expr_03_in1 = in1;
                this->expr_03_out1_set(rnbo_pow(10, this->expr_03_in1 * 0.05));//#map:Post-EQ~/Treble~/dbtoa_obj-9:1
            }
            
            void numberobj_08_output_set(number v) {
                this->expr_03_in1_set(v);
            }
            
            void numberobj_08_value_set(number v) {
                this->numberobj_08_value_setter(v);
                v = this->numberobj_08_value;
                number localvalue = v;
            
                if (this->numberobj_08_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Post-EQ~/Treble~/number_obj-4"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_08_output_set(localvalue);
            }
            
            void unjoin_03_out2_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_08_value_set(converted);
                }
            }
            
            void linetilde_07_time_set(number v) {
                this->linetilde_07_time = v;
            }
            
            void linetilde_07_segments_set(const list& v) {
                this->linetilde_07_segments = jsCreateListCopy(v);
            
                if ((bool)(v->length)) {
                    if (v->length == 1 && this->linetilde_07_time == 0) {
                        this->linetilde_07_activeRamps->length = 0;
                        this->linetilde_07_currentValue = v[0];
                    } else {
                        auto currentTime = this->currentsampletime();
                        number lastRampValue = this->linetilde_07_currentValue;
                        number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
            
                        for (Index i = 0; i < this->linetilde_07_activeRamps->length; i += 3) {
                            rampEnd = this->linetilde_07_activeRamps[(Index)(i + 2)];
            
                            if (rampEnd > currentTime) {
                                this->linetilde_07_activeRamps[(Index)(i + 2)] = currentTime;
                                number diff = rampEnd - currentTime;
                                number valueDiff = diff * this->linetilde_07_activeRamps[(Index)(i + 1)];
                                lastRampValue = this->linetilde_07_activeRamps[(Index)i] - valueDiff;
                                this->linetilde_07_activeRamps[(Index)i] = lastRampValue;
                                this->linetilde_07_activeRamps->length = i + 3;
                                rampEnd = currentTime;
                            } else {
                                lastRampValue = this->linetilde_07_activeRamps[(Index)i];
                            }
                        }
            
                        if (rampEnd < currentTime) {
                            this->linetilde_07_activeRamps->push(lastRampValue);
                            this->linetilde_07_activeRamps->push(0);
                            this->linetilde_07_activeRamps->push(currentTime);
                        }
            
                        number lastRampEnd = currentTime;
            
                        for (Index i = 0; i < v->length; i += 2) {
                            number destinationValue = v[(Index)i];
                            number inc = 0;
                            number rampTimeInSamples;
            
                            if (v->length > i + 1) {
                                rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
            
                                if ((bool)(this->linetilde_07_keepramp)) {
                                    this->linetilde_07_time_set(v[(Index)(i + 1)]);
                                }
                            } else {
                                rampTimeInSamples = this->mstosamps(this->linetilde_07_time);
                            }
            
                            if (rampTimeInSamples <= 0) {
                                rampTimeInSamples = 1;
                            }
            
                            inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                            lastRampEnd += rampTimeInSamples;
                            this->linetilde_07_activeRamps->push(destinationValue);
                            this->linetilde_07_activeRamps->push(inc);
                            this->linetilde_07_activeRamps->push(lastRampEnd);
                            lastRampValue = destinationValue;
                        }
                    }
                }
            }
            
            void numberobj_07_output_set(number v) {
                {
                    list converted = {v};
                    this->linetilde_07_segments_set(converted);
                }
            }
            
            void numberobj_07_value_set(number v) {
                this->numberobj_07_value_setter(v);
                v = this->numberobj_07_value;
                number localvalue = v;
            
                if (this->numberobj_07_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Post-EQ~/Treble~/number_obj-7"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_07_output_set(localvalue);
            }
            
            void unjoin_03_out1_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_07_value_set(converted);
                }
            }
            
            void unjoin_03_input_set(const list& v) {
                if (v->length > 3) {
                    list tmp = {};
            
                    for (number i = 3; i < v->length; i++) {
                        tmp->push(v[(Index)i]);
                    }
            
                    this->unjoin_03_extra_set(tmp);
                }
            
                if (v->length > 2) {
                    list tmp = {};
            
                    for (Index i = 2; i < 3 && i < v->length; i++) {
                        tmp->push(v[(Index)i]);
                    }
            
                    this->unjoin_03_out3_set(tmp);
                }
            
                if (v->length > 1) {
                    list tmp = {};
            
                    for (Index i = 1; i < 2 && i < v->length; i++) {
                        tmp->push(v[(Index)i]);
                    }
            
                    this->unjoin_03_out2_set(tmp);
                }
            
                if (v->length > 0) {
                    list tmp = {};
            
                    for (Index i = 0; i < 1 && i < v->length; i++) {
                        tmp->push(v[(Index)i]);
                    }
            
                    this->unjoin_03_out1_set(tmp);
                }
            }
            
            void eventinlet_03_out1_list_set(const list& v) {
                this->unjoin_03_input_set(v);
            }
            
            void linetilde_07_perform(SampleValue * out, Index n) {
                auto __linetilde_07_time = this->linetilde_07_time;
                auto __linetilde_07_keepramp = this->linetilde_07_keepramp;
                auto __linetilde_07_currentValue = this->linetilde_07_currentValue;
                Index i = 0;
            
                if ((bool)(this->linetilde_07_activeRamps->length)) {
                    while ((bool)(this->linetilde_07_activeRamps->length) && i < n) {
                        number destinationValue = this->linetilde_07_activeRamps[0];
                        number inc = this->linetilde_07_activeRamps[1];
                        number rampTimeInSamples = this->linetilde_07_activeRamps[2] - this->audioProcessSampleCount - i;
                        number val = __linetilde_07_currentValue;
            
                        while (rampTimeInSamples > 0 && i < n) {
                            out[(Index)i] = val;
                            val += inc;
                            i++;
                            rampTimeInSamples--;
                        }
            
                        if (rampTimeInSamples <= 0) {
                            val = destinationValue;
                            this->linetilde_07_activeRamps->splice(0, 3);
            
                            if ((bool)(!(bool)(this->linetilde_07_activeRamps->length))) {
                                this->getEngine()->scheduleClockEventWithValue(
                                    this,
                                    -281953904,
                                    this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                                    0
                                );;
            
                                if ((bool)(!(bool)(__linetilde_07_keepramp))) {
                                    __linetilde_07_time = 0;
                                }
                            }
                        }
            
                        __linetilde_07_currentValue = val;
                    }
                }
            
                while (i < n) {
                    out[(Index)i] = __linetilde_07_currentValue;
                    i++;
                }
            
                this->linetilde_07_currentValue = __linetilde_07_currentValue;
                this->linetilde_07_time = __linetilde_07_time;
            }
            
            void linetilde_08_perform(SampleValue * out, Index n) {
                auto __linetilde_08_time = this->linetilde_08_time;
                auto __linetilde_08_keepramp = this->linetilde_08_keepramp;
                auto __linetilde_08_currentValue = this->linetilde_08_currentValue;
                Index i = 0;
            
                if ((bool)(this->linetilde_08_activeRamps->length)) {
                    while ((bool)(this->linetilde_08_activeRamps->length) && i < n) {
                        number destinationValue = this->linetilde_08_activeRamps[0];
                        number inc = this->linetilde_08_activeRamps[1];
                        number rampTimeInSamples = this->linetilde_08_activeRamps[2] - this->audioProcessSampleCount - i;
                        number val = __linetilde_08_currentValue;
            
                        while (rampTimeInSamples > 0 && i < n) {
                            out[(Index)i] = val;
                            val += inc;
                            i++;
                            rampTimeInSamples--;
                        }
            
                        if (rampTimeInSamples <= 0) {
                            val = destinationValue;
                            this->linetilde_08_activeRamps->splice(0, 3);
            
                            if ((bool)(!(bool)(this->linetilde_08_activeRamps->length))) {
                                this->getEngine()->scheduleClockEventWithValue(
                                    this,
                                    -1841075377,
                                    this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                                    0
                                );;
            
                                if ((bool)(!(bool)(__linetilde_08_keepramp))) {
                                    __linetilde_08_time = 0;
                                }
                            }
                        }
            
                        __linetilde_08_currentValue = val;
                    }
                }
            
                while (i < n) {
                    out[(Index)i] = __linetilde_08_currentValue;
                    i++;
                }
            
                this->linetilde_08_currentValue = __linetilde_08_currentValue;
                this->linetilde_08_time = __linetilde_08_time;
            }
            
            void linetilde_09_perform(SampleValue * out, Index n) {
                auto __linetilde_09_time = this->linetilde_09_time;
                auto __linetilde_09_keepramp = this->linetilde_09_keepramp;
                auto __linetilde_09_currentValue = this->linetilde_09_currentValue;
                Index i = 0;
            
                if ((bool)(this->linetilde_09_activeRamps->length)) {
                    while ((bool)(this->linetilde_09_activeRamps->length) && i < n) {
                        number destinationValue = this->linetilde_09_activeRamps[0];
                        number inc = this->linetilde_09_activeRamps[1];
                        number rampTimeInSamples = this->linetilde_09_activeRamps[2] - this->audioProcessSampleCount - i;
                        number val = __linetilde_09_currentValue;
            
                        while (rampTimeInSamples > 0 && i < n) {
                            out[(Index)i] = val;
                            val += inc;
                            i++;
                            rampTimeInSamples--;
                        }
            
                        if (rampTimeInSamples <= 0) {
                            val = destinationValue;
                            this->linetilde_09_activeRamps->splice(0, 3);
            
                            if ((bool)(!(bool)(this->linetilde_09_activeRamps->length))) {
                                this->getEngine()->scheduleClockEventWithValue(
                                    this,
                                    894770446,
                                    this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                                    0
                                );;
            
                                if ((bool)(!(bool)(__linetilde_09_keepramp))) {
                                    __linetilde_09_time = 0;
                                }
                            }
                        }
            
                        __linetilde_09_currentValue = val;
                    }
                }
            
                while (i < n) {
                    out[(Index)i] = __linetilde_09_currentValue;
                    i++;
                }
            
                this->linetilde_09_currentValue = __linetilde_09_currentValue;
                this->linetilde_09_time = __linetilde_09_time;
            }
            
            void filtercoeff_03_perform(
                const Sample * frequency,
                const Sample * gain,
                const Sample * q,
                SampleValue * a0,
                SampleValue * a1,
                SampleValue * a2,
                SampleValue * b1,
                SampleValue * b2,
                Index n
            ) {
                auto __filtercoeff_03_activeResamp = this->filtercoeff_03_activeResamp;
                auto __filtercoeff_03_resamp_counter = this->filtercoeff_03_resamp_counter;
                auto __filtercoeff_03_K_EPSILON = this->filtercoeff_03_K_EPSILON;
            
                for (Index i = 0; i < n; i++) {
                    number local_q = q[(Index)i];
                    number local_gain = gain[(Index)i];
            
                    if (local_gain < 0)
                        local_gain = 0;
            
                    number local_frequency = frequency[(Index)i];
            
                    if (local_q < __filtercoeff_03_K_EPSILON)
                        local_q = __filtercoeff_03_K_EPSILON;
            
                    local_frequency = (local_frequency > this->sr * 0.5 ? this->sr * 0.5 : (local_frequency < 1 ? 1 : local_frequency));
                    __filtercoeff_03_resamp_counter--;
            
                    if (__filtercoeff_03_resamp_counter <= 0) {
                        __filtercoeff_03_resamp_counter = __filtercoeff_03_activeResamp;
                        this->filtercoeff_03_updateTerms(local_frequency, local_gain, local_q);
                    }
            
                    a0[(Index)i] = this->filtercoeff_03_la0;
                    a1[(Index)i] = this->filtercoeff_03_la1;
                    a2[(Index)i] = this->filtercoeff_03_la2;
                    b1[(Index)i] = this->filtercoeff_03_lb1;
                    b2[(Index)i] = this->filtercoeff_03_lb2;
                }
            
                this->filtercoeff_03_resamp_counter = __filtercoeff_03_resamp_counter;
            }
            
            void biquad_tilde_06_perform(
                const Sample * x,
                const Sample * a0,
                const Sample * a1,
                const Sample * a2,
                const Sample * b1,
                const Sample * b2,
                SampleValue * out1,
                Index n
            ) {
                auto __biquad_tilde_06_y2 = this->biquad_tilde_06_y2;
                auto __biquad_tilde_06_y1 = this->biquad_tilde_06_y1;
                auto __biquad_tilde_06_x2 = this->biquad_tilde_06_x2;
                auto __biquad_tilde_06_x1 = this->biquad_tilde_06_x1;
                Index i;
            
                for (i = 0; i < n; i++) {
                    number tmp = x[(Index)i] * a0[(Index)i] + __biquad_tilde_06_x1 * a1[(Index)i] + __biquad_tilde_06_x2 * a2[(Index)i] - (__biquad_tilde_06_y1 * b1[(Index)i] + __biquad_tilde_06_y2 * b2[(Index)i]);
                    __biquad_tilde_06_x2 = __biquad_tilde_06_x1;
                    __biquad_tilde_06_x1 = x[(Index)i];
                    __biquad_tilde_06_y2 = __biquad_tilde_06_y1;
                    __biquad_tilde_06_y1 = tmp;
                    out1[(Index)i] = tmp;
                }
            
                this->biquad_tilde_06_x1 = __biquad_tilde_06_x1;
                this->biquad_tilde_06_x2 = __biquad_tilde_06_x2;
                this->biquad_tilde_06_y1 = __biquad_tilde_06_y1;
                this->biquad_tilde_06_y2 = __biquad_tilde_06_y2;
            }
            
            void biquad_tilde_05_perform(
                const Sample * x,
                const Sample * a0,
                const Sample * a1,
                const Sample * a2,
                const Sample * b1,
                const Sample * b2,
                SampleValue * out1,
                Index n
            ) {
                auto __biquad_tilde_05_y2 = this->biquad_tilde_05_y2;
                auto __biquad_tilde_05_y1 = this->biquad_tilde_05_y1;
                auto __biquad_tilde_05_x2 = this->biquad_tilde_05_x2;
                auto __biquad_tilde_05_x1 = this->biquad_tilde_05_x1;
                Index i;
            
                for (i = 0; i < n; i++) {
                    number tmp = x[(Index)i] * a0[(Index)i] + __biquad_tilde_05_x1 * a1[(Index)i] + __biquad_tilde_05_x2 * a2[(Index)i] - (__biquad_tilde_05_y1 * b1[(Index)i] + __biquad_tilde_05_y2 * b2[(Index)i]);
                    __biquad_tilde_05_x2 = __biquad_tilde_05_x1;
                    __biquad_tilde_05_x1 = x[(Index)i];
                    __biquad_tilde_05_y2 = __biquad_tilde_05_y1;
                    __biquad_tilde_05_y1 = tmp;
                    out1[(Index)i] = tmp;
                }
            
                this->biquad_tilde_05_x1 = __biquad_tilde_05_x1;
                this->biquad_tilde_05_x2 = __biquad_tilde_05_x2;
                this->biquad_tilde_05_y1 = __biquad_tilde_05_y1;
                this->biquad_tilde_05_y2 = __biquad_tilde_05_y2;
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void numberobj_07_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_07_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_07_value = localvalue;
            }
            
            void numberobj_08_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_08_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_08_value = localvalue;
            }
            
            void numberobj_09_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_09_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_09_value = localvalue;
            }
            
            void biquad_tilde_05_reset() {
                this->biquad_tilde_05_x1 = 0;
                this->biquad_tilde_05_x2 = 0;
                this->biquad_tilde_05_y1 = 0;
                this->biquad_tilde_05_y2 = 0;
            }
            
            void biquad_tilde_05_dspsetup(bool force) {
                if ((bool)(this->biquad_tilde_05_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->biquad_tilde_05_reset();
                this->biquad_tilde_05_setupDone = true;
            }
            
            void biquad_tilde_06_reset() {
                this->biquad_tilde_06_x1 = 0;
                this->biquad_tilde_06_x2 = 0;
                this->biquad_tilde_06_y1 = 0;
                this->biquad_tilde_06_y2 = 0;
            }
            
            void biquad_tilde_06_dspsetup(bool force) {
                if ((bool)(this->biquad_tilde_06_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->biquad_tilde_06_reset();
                this->biquad_tilde_06_setupDone = true;
            }
            
            void numberobj_07_init() {
                this->numberobj_07_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("Post-EQ~/Treble~/number_obj-7"), 1, this->_currentTime);
            }
            
            void numberobj_07_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_07_value;
            }
            
            void numberobj_07_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_07_value_set(preset["value"]);
            }
            
            array<number, 5> filtercoeff_03_localop_next(number frequency, number q, number gain, number type) {
                number omega = frequency * this->filtercoeff_03_localop_twopi_over_sr;
                this->filtercoeff_03_localop_cs = rnbo_cos(omega);
                this->filtercoeff_03_localop_sn = rnbo_sin(omega);
                this->filtercoeff_03_localop_one_over_gain = (gain >= 0 ? (number)1 / gain : 0.0);
                this->filtercoeff_03_localop_one_over_q = (number)1 / q;
                this->filtercoeff_03_localop_alpha = this->filtercoeff_03_localop_sn * 0.5 * this->filtercoeff_03_localop_one_over_q;
            
                switch ((int)type) {
                case 5:
                    {
                    this->filtercoeff_03_localop_A = this->safesqrt(gain);
            
                    this->filtercoeff_03_localop_beta = this->safesqrt(
                        (this->filtercoeff_03_localop_A * this->filtercoeff_03_localop_A + 1.) * this->filtercoeff_03_localop_one_over_q - (this->filtercoeff_03_localop_A - 1.) * (this->filtercoeff_03_localop_A - 1.)
                    );
            
                    this->filtercoeff_03_localop_b0 = (number)1 / (this->filtercoeff_03_localop_A + 1. + (this->filtercoeff_03_localop_A - 1.) * this->filtercoeff_03_localop_cs + this->filtercoeff_03_localop_beta * this->filtercoeff_03_localop_sn);
                    break;
                    }
                case 6:
                    {
                    this->filtercoeff_03_localop_A = this->safesqrt(gain);
            
                    this->filtercoeff_03_localop_beta = this->safesqrt(
                        (this->filtercoeff_03_localop_A * this->filtercoeff_03_localop_A + 1.) * this->filtercoeff_03_localop_one_over_q - (this->filtercoeff_03_localop_A - 1.) * (this->filtercoeff_03_localop_A - 1.)
                    );
            
                    this->filtercoeff_03_localop_b0 = (number)1 / (this->filtercoeff_03_localop_A + 1. - (this->filtercoeff_03_localop_A - 1.) * this->filtercoeff_03_localop_cs + this->filtercoeff_03_localop_beta * this->filtercoeff_03_localop_sn);
                    break;
                    }
                case 4:
                    {
                    this->filtercoeff_03_localop_A = this->safesqrt(gain);
                    this->filtercoeff_03_localop_one_over_a = (this->filtercoeff_03_localop_A == 0 ? 0 : (number)1 / this->filtercoeff_03_localop_A);
                    this->filtercoeff_03_localop_b0 = (number)1 / (1. + this->filtercoeff_03_localop_alpha * this->filtercoeff_03_localop_one_over_a);
                    break;
                    }
                case 9:
                case 10:
                case 11:
                case 13:
                case 14:
                    {
                    this->filtercoeff_03_localop_b0 = (number)1 / (1. + this->filtercoeff_03_localop_alpha);
                    this->filtercoeff_03_localop_b0g = (number)1 / (this->filtercoeff_03_localop_one_over_gain + this->filtercoeff_03_localop_alpha * this->filtercoeff_03_localop_one_over_gain);
                    break;
                    }
                default:
                    {
                    this->filtercoeff_03_localop_b0 = (number)1 / (1. + this->filtercoeff_03_localop_alpha);
                    break;
                    }
                }
            
                switch ((int)type) {
                case 0:
                    {
                    this->filtercoeff_03_localop_la0 = this->filtercoeff_03_localop_la2 = (1. - this->filtercoeff_03_localop_cs) * 0.5 * this->filtercoeff_03_localop_b0;
                    this->filtercoeff_03_localop_la1 = (1. - this->filtercoeff_03_localop_cs) * this->filtercoeff_03_localop_b0;
                    this->filtercoeff_03_localop_lb1 = -2. * this->filtercoeff_03_localop_cs * this->filtercoeff_03_localop_b0;
                    this->filtercoeff_03_localop_lb2 = (1. - this->filtercoeff_03_localop_alpha) * this->filtercoeff_03_localop_b0;
                    break;
                    }
                case 1:
                    {
                    this->filtercoeff_03_localop_la0 = this->filtercoeff_03_localop_la2 = (1. + this->filtercoeff_03_localop_cs) * 0.5 * this->filtercoeff_03_localop_b0;
                    this->filtercoeff_03_localop_la1 = -(1. + this->filtercoeff_03_localop_cs) * this->filtercoeff_03_localop_b0;
                    this->filtercoeff_03_localop_lb1 = -2. * this->filtercoeff_03_localop_cs * this->filtercoeff_03_localop_b0;
                    this->filtercoeff_03_localop_lb2 = (1. - this->filtercoeff_03_localop_alpha) * this->filtercoeff_03_localop_b0;
                    break;
                    }
                case 2:
                    {
                    this->filtercoeff_03_localop_la0 = this->filtercoeff_03_localop_alpha * this->filtercoeff_03_localop_b0;
                    this->filtercoeff_03_localop_la1 = 0.;
                    this->filtercoeff_03_localop_la2 = -this->filtercoeff_03_localop_alpha * this->filtercoeff_03_localop_b0;
                    this->filtercoeff_03_localop_lb1 = -2. * this->filtercoeff_03_localop_cs * this->filtercoeff_03_localop_b0;
                    this->filtercoeff_03_localop_lb2 = (1. - this->filtercoeff_03_localop_alpha) * this->filtercoeff_03_localop_b0;
                    break;
                    }
                case 7:
                    {
                    this->filtercoeff_03_localop_la0 = this->filtercoeff_03_localop_alpha * q * this->filtercoeff_03_localop_b0;
                    this->filtercoeff_03_localop_la1 = 0.;
                    this->filtercoeff_03_localop_la2 = -this->filtercoeff_03_localop_alpha * q * this->filtercoeff_03_localop_b0;
                    this->filtercoeff_03_localop_lb1 = -2. * this->filtercoeff_03_localop_cs * this->filtercoeff_03_localop_b0;
                    this->filtercoeff_03_localop_lb2 = (1. - this->filtercoeff_03_localop_alpha) * this->filtercoeff_03_localop_b0;
                    break;
                    }
                case 3:
                    {
                    this->filtercoeff_03_localop_la1 = this->filtercoeff_03_localop_lb1 = -2. * this->filtercoeff_03_localop_cs * this->filtercoeff_03_localop_b0;
                    this->filtercoeff_03_localop_lb2 = (1. - this->filtercoeff_03_localop_alpha) * this->filtercoeff_03_localop_b0;
                    this->filtercoeff_03_localop_la0 = this->filtercoeff_03_localop_la2 = this->filtercoeff_03_localop_b0;
                    break;
                    }
                case 8:
                    {
                    this->filtercoeff_03_localop_la1 = this->filtercoeff_03_localop_lb1 = -2. * this->filtercoeff_03_localop_cs * this->filtercoeff_03_localop_b0;
                    this->filtercoeff_03_localop_lb2 = this->filtercoeff_03_localop_la0 = (1. - this->filtercoeff_03_localop_alpha) * this->filtercoeff_03_localop_b0;
                    this->filtercoeff_03_localop_la2 = 1.0;
                    break;
                    }
                case 4:
                    {
                    this->filtercoeff_03_localop_la0 = (1. + this->filtercoeff_03_localop_alpha * this->filtercoeff_03_localop_A) * this->filtercoeff_03_localop_b0;
                    this->filtercoeff_03_localop_la1 = this->filtercoeff_03_localop_lb1 = -2. * this->filtercoeff_03_localop_cs * this->filtercoeff_03_localop_b0;
                    this->filtercoeff_03_localop_la2 = (1. - this->filtercoeff_03_localop_alpha * this->filtercoeff_03_localop_A) * this->filtercoeff_03_localop_b0;
                    this->filtercoeff_03_localop_lb2 = (1. - this->filtercoeff_03_localop_alpha * this->filtercoeff_03_localop_one_over_a) * this->filtercoeff_03_localop_b0;
                    break;
                    }
                case 5:
                    {
                    this->filtercoeff_03_localop_la0 = this->filtercoeff_03_localop_A * (this->filtercoeff_03_localop_A + 1. - (this->filtercoeff_03_localop_A - 1.) * this->filtercoeff_03_localop_cs + this->filtercoeff_03_localop_beta * this->filtercoeff_03_localop_sn) * this->filtercoeff_03_localop_b0;
                    this->filtercoeff_03_localop_la1 = 2. * this->filtercoeff_03_localop_A * (this->filtercoeff_03_localop_A - 1 - (this->filtercoeff_03_localop_A + 1) * this->filtercoeff_03_localop_cs) * this->filtercoeff_03_localop_b0;
                    this->filtercoeff_03_localop_la2 = this->filtercoeff_03_localop_A * (this->filtercoeff_03_localop_A + 1. - (this->filtercoeff_03_localop_A - 1.) * this->filtercoeff_03_localop_cs - this->filtercoeff_03_localop_beta * this->filtercoeff_03_localop_sn) * this->filtercoeff_03_localop_b0;
                    this->filtercoeff_03_localop_lb1 = -2. * (this->filtercoeff_03_localop_A - 1. + (this->filtercoeff_03_localop_A + 1.) * this->filtercoeff_03_localop_cs) * this->filtercoeff_03_localop_b0;
                    this->filtercoeff_03_localop_lb2 = (this->filtercoeff_03_localop_A + 1. + (this->filtercoeff_03_localop_A - 1.) * this->filtercoeff_03_localop_cs - this->filtercoeff_03_localop_beta * this->filtercoeff_03_localop_sn) * this->filtercoeff_03_localop_b0;
                    break;
                    }
                case 6:
                    {
                    this->filtercoeff_03_localop_la0 = this->filtercoeff_03_localop_A * (this->filtercoeff_03_localop_A + 1. + (this->filtercoeff_03_localop_A - 1.) * this->filtercoeff_03_localop_cs + this->filtercoeff_03_localop_beta * this->filtercoeff_03_localop_sn) * this->filtercoeff_03_localop_b0;
                    this->filtercoeff_03_localop_la1 = -2. * this->filtercoeff_03_localop_A * (this->filtercoeff_03_localop_A - 1. + (this->filtercoeff_03_localop_A + 1.) * this->filtercoeff_03_localop_cs) * this->filtercoeff_03_localop_b0;
                    this->filtercoeff_03_localop_la2 = this->filtercoeff_03_localop_A * (this->filtercoeff_03_localop_A + 1. + (this->filtercoeff_03_localop_A - 1.) * this->filtercoeff_03_localop_cs - this->filtercoeff_03_localop_beta * this->filtercoeff_03_localop_sn) * this->filtercoeff_03_localop_b0;
                    this->filtercoeff_03_localop_lb1 = 2. * (this->filtercoeff_03_localop_A - 1. - (this->filtercoeff_03_localop_A + 1.) * this->filtercoeff_03_localop_cs) * this->filtercoeff_03_localop_b0;
                    this->filtercoeff_03_localop_lb2 = (this->filtercoeff_03_localop_A + 1. - (this->filtercoeff_03_localop_A - 1.) * this->filtercoeff_03_localop_cs - this->filtercoeff_03_localop_beta * this->filtercoeff_03_localop_sn) * this->filtercoeff_03_localop_b0;
                    break;
                    }
                case 9:
                    {
                    this->filtercoeff_03_localop_b0g = (number)1 / (this->filtercoeff_03_localop_one_over_gain + this->filtercoeff_03_localop_alpha * this->filtercoeff_03_localop_one_over_gain);
                    this->filtercoeff_03_localop_la0 = this->filtercoeff_03_localop_la2 = (1. - this->filtercoeff_03_localop_cs) * 0.5 * this->filtercoeff_03_localop_b0g;
                    this->filtercoeff_03_localop_la1 = (1. - this->filtercoeff_03_localop_cs) * this->filtercoeff_03_localop_b0g;
                    this->filtercoeff_03_localop_lb1 = -2. * this->filtercoeff_03_localop_cs * this->filtercoeff_03_localop_b0;
                    this->filtercoeff_03_localop_lb2 = (1. - this->filtercoeff_03_localop_alpha) * this->filtercoeff_03_localop_b0;
                    break;
                    }
                case 10:
                    {
                    this->filtercoeff_03_localop_b0g = (number)1 / (this->filtercoeff_03_localop_one_over_gain + this->filtercoeff_03_localop_alpha * this->filtercoeff_03_localop_one_over_gain);
                    this->filtercoeff_03_localop_la0 = this->filtercoeff_03_localop_la2 = (1. + this->filtercoeff_03_localop_cs) * 0.5 * this->filtercoeff_03_localop_b0g;
                    this->filtercoeff_03_localop_la1 = -(1. + this->filtercoeff_03_localop_cs) * this->filtercoeff_03_localop_b0g;
                    this->filtercoeff_03_localop_lb1 = -2. * this->filtercoeff_03_localop_cs * this->filtercoeff_03_localop_b0;
                    this->filtercoeff_03_localop_lb2 = (1. - this->filtercoeff_03_localop_alpha) * this->filtercoeff_03_localop_b0;
                    break;
                    }
                case 11:
                    {
                    this->filtercoeff_03_localop_la0 = this->filtercoeff_03_localop_alpha * gain * this->filtercoeff_03_localop_b0;
                    this->filtercoeff_03_localop_la1 = 0.;
                    this->filtercoeff_03_localop_la2 = -this->filtercoeff_03_localop_alpha * gain * this->filtercoeff_03_localop_b0;
                    this->filtercoeff_03_localop_lb1 = -2. * this->filtercoeff_03_localop_cs * this->filtercoeff_03_localop_b0;
                    this->filtercoeff_03_localop_lb2 = (1. - this->filtercoeff_03_localop_alpha) * this->filtercoeff_03_localop_b0;
                    break;
                    }
                case 13:
                    {
                    this->filtercoeff_03_localop_la0 = this->filtercoeff_03_localop_alpha * gain * q * this->filtercoeff_03_localop_b0;
                    this->filtercoeff_03_localop_la1 = 0.;
                    this->filtercoeff_03_localop_la2 = -this->filtercoeff_03_localop_alpha * gain * q * this->filtercoeff_03_localop_b0;
                    this->filtercoeff_03_localop_lb1 = -2. * this->filtercoeff_03_localop_cs * this->filtercoeff_03_localop_b0;
                    this->filtercoeff_03_localop_lb2 = (1. - this->filtercoeff_03_localop_alpha) * this->filtercoeff_03_localop_b0;
                    break;
                    }
                case 12:
                    {
                    this->filtercoeff_03_localop_b0g = (number)1 / (this->filtercoeff_03_localop_one_over_gain + this->filtercoeff_03_localop_alpha * this->filtercoeff_03_localop_one_over_gain);
                    this->filtercoeff_03_localop_la1 = this->filtercoeff_03_localop_lb1 = -2. * this->filtercoeff_03_localop_cs;
                    this->filtercoeff_03_localop_lb2 = (1. - this->filtercoeff_03_localop_alpha) * this->filtercoeff_03_localop_b0;
                    this->filtercoeff_03_localop_la1 *= this->filtercoeff_03_localop_b0g;
                    this->filtercoeff_03_localop_lb1 *= this->filtercoeff_03_localop_b0;
                    this->filtercoeff_03_localop_la0 = this->filtercoeff_03_localop_b0g;
                    this->filtercoeff_03_localop_la2 = this->filtercoeff_03_localop_b0g;
                    break;
                    }
                case 14:
                    {
                    this->filtercoeff_03_localop_b0g = (number)1 / (this->filtercoeff_03_localop_one_over_gain + this->filtercoeff_03_localop_alpha * this->filtercoeff_03_localop_one_over_gain);
                    this->filtercoeff_03_localop_la0 = (1. - this->filtercoeff_03_localop_alpha) * this->filtercoeff_03_localop_b0g;
                    this->filtercoeff_03_localop_la1 = -2. * this->filtercoeff_03_localop_cs * this->filtercoeff_03_localop_b0g;
                    this->filtercoeff_03_localop_la2 = gain;
                    this->filtercoeff_03_localop_lb1 = -2. * this->filtercoeff_03_localop_cs * this->filtercoeff_03_localop_b0;
                    this->filtercoeff_03_localop_lb2 = (1. - this->filtercoeff_03_localop_alpha) * this->filtercoeff_03_localop_b0;
                    break;
                    }
                case 15:
                    {
                    this->filtercoeff_03_localop_la0 = 1;
                    this->filtercoeff_03_localop_la1 = 0;
                    this->filtercoeff_03_localop_la2 = 0;
                    this->filtercoeff_03_localop_lb1 = 0;
                    this->filtercoeff_03_localop_lb2 = 0;
                    }
                default:
                    {
                    break;
                    }
                }
            
                return {
                    this->filtercoeff_03_localop_la0,
                    this->filtercoeff_03_localop_la1,
                    this->filtercoeff_03_localop_la2,
                    this->filtercoeff_03_localop_lb1,
                    this->filtercoeff_03_localop_lb2
                };
            }
            
            void filtercoeff_03_localop_dspsetup() {
                this->filtercoeff_03_localop_twopi_over_sr = (number)6.283185307179586 / this->sr;
            }
            
            void filtercoeff_03_localop_reset() {
                this->filtercoeff_03_localop_twopi_over_sr = 0;
                this->filtercoeff_03_localop_cs = 0;
                this->filtercoeff_03_localop_sn = 0;
                this->filtercoeff_03_localop_one_over_gain = 0;
                this->filtercoeff_03_localop_one_over_q = 0;
                this->filtercoeff_03_localop_alpha = 0;
                this->filtercoeff_03_localop_beta = 0;
                this->filtercoeff_03_localop_b0 = 0;
                this->filtercoeff_03_localop_b0g = 0;
                this->filtercoeff_03_localop_A = 0;
                this->filtercoeff_03_localop_one_over_a = 0;
                this->filtercoeff_03_localop_la0 = 0;
                this->filtercoeff_03_localop_la1 = 0;
                this->filtercoeff_03_localop_la2 = 0;
                this->filtercoeff_03_localop_lb1 = 0;
                this->filtercoeff_03_localop_lb2 = 0;
            }
            
            void filtercoeff_03_updateTerms(number local_frequency, number local_gain, number local_q) {
                if ((bool)(this->filtercoeff_03_force_update) || local_frequency != this->filtercoeff_03_last_frequency || local_q != this->filtercoeff_03_last_q || local_gain != this->filtercoeff_03_last_gain || this->filtercoeff_03_type != this->filtercoeff_03_last_type) {
                    array<number, 5> tmp = this->filtercoeff_03_localop_next(local_frequency, local_q, local_gain, this->filtercoeff_03_type);
                    this->filtercoeff_03_la0 = tmp[0];
                    this->filtercoeff_03_la1 = tmp[1];
                    this->filtercoeff_03_la2 = tmp[2];
                    this->filtercoeff_03_lb1 = tmp[3];
                    this->filtercoeff_03_lb2 = tmp[4];
                    this->filtercoeff_03_last_frequency = local_frequency;
                    this->filtercoeff_03_last_q = local_q;
                    this->filtercoeff_03_last_gain = local_gain;
                    this->filtercoeff_03_last_type = this->filtercoeff_03_type;
                    this->filtercoeff_03_force_update = false;
                }
            }
            
            void filtercoeff_03_dspsetup(bool force) {
                if ((bool)(this->filtercoeff_03_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                {
                    this->filtercoeff_03_activeResamp = this->vectorsize();
                }
            
                this->filtercoeff_03_resamp_counter = 0;
                this->filtercoeff_03_la0 = 0.;
                this->filtercoeff_03_la1 = 0.;
                this->filtercoeff_03_la2 = 0.;
                this->filtercoeff_03_lb1 = 0.;
                this->filtercoeff_03_lb2 = 0.;
                this->filtercoeff_03_last_frequency = -1.;
                this->filtercoeff_03_last_q = -1.;
                this->filtercoeff_03_last_gain = -1.;
                this->filtercoeff_03_last_type = this->filtercoeff_03_type;
                this->filtercoeff_03_force_update = true;
                this->filtercoeff_03_setupDone = true;
                this->filtercoeff_03_localop_dspsetup();
            }
            
            void numberobj_08_init() {
                this->numberobj_08_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("Post-EQ~/Treble~/number_obj-4"), 1, this->_currentTime);
            }
            
            void numberobj_08_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_08_value;
            }
            
            void numberobj_08_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_08_value_set(preset["value"]);
            }
            
            void numberobj_09_init() {
                this->numberobj_09_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("Post-EQ~/Treble~/number_obj-12"), 1, this->_currentTime);
            }
            
            void numberobj_09_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_09_value;
            }
            
            void numberobj_09_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_09_value_set(preset["value"]);
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                biquad_tilde_05_x = 0;
                biquad_tilde_05_a0 = 0;
                biquad_tilde_05_a1 = 0;
                biquad_tilde_05_a2 = 0;
                biquad_tilde_05_b1 = 0;
                biquad_tilde_05_b2 = 0;
                biquad_tilde_06_x = 0;
                biquad_tilde_06_a0 = 0;
                biquad_tilde_06_a1 = 0;
                biquad_tilde_06_a2 = 0;
                biquad_tilde_06_b1 = 0;
                biquad_tilde_06_b2 = 0;
                numberobj_07_value = 0;
                numberobj_07_value_setter(numberobj_07_value);
                linetilde_07_time = 10;
                linetilde_07_keepramp = 0;
                filtercoeff_03_frequency = 1000;
                filtercoeff_03_gain = 1;
                filtercoeff_03_q = 1;
                filtercoeff_03_type = 6;
                numberobj_08_value = 0;
                numberobj_08_value_setter(numberobj_08_value);
                expr_03_in1 = 0;
                expr_03_out1 = 0;
                linetilde_08_time = 10;
                linetilde_08_keepramp = 0;
                numberobj_09_value = 0;
                numberobj_09_value_setter(numberobj_09_value);
                linetilde_09_time = 10;
                linetilde_09_keepramp = 0;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                signals[1] = nullptr;
                signals[2] = nullptr;
                signals[3] = nullptr;
                signals[4] = nullptr;
                signals[5] = nullptr;
                signals[6] = nullptr;
                signals[7] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                biquad_tilde_05_x1 = 0;
                biquad_tilde_05_x2 = 0;
                biquad_tilde_05_y1 = 0;
                biquad_tilde_05_y2 = 0;
                biquad_tilde_05_setupDone = false;
                biquad_tilde_06_x1 = 0;
                biquad_tilde_06_x2 = 0;
                biquad_tilde_06_y1 = 0;
                biquad_tilde_06_y2 = 0;
                biquad_tilde_06_setupDone = false;
                numberobj_07_currentFormat = 6;
                numberobj_07_lastValue = 0;
                linetilde_07_currentValue = 3300;
                filtercoeff_03_K_EPSILON = 1e-9;
                filtercoeff_03_setupDone = false;
                numberobj_08_currentFormat = 6;
                numberobj_08_lastValue = 0;
                linetilde_08_currentValue = 1;
                numberobj_09_currentFormat = 6;
                numberobj_09_lastValue = 0;
                linetilde_09_currentValue = 0.7;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number biquad_tilde_05_x;
                number biquad_tilde_05_a0;
                number biquad_tilde_05_a1;
                number biquad_tilde_05_a2;
                number biquad_tilde_05_b1;
                number biquad_tilde_05_b2;
                number biquad_tilde_06_x;
                number biquad_tilde_06_a0;
                number biquad_tilde_06_a1;
                number biquad_tilde_06_a2;
                number biquad_tilde_06_b1;
                number biquad_tilde_06_b2;
                number numberobj_07_value;
                list linetilde_07_segments;
                number linetilde_07_time;
                number linetilde_07_keepramp;
                number filtercoeff_03_frequency;
                number filtercoeff_03_gain;
                number filtercoeff_03_q;
                Int filtercoeff_03_type;
                number numberobj_08_value;
                number expr_03_in1;
                number expr_03_out1;
                list linetilde_08_segments;
                number linetilde_08_time;
                number linetilde_08_keepramp;
                number numberobj_09_value;
                list linetilde_09_segments;
                number linetilde_09_time;
                number linetilde_09_keepramp;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[8];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                number biquad_tilde_05_x1;
                number biquad_tilde_05_x2;
                number biquad_tilde_05_y1;
                number biquad_tilde_05_y2;
                bool biquad_tilde_05_setupDone;
                number biquad_tilde_06_x1;
                number biquad_tilde_06_x2;
                number biquad_tilde_06_y1;
                number biquad_tilde_06_y2;
                bool biquad_tilde_06_setupDone;
                Int numberobj_07_currentFormat;
                number numberobj_07_lastValue;
                list linetilde_07_activeRamps;
                number linetilde_07_currentValue;
                number filtercoeff_03_resamp_counter;
                number filtercoeff_03_activeResamp;
                number filtercoeff_03_K_EPSILON;
                number filtercoeff_03_la0;
                number filtercoeff_03_la1;
                number filtercoeff_03_la2;
                number filtercoeff_03_lb1;
                number filtercoeff_03_lb2;
                number filtercoeff_03_last_frequency;
                number filtercoeff_03_last_q;
                number filtercoeff_03_last_gain;
                Int filtercoeff_03_last_type;
                bool filtercoeff_03_force_update;
                number filtercoeff_03_localop_twopi_over_sr;
                number filtercoeff_03_localop_cs;
                number filtercoeff_03_localop_sn;
                number filtercoeff_03_localop_one_over_gain;
                number filtercoeff_03_localop_one_over_q;
                number filtercoeff_03_localop_alpha;
                number filtercoeff_03_localop_beta;
                number filtercoeff_03_localop_b0;
                number filtercoeff_03_localop_b0g;
                number filtercoeff_03_localop_A;
                number filtercoeff_03_localop_one_over_a;
                number filtercoeff_03_localop_la0;
                number filtercoeff_03_localop_la1;
                number filtercoeff_03_localop_la2;
                number filtercoeff_03_localop_lb1;
                number filtercoeff_03_localop_lb2;
                bool filtercoeff_03_setupDone;
                Int numberobj_08_currentFormat;
                number numberobj_08_lastValue;
                list linetilde_08_activeRamps;
                number linetilde_08_currentValue;
                Int numberobj_09_currentFormat;
                number numberobj_09_lastValue;
                list linetilde_09_activeRamps;
                number linetilde_09_currentValue;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    RNBOSubpatcher_804()
    {
    }
    
    ~RNBOSubpatcher_804()
    {
        delete this->p_01;
        delete this->p_02;
        delete this->p_03;
    }
    
    virtual drone* getPatcher() const {
        return static_cast<drone *>(_parentPatcher);
    }
    
    drone* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
    }
    
    inline number safediv(number num, number denom) {
        return (denom == 0.0 ? 0.0 : num / denom);
    }
    
    number safepow(number base, number exponent) {
        return fixnan(rnbo_pow(base, exponent));
    }
    
    number scale(
        number x,
        number lowin,
        number hiin,
        number lowout,
        number highout,
        number pow
    ) {
        auto inscale = this->safediv(1., hiin - lowin);
        number outdiff = highout - lowout;
        number value = (x - lowin) * inscale;
    
        if (pow != 1) {
            if (value > 0)
                value = this->safepow(value, pow);
            else
                value = -this->safepow(-value, pow);
        }
    
        value = value * outdiff + lowout;
        return value;
    }
    
    Index getNumMidiInputPorts() const {
        return 0;
    }
    
    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        const SampleValue * const* inputs,
        Index numInputs,
        SampleValue * const* outputs,
        Index numOutputs,
        Index n
    ) {
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
        SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
        const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
        const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
        this->p_03_perform(in1, in2, this->signals[0], this->signals[1], n);
        this->p_02_perform(this->signals[0], this->signals[1], this->signals[2], this->signals[3], n);
        this->p_01_perform(this->signals[2], this->signals[3], out1, out2, n);
        this->stackprotect_perform(n);
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            Index i;
    
            for (i = 0; i < 4; i++) {
                this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
            }
    
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        RNBO_UNUSED(forceDSPSetup);
        this->p_01->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_02->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_03->prepareToProcess(sampleRate, maxBlockSize, force);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            {
            this->setProbingIndex(-1);
            break;
            }
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    void onSampleRateChanged(double ) {}
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {
        this->p_01 = new RNBOSubpatcher_791();
        this->p_01->setEngineAndPatcher(this->getEngine(), this);
        this->p_01->initialize();
        this->p_01->setParameterOffset(this->getParameterOffset(this->p_01));
        this->p_02 = new RNBOSubpatcher_792();
        this->p_02->setEngineAndPatcher(this->getEngine(), this);
        this->p_02->initialize();
        this->p_02->setParameterOffset(this->getParameterOffset(this->p_02));
        this->p_03 = new RNBOSubpatcher_793();
        this->p_03->setEngineAndPatcher(this->getEngine(), this);
        this->p_03->initialize();
        this->p_03->setParameterOffset(this->getParameterOffset(this->p_03));
    }
    
    void getPreset(PatcherStateInterface& preset) {
        this->p_01->getPreset(getSubState(getSubState(preset, "__sps"), "Bass~"));
        this->p_02->getPreset(getSubState(getSubState(preset, "__sps"), "Mid~"));
        this->p_03->getPreset(getSubState(getSubState(preset, "__sps"), "Treble~"));
    }
    
    void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
        RNBO_UNUSED(v);
        this->updateTime(time);
    
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_01->getNumParameters())
                this->p_01->setParameterValue(index, v, time);
    
            index -= this->p_01->getNumParameters();
    
            if (index < this->p_02->getNumParameters())
                this->p_02->setParameterValue(index, v, time);
    
            index -= this->p_02->getNumParameters();
    
            if (index < this->p_03->getNumParameters())
                this->p_03->setParameterValue(index, v, time);
    
            break;
            }
        }
    }
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
        this->setParameterValue(index, this->getParameterValue(index), time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_01->getNumParameters())
                return this->p_01->getParameterValue(index);
    
            index -= this->p_01->getNumParameters();
    
            if (index < this->p_02->getNumParameters())
                return this->p_02->getParameterValue(index);
    
            index -= this->p_02->getNumParameters();
    
            if (index < this->p_03->getNumParameters())
                return this->p_03->getParameterValue(index);
    
            return 0;
            }
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 0;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 0;
    }
    
    ParameterIndex getNumParameters() const {
        return 0 + this->p_01->getNumParameters() + this->p_02->getNumParameters() + this->p_03->getNumParameters();
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_01->getNumParameters())
                return this->p_01->getParameterName(index);
    
            index -= this->p_01->getNumParameters();
    
            if (index < this->p_02->getNumParameters())
                return this->p_02->getParameterName(index);
    
            index -= this->p_02->getNumParameters();
    
            if (index < this->p_03->getNumParameters())
                return this->p_03->getParameterName(index);
    
            return "bogus";
            }
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_01->getNumParameters())
                return this->p_01->getParameterId(index);
    
            index -= this->p_01->getNumParameters();
    
            if (index < this->p_02->getNumParameters())
                return this->p_02->getParameterId(index);
    
            index -= this->p_02->getNumParameters();
    
            if (index < this->p_03->getNumParameters())
                return this->p_03->getParameterId(index);
    
            return "bogus";
            }
        }
    }
    
    void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
        {
            switch (index) {
            default:
                {
                index -= 0;
    
                if (index < this->p_01->getNumParameters())
                    this->p_01->getParameterInfo(index, info);
    
                index -= this->p_01->getNumParameters();
    
                if (index < this->p_02->getNumParameters())
                    this->p_02->getParameterInfo(index, info);
    
                index -= this->p_02->getNumParameters();
    
                if (index < this->p_03->getNumParameters())
                    this->p_03->getParameterInfo(index, info);
    
                break;
                }
            }
        }
    }
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
        if (subpatcher == this->p_01)
            return 0;
    
        if (subpatcher == this->p_02)
            return 0 + this->p_01->getNumParameters();
    
        if (subpatcher == this->p_03)
            return 0 + this->p_01->getNumParameters() + this->p_02->getNumParameters();
    
        return 0;
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_01->getNumParameters())
                return this->p_01->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_01->getNumParameters();
    
            if (index < this->p_02->getNumParameters())
                return this->p_02->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_02->getNumParameters();
    
            if (index < this->p_03->getNumParameters())
                return this->p_03->convertToNormalizedParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_01->getNumParameters())
                return this->p_01->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_01->getNumParameters();
    
            if (index < this->p_02->getNumParameters())
                return this->p_02->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_02->getNumParameters();
    
            if (index < this->p_03->getNumParameters())
                return this->p_03->convertFromNormalizedParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_01->getNumParameters())
                return this->p_01->constrainParameterValue(index, value);
    
            index -= this->p_01->getNumParameters();
    
            if (index < this->p_02->getNumParameters())
                return this->p_02->constrainParameterValue(index, value);
    
            index -= this->p_02->getNumParameters();
    
            if (index < this->p_03->getNumParameters())
                return this->p_03->constrainParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("valin"):
            {
            if (TAG("Post-EQ~/number_obj-11") == objectId)
                this->numberobj_10_valin_set(payload);
    
            if (TAG("Post-EQ~/number_obj-51") == objectId)
                this->numberobj_11_valin_set(payload);
    
            if (TAG("Post-EQ~/number_obj-3") == objectId)
                this->numberobj_12_valin_set(payload);
    
            if (TAG("Post-EQ~/number_obj-67") == objectId)
                this->numberobj_13_valin_set(payload);
    
            if (TAG("Post-EQ~/number_obj-70") == objectId)
                this->numberobj_14_valin_set(payload);
    
            if (TAG("Post-EQ~/number_obj-73") == objectId)
                this->numberobj_15_valin_set(payload);
    
            if (TAG("Post-EQ~/number_obj-63") == objectId)
                this->numberobj_16_valin_set(payload);
    
            if (TAG("Post-EQ~/number_obj-77") == objectId)
                this->numberobj_17_valin_set(payload);
    
            if (TAG("Post-EQ~/number_obj-26") == objectId)
                this->numberobj_18_valin_set(payload);
    
            if (TAG("Post-EQ~/number_obj-30") == objectId)
                this->numberobj_19_valin_set(payload);
    
            break;
            }
        case TAG("format"):
            {
            if (TAG("Post-EQ~/number_obj-11") == objectId)
                this->numberobj_10_format_set(payload);
    
            if (TAG("Post-EQ~/number_obj-51") == objectId)
                this->numberobj_11_format_set(payload);
    
            if (TAG("Post-EQ~/number_obj-3") == objectId)
                this->numberobj_12_format_set(payload);
    
            if (TAG("Post-EQ~/number_obj-67") == objectId)
                this->numberobj_13_format_set(payload);
    
            if (TAG("Post-EQ~/number_obj-70") == objectId)
                this->numberobj_14_format_set(payload);
    
            if (TAG("Post-EQ~/number_obj-73") == objectId)
                this->numberobj_15_format_set(payload);
    
            if (TAG("Post-EQ~/number_obj-63") == objectId)
                this->numberobj_16_format_set(payload);
    
            if (TAG("Post-EQ~/number_obj-77") == objectId)
                this->numberobj_17_format_set(payload);
    
            if (TAG("Post-EQ~/number_obj-26") == objectId)
                this->numberobj_18_format_set(payload);
    
            if (TAG("Post-EQ~/number_obj-30") == objectId)
                this->numberobj_19_format_set(payload);
    
            break;
            }
        }
    
        this->p_01->processNumMessage(tag, objectId, time, payload);
        this->p_02->processNumMessage(tag, objectId, time, payload);
        this->p_03->processNumMessage(tag, objectId, time, payload);
    }
    
    void processListMessage(
        MessageTag tag,
        MessageTag objectId,
        MillisecondTime time,
        const list& payload
    ) {
        RNBO_UNUSED(objectId);
        this->updateTime(time);
        this->p_01->processListMessage(tag, objectId, time, payload);
        this->p_02->processListMessage(tag, objectId, time, payload);
        this->p_03->processListMessage(tag, objectId, time, payload);
    }
    
    void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
        RNBO_UNUSED(objectId);
        this->updateTime(time);
        this->p_01->processBangMessage(tag, objectId, time);
        this->p_02->processBangMessage(tag, objectId, time);
        this->p_03->processBangMessage(tag, objectId, time);
    }
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
        case TAG("valout"):
            {
            return "valout";
            }
        case TAG("Post-EQ~/number_obj-11"):
            {
            return "Post-EQ~/number_obj-11";
            }
        case TAG("setup"):
            {
            return "setup";
            }
        case TAG("Post-EQ~/number_obj-51"):
            {
            return "Post-EQ~/number_obj-51";
            }
        case TAG("Post-EQ~/number_obj-3"):
            {
            return "Post-EQ~/number_obj-3";
            }
        case TAG("Post-EQ~/number_obj-67"):
            {
            return "Post-EQ~/number_obj-67";
            }
        case TAG("Post-EQ~/number_obj-70"):
            {
            return "Post-EQ~/number_obj-70";
            }
        case TAG("Post-EQ~/number_obj-73"):
            {
            return "Post-EQ~/number_obj-73";
            }
        case TAG("Post-EQ~/number_obj-63"):
            {
            return "Post-EQ~/number_obj-63";
            }
        case TAG("Post-EQ~/number_obj-77"):
            {
            return "Post-EQ~/number_obj-77";
            }
        case TAG("Post-EQ~/number_obj-26"):
            {
            return "Post-EQ~/number_obj-26";
            }
        case TAG("Post-EQ~/number_obj-30"):
            {
            return "Post-EQ~/number_obj-30";
            }
        case TAG("valin"):
            {
            return "valin";
            }
        case TAG("format"):
            {
            return "format";
            }
        }
    
        auto subpatchResult_0 = this->p_01->resolveTag(tag);
    
        if (subpatchResult_0)
            return subpatchResult_0;
    
        auto subpatchResult_1 = this->p_02->resolveTag(tag);
    
        if (subpatchResult_1)
            return subpatchResult_1;
    
        auto subpatchResult_2 = this->p_03->resolveTag(tag);
    
        if (subpatchResult_2)
            return subpatchResult_2;
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        default:
            {
            return nullptr;
            }
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 0;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
        this->p_01->processDataViewUpdate(index, time);
        this->p_02->processDataViewUpdate(index, time);
        this->p_03->processDataViewUpdate(index, time);
    }
    
    void initialize() {
        this->assign_defaults();
        this->setState();
    }
    
    protected:
    
    void numberobj_10_valin_set(number v) {
        this->numberobj_10_value_set(v);
    }
    
    void numberobj_10_format_set(number v) {
        this->numberobj_10_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_11_valin_set(number v) {
        this->numberobj_11_value_set(v);
    }
    
    void numberobj_11_format_set(number v) {
        this->numberobj_11_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_12_valin_set(number v) {
        this->numberobj_12_value_set(v);
    }
    
    void numberobj_12_format_set(number v) {
        this->numberobj_12_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void eventinlet_04_out1_bang_bang() {
        this->numberobj_12_value_bang();
    }
    
    void eventinlet_04_out1_number_set(number v) {
        this->numberobj_12_value_set(v);
    }
    
    void eventinlet_04_out1_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_12_value_set(converted);
        }
    }
    
    void numberobj_13_valin_set(number v) {
        this->numberobj_13_value_set(v);
    }
    
    void numberobj_13_format_set(number v) {
        this->numberobj_13_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_14_valin_set(number v) {
        this->numberobj_14_value_set(v);
    }
    
    void numberobj_14_format_set(number v) {
        this->numberobj_14_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void eventinlet_05_out1_bang_bang() {
        this->numberobj_14_value_bang();
    }
    
    void eventinlet_05_out1_number_set(number v) {
        this->numberobj_14_value_set(v);
    }
    
    void eventinlet_05_out1_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_14_value_set(converted);
        }
    }
    
    void numberobj_15_valin_set(number v) {
        this->numberobj_15_value_set(v);
    }
    
    void numberobj_15_format_set(number v) {
        this->numberobj_15_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_16_valin_set(number v) {
        this->numberobj_16_value_set(v);
    }
    
    void numberobj_16_format_set(number v) {
        this->numberobj_16_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_17_valin_set(number v) {
        this->numberobj_17_value_set(v);
    }
    
    void numberobj_17_format_set(number v) {
        this->numberobj_17_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void eventinlet_06_out1_bang_bang() {
        this->numberobj_17_value_bang();
    }
    
    void eventinlet_06_out1_number_set(number v) {
        this->numberobj_17_value_set(v);
    }
    
    void eventinlet_06_out1_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_17_value_set(converted);
        }
    }
    
    void numberobj_18_valin_set(number v) {
        this->numberobj_18_value_set(v);
    }
    
    void numberobj_18_format_set(number v) {
        this->numberobj_18_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_19_valin_set(number v) {
        this->numberobj_19_value_set(v);
    }
    
    void numberobj_19_format_set(number v) {
        this->numberobj_19_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void eventinlet_07_out1_bang_bang() {
        this->numberobj_19_value_bang();
    }
    
    void eventinlet_07_out1_number_set(number v) {
        this->numberobj_19_value_set(v);
    }
    
    void eventinlet_07_out1_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_19_value_set(converted);
        }
    }
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 2;
    }
    
    Index getNumOutputChannels() const {
        return 2;
    }
    
    void initializeObjects() {
        this->numberobj_10_init();
        this->numberobj_11_init();
        this->numberobj_12_init();
        this->numberobj_13_init();
        this->numberobj_14_init();
        this->numberobj_15_init();
        this->numberobj_16_init();
        this->numberobj_17_init();
        this->numberobj_18_init();
        this->numberobj_19_init();
        this->p_01->initializeObjects();
        this->p_02->initializeObjects();
        this->p_03->initializeObjects();
    }
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {
        this->updateTime(this->getEngine()->getCurrentTime());
        this->p_01->startup();
        this->p_02->startup();
        this->p_03->startup();
    }
    
    void allocateDataRefs() {
        this->p_01->allocateDataRefs();
        this->p_02->allocateDataRefs();
        this->p_03->allocateDataRefs();
    }
    
    void p_01_in3_list_set(const list& v) {
        this->p_01->updateTime(this->_currentTime);
        this->p_01->eventinlet_01_out1_list_set(v);
    }
    
    void pak_01_out_set(const list& v) {
        this->p_01_in3_list_set(v);
    }
    
    void pak_01_in2_set(number v) {
        this->pak_01_in2 = v;
        list array = list(0, 0, 0);
        array[0] = this->pak_01_in1;
        array[1] = this->pak_01_in2;
        array[2] = this->pak_01_in3;
        this->pak_01_out_set(array);
    }
    
    void numberobj_10_output_set(number v) {
        this->pak_01_in2_set(v);
    }
    
    void numberobj_10_value_set(number v) {
        this->numberobj_10_value_setter(v);
        v = this->numberobj_10_value;
        number localvalue = v;
    
        if (this->numberobj_10_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("Post-EQ~/number_obj-11"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_10_output_set(localvalue);
    }
    
    void pak_01_in3_set(number v) {
        this->pak_01_in3 = v;
        list array = list(0, 0, 0);
        array[0] = this->pak_01_in1;
        array[1] = this->pak_01_in2;
        array[2] = this->pak_01_in3;
        this->pak_01_out_set(array);
    }
    
    void numberobj_11_output_set(number v) {
        this->pak_01_in3_set(v);
    }
    
    void numberobj_11_value_set(number v) {
        this->numberobj_11_value_setter(v);
        v = this->numberobj_11_value;
        number localvalue = v;
    
        if (this->numberobj_11_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("Post-EQ~/number_obj-51"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_11_output_set(localvalue);
    }
    
    void scale_02_out_set(const list& v) {
        this->scale_02_out = jsCreateListCopy(v);
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_11_value_set(converted);
        }
    }
    
    void scale_02_input_set(const list& v) {
        this->scale_02_input = jsCreateListCopy(v);
        list tmp = {};
    
        for (Index i = 0; i < v->length; i++) {
            tmp->push(this->scale(
                v[(Index)i],
                this->scale_02_inlow,
                this->scale_02_inhigh,
                this->scale_02_outlow,
                this->scale_02_outhigh,
                this->scale_02_power
            ));
        }
    
        this->scale_02_out_set(tmp);
    }
    
    void scale_01_out_set(const list& v) {
        this->scale_01_out = jsCreateListCopy(v);
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_10_value_set(converted);
        }
    }
    
    void scale_01_input_set(const list& v) {
        this->scale_01_input = jsCreateListCopy(v);
        list tmp = {};
    
        for (Index i = 0; i < v->length; i++) {
            tmp->push(this->scale(
                v[(Index)i],
                this->scale_01_inlow,
                this->scale_01_inhigh,
                this->scale_01_outlow,
                this->scale_01_outhigh,
                this->scale_01_power
            ));
        }
    
        this->scale_01_out_set(tmp);
    }
    
    void numberobj_12_output_set(number v) {
        {
            list converted = {v};
            this->scale_02_input_set(converted);
        }
    
        {
            list converted = {v};
            this->scale_01_input_set(converted);
        }
    }
    
    void numberobj_12_value_set(number v) {
        this->numberobj_12_value_setter(v);
        v = this->numberobj_12_value;
        number localvalue = v;
    
        if (this->numberobj_12_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("Post-EQ~/number_obj-3"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_12_output_set(localvalue);
    }
    
    void numberobj_12_value_bang() {
        number v = this->numberobj_12_value;
        number localvalue = v;
    
        if (this->numberobj_12_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("Post-EQ~/number_obj-3"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_12_output_set(localvalue);
    }
    
    void p_02_in3_list_set(const list& v) {
        this->p_02->updateTime(this->_currentTime);
        this->p_02->eventinlet_02_out1_list_set(v);
    }
    
    void pak_02_out_set(const list& v) {
        this->p_02_in3_list_set(v);
    }
    
    void pak_02_in1_set(number v) {
        this->pak_02_in1 = v;
        list array = list(0, 0, 0);
        array[0] = this->pak_02_in1;
        array[1] = this->pak_02_in2;
        array[2] = this->pak_02_in3;
        this->pak_02_out_set(array);
    }
    
    void numberobj_13_output_set(number v) {
        this->pak_02_in1_set(v);
    }
    
    void numberobj_13_value_set(number v) {
        this->numberobj_13_value_setter(v);
        v = this->numberobj_13_value;
        number localvalue = v;
    
        if (this->numberobj_13_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("Post-EQ~/number_obj-67"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_13_output_set(localvalue);
    }
    
    void scale_03_out_set(const list& v) {
        this->scale_03_out = jsCreateListCopy(v);
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_13_value_set(converted);
        }
    }
    
    void scale_03_input_set(const list& v) {
        this->scale_03_input = jsCreateListCopy(v);
        list tmp = {};
    
        for (Index i = 0; i < v->length; i++) {
            tmp->push(this->scale(
                v[(Index)i],
                this->scale_03_inlow,
                this->scale_03_inhigh,
                this->scale_03_outlow,
                this->scale_03_outhigh,
                this->scale_03_power
            ));
        }
    
        this->scale_03_out_set(tmp);
    }
    
    void numberobj_14_output_set(number v) {
        {
            list converted = {v};
            this->scale_03_input_set(converted);
        }
    }
    
    void numberobj_14_value_set(number v) {
        this->numberobj_14_value_setter(v);
        v = this->numberobj_14_value;
        number localvalue = v;
    
        if (this->numberobj_14_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("Post-EQ~/number_obj-70"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_14_output_set(localvalue);
    }
    
    void numberobj_14_value_bang() {
        number v = this->numberobj_14_value;
        number localvalue = v;
    
        if (this->numberobj_14_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("Post-EQ~/number_obj-70"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_14_output_set(localvalue);
    }
    
    void pak_02_in2_set(number v) {
        this->pak_02_in2 = v;
        list array = list(0, 0, 0);
        array[0] = this->pak_02_in1;
        array[1] = this->pak_02_in2;
        array[2] = this->pak_02_in3;
        this->pak_02_out_set(array);
    }
    
    void numberobj_15_output_set(number v) {
        this->pak_02_in2_set(v);
    }
    
    void numberobj_15_value_set(number v) {
        this->numberobj_15_value_setter(v);
        v = this->numberobj_15_value;
        number localvalue = v;
    
        if (this->numberobj_15_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("Post-EQ~/number_obj-73"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_15_output_set(localvalue);
    }
    
    void pak_02_in3_set(number v) {
        this->pak_02_in3 = v;
        list array = list(0, 0, 0);
        array[0] = this->pak_02_in1;
        array[1] = this->pak_02_in2;
        array[2] = this->pak_02_in3;
        this->pak_02_out_set(array);
    }
    
    void numberobj_16_output_set(number v) {
        this->pak_02_in3_set(v);
    }
    
    void numberobj_16_value_set(number v) {
        this->numberobj_16_value_setter(v);
        v = this->numberobj_16_value;
        number localvalue = v;
    
        if (this->numberobj_16_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("Post-EQ~/number_obj-63"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_16_output_set(localvalue);
    }
    
    void scale_05_out_set(const list& v) {
        this->scale_05_out = jsCreateListCopy(v);
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_16_value_set(converted);
        }
    }
    
    void scale_05_input_set(const list& v) {
        this->scale_05_input = jsCreateListCopy(v);
        list tmp = {};
    
        for (Index i = 0; i < v->length; i++) {
            tmp->push(this->scale(
                v[(Index)i],
                this->scale_05_inlow,
                this->scale_05_inhigh,
                this->scale_05_outlow,
                this->scale_05_outhigh,
                this->scale_05_power
            ));
        }
    
        this->scale_05_out_set(tmp);
    }
    
    void scale_04_out_set(const list& v) {
        this->scale_04_out = jsCreateListCopy(v);
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_15_value_set(converted);
        }
    }
    
    void scale_04_input_set(const list& v) {
        this->scale_04_input = jsCreateListCopy(v);
        list tmp = {};
    
        for (Index i = 0; i < v->length; i++) {
            tmp->push(this->scale(
                v[(Index)i],
                this->scale_04_inlow,
                this->scale_04_inhigh,
                this->scale_04_outlow,
                this->scale_04_outhigh,
                this->scale_04_power
            ));
        }
    
        this->scale_04_out_set(tmp);
    }
    
    void numberobj_17_output_set(number v) {
        {
            list converted = {v};
            this->scale_05_input_set(converted);
        }
    
        {
            list converted = {v};
            this->scale_04_input_set(converted);
        }
    }
    
    void numberobj_17_value_set(number v) {
        this->numberobj_17_value_setter(v);
        v = this->numberobj_17_value;
        number localvalue = v;
    
        if (this->numberobj_17_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("Post-EQ~/number_obj-77"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_17_output_set(localvalue);
    }
    
    void numberobj_17_value_bang() {
        number v = this->numberobj_17_value;
        number localvalue = v;
    
        if (this->numberobj_17_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("Post-EQ~/number_obj-77"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_17_output_set(localvalue);
    }
    
    void p_03_in3_list_set(const list& v) {
        this->p_03->updateTime(this->_currentTime);
        this->p_03->eventinlet_03_out1_list_set(v);
    }
    
    void pak_03_out_set(const list& v) {
        this->p_03_in3_list_set(v);
    }
    
    void pak_03_in2_set(number v) {
        this->pak_03_in2 = v;
        list array = list(0, 0, 0);
        array[0] = this->pak_03_in1;
        array[1] = this->pak_03_in2;
        array[2] = this->pak_03_in3;
        this->pak_03_out_set(array);
    }
    
    void numberobj_18_output_set(number v) {
        this->pak_03_in2_set(v);
    }
    
    void numberobj_18_value_set(number v) {
        this->numberobj_18_value_setter(v);
        v = this->numberobj_18_value;
        number localvalue = v;
    
        if (this->numberobj_18_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("Post-EQ~/number_obj-26"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_18_output_set(localvalue);
    }
    
    void scale_06_out_set(const list& v) {
        this->scale_06_out = jsCreateListCopy(v);
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_18_value_set(converted);
        }
    }
    
    void scale_06_input_set(const list& v) {
        this->scale_06_input = jsCreateListCopy(v);
        list tmp = {};
    
        for (Index i = 0; i < v->length; i++) {
            tmp->push(this->scale(
                v[(Index)i],
                this->scale_06_inlow,
                this->scale_06_inhigh,
                this->scale_06_outlow,
                this->scale_06_outhigh,
                this->scale_06_power
            ));
        }
    
        this->scale_06_out_set(tmp);
    }
    
    void numberobj_19_output_set(number v) {
        {
            list converted = {v};
            this->scale_06_input_set(converted);
        }
    }
    
    void numberobj_19_value_set(number v) {
        this->numberobj_19_value_setter(v);
        v = this->numberobj_19_value;
        number localvalue = v;
    
        if (this->numberobj_19_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("Post-EQ~/number_obj-30"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_19_output_set(localvalue);
    }
    
    void numberobj_19_value_bang() {
        number v = this->numberobj_19_value;
        number localvalue = v;
    
        if (this->numberobj_19_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("Post-EQ~/number_obj-30"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_19_output_set(localvalue);
    }
    
    void p_03_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        // subpatcher: Treble~
        ConstSampleArray<2> ins = {in1, in2};
    
        SampleArray<2> outs = {out1, out2};
        this->p_03->process(ins, 2, outs, 2, n);
    }
    
    void p_02_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        // subpatcher: Mid~
        ConstSampleArray<2> ins = {in1, in2};
    
        SampleArray<2> outs = {out1, out2};
        this->p_02->process(ins, 2, outs, 2, n);
    }
    
    void p_01_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        // subpatcher: Bass~
        ConstSampleArray<2> ins = {in1, in2};
    
        SampleArray<2> outs = {out1, out2};
        this->p_01->process(ins, 2, outs, 2, n);
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    void numberobj_10_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_10_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_10_value = localvalue;
    }
    
    void numberobj_11_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_11_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_11_value = localvalue;
    }
    
    void numberobj_12_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_12_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_12_value = localvalue;
    }
    
    void numberobj_13_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_13_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_13_value = localvalue;
    }
    
    void numberobj_14_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_14_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_14_value = localvalue;
    }
    
    void numberobj_15_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_15_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_15_value = localvalue;
    }
    
    void numberobj_16_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_16_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_16_value = localvalue;
    }
    
    void numberobj_17_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_17_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_17_value = localvalue;
    }
    
    void numberobj_18_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_18_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_18_value = localvalue;
    }
    
    void numberobj_19_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_19_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_19_value = localvalue;
    }
    
    void numberobj_10_init() {
        this->numberobj_10_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Post-EQ~/number_obj-11"), 1, this->_currentTime);
    }
    
    void numberobj_10_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_10_value;
    }
    
    void numberobj_10_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_10_value_set(preset["value"]);
    }
    
    void numberobj_11_init() {
        this->numberobj_11_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Post-EQ~/number_obj-51"), 1, this->_currentTime);
    }
    
    void numberobj_11_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_11_value;
    }
    
    void numberobj_11_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_11_value_set(preset["value"]);
    }
    
    void numberobj_12_init() {
        this->numberobj_12_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Post-EQ~/number_obj-3"), 1, this->_currentTime);
    }
    
    void numberobj_12_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_12_value;
    }
    
    void numberobj_12_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_12_value_set(preset["value"]);
    }
    
    void numberobj_13_init() {
        this->numberobj_13_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Post-EQ~/number_obj-67"), 1, this->_currentTime);
    }
    
    void numberobj_13_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_13_value;
    }
    
    void numberobj_13_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_13_value_set(preset["value"]);
    }
    
    void numberobj_14_init() {
        this->numberobj_14_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Post-EQ~/number_obj-70"), 1, this->_currentTime);
    }
    
    void numberobj_14_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_14_value;
    }
    
    void numberobj_14_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_14_value_set(preset["value"]);
    }
    
    void numberobj_15_init() {
        this->numberobj_15_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Post-EQ~/number_obj-73"), 1, this->_currentTime);
    }
    
    void numberobj_15_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_15_value;
    }
    
    void numberobj_15_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_15_value_set(preset["value"]);
    }
    
    void numberobj_16_init() {
        this->numberobj_16_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Post-EQ~/number_obj-63"), 1, this->_currentTime);
    }
    
    void numberobj_16_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_16_value;
    }
    
    void numberobj_16_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_16_value_set(preset["value"]);
    }
    
    void numberobj_17_init() {
        this->numberobj_17_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Post-EQ~/number_obj-77"), 1, this->_currentTime);
    }
    
    void numberobj_17_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_17_value;
    }
    
    void numberobj_17_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_17_value_set(preset["value"]);
    }
    
    void numberobj_18_init() {
        this->numberobj_18_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Post-EQ~/number_obj-26"), 1, this->_currentTime);
    }
    
    void numberobj_18_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_18_value;
    }
    
    void numberobj_18_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_18_value_set(preset["value"]);
    }
    
    void numberobj_19_init() {
        this->numberobj_19_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Post-EQ~/number_obj-30"), 1, this->_currentTime);
    }
    
    void numberobj_19_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_19_value;
    }
    
    void numberobj_19_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_19_value_set(preset["value"]);
    }
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        p_01_target = 0;
        p_02_target = 0;
        p_03_target = 0;
        pak_01_in1 = 100;
        pak_01_in2 = 0;
        pak_01_in3 = 0.7;
        numberobj_10_value = 0;
        numberobj_10_value_setter(numberobj_10_value);
        scale_01_inlow = -100;
        scale_01_inhigh = 100;
        scale_01_outlow = -18;
        scale_01_outhigh = 18;
        scale_01_power = 1;
        numberobj_11_value = 0;
        numberobj_11_value_setter(numberobj_11_value);
        scale_02_inlow = -100;
        scale_02_inhigh = 100;
        scale_02_outlow = 0.5;
        scale_02_outhigh = 1;
        scale_02_power = 1;
        numberobj_12_value = 0;
        numberobj_12_value_setter(numberobj_12_value);
        numberobj_13_value = 0;
        numberobj_13_value_setter(numberobj_13_value);
        scale_03_inlow = -100;
        scale_03_inhigh = 100;
        scale_03_outlow = 500;
        scale_03_outhigh = 2000;
        scale_03_power = 1.585;
        numberobj_14_value = 0;
        numberobj_14_value_setter(numberobj_14_value);
        pak_02_in1 = 1000;
        pak_02_in2 = 0;
        pak_02_in3 = 0.7;
        numberobj_15_value = 0;
        numberobj_15_value_setter(numberobj_15_value);
        scale_04_inlow = -100;
        scale_04_inhigh = 100;
        scale_04_outlow = -18;
        scale_04_outhigh = 18;
        scale_04_power = 1;
        numberobj_16_value = 0;
        numberobj_16_value_setter(numberobj_16_value);
        scale_05_inlow = -100;
        scale_05_inhigh = 100;
        scale_05_outlow = 0.5;
        scale_05_outhigh = 1;
        scale_05_power = 1;
        numberobj_17_value = 0;
        numberobj_17_value_setter(numberobj_17_value);
        pak_03_in1 = 3300;
        pak_03_in2 = 0;
        pak_03_in3 = 0.7;
        numberobj_18_value = 0;
        numberobj_18_value_setter(numberobj_18_value);
        scale_06_inlow = -100;
        scale_06_inhigh = 100;
        scale_06_outlow = -18;
        scale_06_outhigh = 18;
        scale_06_power = 1;
        numberobj_19_value = 0;
        numberobj_19_value_setter(numberobj_19_value);
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        signals[0] = nullptr;
        signals[1] = nullptr;
        signals[2] = nullptr;
        signals[3] = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        numberobj_10_currentFormat = 6;
        numberobj_10_lastValue = 0;
        numberobj_11_currentFormat = 6;
        numberobj_11_lastValue = 0;
        numberobj_12_currentFormat = 6;
        numberobj_12_lastValue = 0;
        numberobj_13_currentFormat = 6;
        numberobj_13_lastValue = 0;
        numberobj_14_currentFormat = 6;
        numberobj_14_lastValue = 0;
        numberobj_15_currentFormat = 6;
        numberobj_15_lastValue = 0;
        numberobj_16_currentFormat = 6;
        numberobj_16_lastValue = 0;
        numberobj_17_currentFormat = 6;
        numberobj_17_lastValue = 0;
        numberobj_18_currentFormat = 6;
        numberobj_18_lastValue = 0;
        numberobj_19_currentFormat = 6;
        numberobj_19_lastValue = 0;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 1;
        parameterOffset = 0;
    }
    
    // member variables
    
        number p_01_target;
        number p_02_target;
        number p_03_target;
        number pak_01_in1;
        number pak_01_in2;
        number pak_01_in3;
        number numberobj_10_value;
        list scale_01_input;
        number scale_01_inlow;
        number scale_01_inhigh;
        number scale_01_outlow;
        number scale_01_outhigh;
        number scale_01_power;
        list scale_01_out;
        number numberobj_11_value;
        list scale_02_input;
        number scale_02_inlow;
        number scale_02_inhigh;
        number scale_02_outlow;
        number scale_02_outhigh;
        number scale_02_power;
        list scale_02_out;
        number numberobj_12_value;
        number numberobj_13_value;
        list scale_03_input;
        number scale_03_inlow;
        number scale_03_inhigh;
        number scale_03_outlow;
        number scale_03_outhigh;
        number scale_03_power;
        list scale_03_out;
        number numberobj_14_value;
        number pak_02_in1;
        number pak_02_in2;
        number pak_02_in3;
        number numberobj_15_value;
        list scale_04_input;
        number scale_04_inlow;
        number scale_04_inhigh;
        number scale_04_outlow;
        number scale_04_outhigh;
        number scale_04_power;
        list scale_04_out;
        number numberobj_16_value;
        list scale_05_input;
        number scale_05_inlow;
        number scale_05_inhigh;
        number scale_05_outlow;
        number scale_05_outhigh;
        number scale_05_power;
        list scale_05_out;
        number numberobj_17_value;
        number pak_03_in1;
        number pak_03_in2;
        number pak_03_in3;
        number numberobj_18_value;
        list scale_06_input;
        number scale_06_inlow;
        number scale_06_inhigh;
        number scale_06_outlow;
        number scale_06_outhigh;
        number scale_06_power;
        list scale_06_out;
        number numberobj_19_value;
        MillisecondTime _currentTime;
        UInt64 audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        SampleValue * signals[4];
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        Int numberobj_10_currentFormat;
        number numberobj_10_lastValue;
        Int numberobj_11_currentFormat;
        number numberobj_11_lastValue;
        Int numberobj_12_currentFormat;
        number numberobj_12_lastValue;
        Int numberobj_13_currentFormat;
        number numberobj_13_lastValue;
        Int numberobj_14_currentFormat;
        number numberobj_14_lastValue;
        Int numberobj_15_currentFormat;
        number numberobj_15_lastValue;
        Int numberobj_16_currentFormat;
        number numberobj_16_lastValue;
        Int numberobj_17_currentFormat;
        number numberobj_17_lastValue;
        Int numberobj_18_currentFormat;
        number numberobj_18_lastValue;
        Int numberobj_19_currentFormat;
        number numberobj_19_lastValue;
        number stackprotect_count;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
        RNBOSubpatcher_791* p_01;
        RNBOSubpatcher_792* p_02;
        RNBOSubpatcher_793* p_03;
    
};

class RNBOSubpatcher_805 : public PatcherInterfaceImpl {
    
    friend class drone;
    
    public:
    
    RNBOSubpatcher_805()
    {
    }
    
    ~RNBOSubpatcher_805()
    {
    }
    
    virtual drone* getPatcher() const {
        return static_cast<drone *>(_parentPatcher);
    }
    
    drone* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
        getEngine()->flushClockEvents(this, -281953904, false);
        getEngine()->flushClockEvents(this, 2098551528, false);
        getEngine()->flushClockEvents(this, -1494586265, false);
    }
    
    number samplerate() const {
        return this->sr;
    }
    
    SampleIndex currentsampletime() {
        return this->audioProcessSampleCount + this->sampleOffsetIntoNextAudioBuffer;
    }
    
    number mstosamps(MillisecondTime ms) {
        return ms * this->sr * 0.001;
    }
    
    inline number safediv(number num, number denom) {
        return (denom == 0.0 ? 0.0 : num / denom);
    }
    
    number safepow(number base, number exponent) {
        return fixnan(rnbo_pow(base, exponent));
    }
    
    number scale(
        number x,
        number lowin,
        number hiin,
        number lowout,
        number highout,
        number pow
    ) {
        auto inscale = this->safediv(1., hiin - lowin);
        number outdiff = highout - lowout;
        number value = (x - lowin) * inscale;
    
        if (pow != 1) {
            if (value > 0)
                value = this->safepow(value, pow);
            else
                value = -this->safepow(-value, pow);
        }
    
        value = value * outdiff + lowout;
        return value;
    }
    
    Index getNumMidiInputPorts() const {
        return 0;
    }
    
    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        const SampleValue * const* inputs,
        Index numInputs,
        SampleValue * const* outputs,
        Index numOutputs,
        Index n
    ) {
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
        SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
        SampleValue * out3 = (numOutputs >= 3 && outputs[2] ? outputs[2] : this->dummyBuffer);
        const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
        const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
    
        this->cycle_tilde_01_perform(
            this->cycle_tilde_01_frequency,
            this->cycle_tilde_01_phase_offset,
            this->signals[0],
            this->dummyBuffer,
            n
        );
    
        this->linetilde_10_perform(this->signals[1], n);
        this->dspexpr_10_perform(this->signals[1], this->signals[2], n);
    
        this->scale_tilde_01_perform(
            this->signals[2],
            this->scale_tilde_01_lowin,
            this->scale_tilde_01_hiin,
            this->scale_tilde_01_lowout,
            this->scale_tilde_01_highout,
            this->scale_tilde_01_pow,
            this->signals[3],
            n
        );
    
        this->numbertilde_01_perform(this->signals[3], this->dummyBuffer, n);
        this->numbertilde_02_perform(this->signals[2], this->dummyBuffer, n);
        this->dspexpr_06_perform(in2, this->signals[1], this->signals[2], n);
        this->dspexpr_05_perform(this->signals[2], this->signals[4], n);
        this->dspexpr_04_perform(this->signals[4], this->signals[3], out2, n);
        this->dspexpr_08_perform(this->signals[0], this->signals[1], this->signals[4], n);
        this->dspexpr_09_perform(this->signals[4], this->signals[0], n);
        this->dspexpr_07_perform(this->signals[0], this->signals[3], this->dummyBuffer, n);
        this->signalforwarder_01_perform(this->signals[0], out3, n);
        this->dspexpr_03_perform(in1, this->signals[1], this->signals[0], n);
        this->dspexpr_02_perform(this->signals[0], this->signals[1], n);
        this->dspexpr_01_perform(this->signals[1], this->signals[3], out1, n);
        this->stackprotect_perform(n);
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            Index i;
    
            for (i = 0; i < 5; i++) {
                this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
            }
    
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        this->cycle_tilde_01_dspsetup(forceDSPSetup);
        this->numbertilde_01_dspsetup(forceDSPSetup);
        this->numbertilde_02_dspsetup(forceDSPSetup);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            {
            this->setProbingIndex(-1);
            break;
            }
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    void onSampleRateChanged(double ) {}
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {}
    
    void getPreset(PatcherStateInterface& ) {}
    
    void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
        this->setParameterValue(index, this->getParameterValue(index), time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        default:
            {
            return 0;
            }
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 0;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 0;
    }
    
    ParameterIndex getNumParameters() const {
        return 0;
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        default:
            {
            return "bogus";
            }
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        default:
            {
            return "bogus";
            }
        }
    }
    
    void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
        RNBO_UNUSED(hasValue);
        this->updateTime(time);
    
        switch (index) {
        case -281953904:
            {
            this->linetilde_10_target_bang();
            break;
            }
        case 2098551528:
            {
            this->numbertilde_01_value_set(value);
            break;
            }
        case -1494586265:
            {
            this->numbertilde_02_value_set(value);
            break;
            }
        }
    }
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("valin"):
            {
            if (TAG("Drive~/number_obj-47") == objectId)
                this->numberobj_20_valin_set(payload);
    
            if (TAG("Drive~/number_obj-41") == objectId)
                this->numberobj_21_valin_set(payload);
    
            if (TAG("Drive~/number_obj-52") == objectId)
                this->numberobj_22_valin_set(payload);
    
            break;
            }
        case TAG("format"):
            {
            if (TAG("Drive~/number_obj-47") == objectId)
                this->numberobj_20_format_set(payload);
    
            if (TAG("Drive~/number_obj-41") == objectId)
                this->numberobj_21_format_set(payload);
    
            if (TAG("Drive~/number_obj-52") == objectId)
                this->numberobj_22_format_set(payload);
    
            break;
            }
        case TAG("sig"):
            {
            if (TAG("Drive~/number~_obj-1") == objectId)
                this->numbertilde_01_sig_number_set(payload);
    
            if (TAG("Drive~/number~_obj-23") == objectId)
                this->numbertilde_02_sig_number_set(payload);
    
            break;
            }
        case TAG("mode"):
            {
            if (TAG("Drive~/number~_obj-1") == objectId)
                this->numbertilde_01_mode_set(payload);
    
            if (TAG("Drive~/number~_obj-23") == objectId)
                this->numbertilde_02_mode_set(payload);
    
            break;
            }
        }
    }
    
    void processListMessage(
        MessageTag tag,
        MessageTag objectId,
        MillisecondTime time,
        const list& payload
    ) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("sig"):
            {
            if (TAG("Drive~/number~_obj-1") == objectId)
                this->numbertilde_01_sig_list_set(payload);
    
            if (TAG("Drive~/number~_obj-23") == objectId)
                this->numbertilde_02_sig_list_set(payload);
    
            break;
            }
        }
    }
    
    void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
        case TAG("valout"):
            {
            return "valout";
            }
        case TAG("Drive~/number_obj-47"):
            {
            return "Drive~/number_obj-47";
            }
        case TAG("setup"):
            {
            return "setup";
            }
        case TAG("Drive~/number_obj-41"):
            {
            return "Drive~/number_obj-41";
            }
        case TAG("monitor"):
            {
            return "monitor";
            }
        case TAG("Drive~/number~_obj-1"):
            {
            return "Drive~/number~_obj-1";
            }
        case TAG("assign"):
            {
            return "assign";
            }
        case TAG("Drive~/number~_obj-23"):
            {
            return "Drive~/number~_obj-23";
            }
        case TAG("Drive~/number_obj-52"):
            {
            return "Drive~/number_obj-52";
            }
        case TAG("valin"):
            {
            return "valin";
            }
        case TAG("format"):
            {
            return "format";
            }
        case TAG("sig"):
            {
            return "sig";
            }
        case TAG("mode"):
            {
            return "mode";
            }
        }
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        default:
            {
            return nullptr;
            }
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 0;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
        this->updateTime(time);
    
        if (index == 0) {
            this->cycle_tilde_01_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultSinus);
            this->cycle_tilde_01_bufferUpdated();
        }
    }
    
    void initialize() {
        this->assign_defaults();
        this->setState();
        this->cycle_tilde_01_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultSinus);
    }
    
    protected:
    
    void numberobj_20_valin_set(number v) {
        this->numberobj_20_value_set(v);
    }
    
    void numberobj_20_format_set(number v) {
        this->numberobj_20_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_21_valin_set(number v) {
        this->numberobj_21_value_set(v);
    }
    
    void numberobj_21_format_set(number v) {
        this->numberobj_21_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numbertilde_01_sig_number_set(number v) {
        this->numbertilde_01_outValue = v;
    }
    
    void numbertilde_01_sig_list_set(const list& v) {
        this->numbertilde_01_outValue = v[0];
    }
    
    void numbertilde_01_mode_set(number v) {
        if (v == 1) {
            this->numbertilde_01_currentMode = 0;
        } else if (v == 2) {
            this->numbertilde_01_currentMode = 1;
        }
    }
    
    void eventinlet_08_out1_bang_bang() {
        this->numberobj_21_value_bang();
    }
    
    void eventinlet_08_out1_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_21_value_set(converted);
        }
    }
    
    void numbertilde_02_sig_number_set(number v) {
        this->numbertilde_02_outValue = v;
    }
    
    void numbertilde_02_sig_list_set(const list& v) {
        this->numbertilde_02_outValue = v[0];
    }
    
    void numbertilde_02_mode_set(number v) {
        if (v == 1) {
            this->numbertilde_02_currentMode = 0;
        } else if (v == 2) {
            this->numbertilde_02_currentMode = 1;
        }
    }
    
    void numberobj_22_valin_set(number v) {
        this->numberobj_22_value_set(v);
    }
    
    void numberobj_22_format_set(number v) {
        this->numberobj_22_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void linetilde_10_target_bang() {}
    
    void numbertilde_01_value_set(number v) {
        this->expr_04_in1_set(v);
    }
    
    void numbertilde_02_value_set(number ) {}
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 2;
    }
    
    Index getNumOutputChannels() const {
        return 3;
    }
    
    void initializeObjects() {
        this->numberobj_20_init();
        this->numberobj_21_init();
        this->numbertilde_01_init();
        this->numbertilde_02_init();
        this->numberobj_22_init();
    }
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {}
    
    void allocateDataRefs() {
        this->cycle_tilde_01_buffer->requestSize(16384, 1);
        this->cycle_tilde_01_buffer->setSampleRate(this->sr);
        this->cycle_tilde_01_buffer = this->cycle_tilde_01_buffer->allocateIfNeeded();
    }
    
    void linetilde_10_time_set(number v) {
        this->linetilde_10_time = v;
    }
    
    void linetilde_10_segments_set(const list& v) {
        this->linetilde_10_segments = jsCreateListCopy(v);
    
        if ((bool)(v->length)) {
            if (v->length == 1 && this->linetilde_10_time == 0) {
                this->linetilde_10_activeRamps->length = 0;
                this->linetilde_10_currentValue = v[0];
            } else {
                auto currentTime = this->currentsampletime();
                number lastRampValue = this->linetilde_10_currentValue;
                number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
    
                for (Index i = 0; i < this->linetilde_10_activeRamps->length; i += 3) {
                    rampEnd = this->linetilde_10_activeRamps[(Index)(i + 2)];
    
                    if (rampEnd > currentTime) {
                        this->linetilde_10_activeRamps[(Index)(i + 2)] = currentTime;
                        number diff = rampEnd - currentTime;
                        number valueDiff = diff * this->linetilde_10_activeRamps[(Index)(i + 1)];
                        lastRampValue = this->linetilde_10_activeRamps[(Index)i] - valueDiff;
                        this->linetilde_10_activeRamps[(Index)i] = lastRampValue;
                        this->linetilde_10_activeRamps->length = i + 3;
                        rampEnd = currentTime;
                    } else {
                        lastRampValue = this->linetilde_10_activeRamps[(Index)i];
                    }
                }
    
                if (rampEnd < currentTime) {
                    this->linetilde_10_activeRamps->push(lastRampValue);
                    this->linetilde_10_activeRamps->push(0);
                    this->linetilde_10_activeRamps->push(currentTime);
                }
    
                number lastRampEnd = currentTime;
    
                for (Index i = 0; i < v->length; i += 2) {
                    number destinationValue = v[(Index)i];
                    number inc = 0;
                    number rampTimeInSamples;
    
                    if (v->length > i + 1) {
                        rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
    
                        if ((bool)(this->linetilde_10_keepramp)) {
                            this->linetilde_10_time_set(v[(Index)(i + 1)]);
                        }
                    } else {
                        rampTimeInSamples = this->mstosamps(this->linetilde_10_time);
                    }
    
                    if (rampTimeInSamples <= 0) {
                        rampTimeInSamples = 1;
                    }
    
                    inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                    lastRampEnd += rampTimeInSamples;
                    this->linetilde_10_activeRamps->push(destinationValue);
                    this->linetilde_10_activeRamps->push(inc);
                    this->linetilde_10_activeRamps->push(lastRampEnd);
                    lastRampValue = destinationValue;
                }
            }
        }
    }
    
    void numberobj_20_output_set(number v) {
        {
            list converted = {v};
            this->linetilde_10_segments_set(converted);
        }
    }
    
    void numberobj_20_value_set(number v) {
        this->numberobj_20_value_setter(v);
        v = this->numberobj_20_value;
        number localvalue = v;
    
        if (this->numberobj_20_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Drive~/number_obj-47"), localvalue, this->_currentTime);
        this->numberobj_20_output_set(localvalue);
    }
    
    void scale_07_out_set(const list& v) {
        this->scale_07_out = jsCreateListCopy(v);
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_20_value_set(converted);
        }
    }
    
    void scale_07_input_set(const list& v) {
        this->scale_07_input = jsCreateListCopy(v);
        list tmp = {};
    
        for (Index i = 0; i < v->length; i++) {
            tmp->push(this->scale(
                v[(Index)i],
                this->scale_07_inlow,
                this->scale_07_inhigh,
                this->scale_07_outlow,
                this->scale_07_outhigh,
                this->scale_07_power
            ));
        }
    
        this->scale_07_out_set(tmp);
    }
    
    void numberobj_21_output_set(number v) {
        {
            list converted = {v};
            this->scale_07_input_set(converted);
        }
    }
    
    void numberobj_21_value_set(number v) {
        this->numberobj_21_value_setter(v);
        v = this->numberobj_21_value;
        number localvalue = v;
    
        if (this->numberobj_21_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Drive~/number_obj-41"), localvalue, this->_currentTime);
        this->numberobj_21_output_set(localvalue);
    }
    
    void eventinlet_08_out1_number_set(number v) {
        this->numberobj_21_value_set(v);
    }
    
    void numberobj_21_value_bang() {
        number v = this->numberobj_21_value;
        number localvalue = v;
    
        if (this->numberobj_21_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Drive~/number_obj-41"), localvalue, this->_currentTime);
        this->numberobj_21_output_set(localvalue);
    }
    
    void numberobj_22_output_set(number ) {}
    
    void numberobj_22_value_set(number v) {
        this->numberobj_22_value_setter(v);
        v = this->numberobj_22_value;
        number localvalue = v;
    
        if (this->numberobj_22_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Drive~/number_obj-52"), localvalue, this->_currentTime);
        this->numberobj_22_output_set(localvalue);
    }
    
    void cycle_tilde_01_perform(
        number frequency,
        number phase_offset,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        RNBO_UNUSED(phase_offset);
        RNBO_UNUSED(frequency);
        auto __cycle_tilde_01_f2i = this->cycle_tilde_01_f2i;
        auto __cycle_tilde_01_buffer = this->cycle_tilde_01_buffer;
        auto __cycle_tilde_01_phasei = this->cycle_tilde_01_phasei;
        Index i;
    
        for (i = 0; i < n; i++) {
            {
                uint32_t uint_phase;
    
                {
                    {
                        uint_phase = __cycle_tilde_01_phasei;
                    }
                }
    
                uint32_t idx = (uint32_t)(uint32_rshift(uint_phase, 18));
                number frac = ((BinOpInt)((BinOpInt)uint_phase & (BinOpInt)262143)) * 3.81471181759574e-6;
                number y0 = __cycle_tilde_01_buffer[(Index)idx];
                number y1 = __cycle_tilde_01_buffer[(Index)((BinOpInt)(idx + 1) & (BinOpInt)16383)];
                number y = y0 + frac * (y1 - y0);
    
                {
                    uint32_t pincr = (uint32_t)(uint32_trunc(10 * __cycle_tilde_01_f2i));
                    __cycle_tilde_01_phasei = uint32_add(__cycle_tilde_01_phasei, pincr);
                }
    
                out1[(Index)i] = y;
                out2[(Index)i] = uint_phase * 0.232830643653869629e-9;
                continue;
            }
        }
    
        this->cycle_tilde_01_phasei = __cycle_tilde_01_phasei;
    }
    
    void linetilde_10_perform(SampleValue * out, Index n) {
        auto __linetilde_10_time = this->linetilde_10_time;
        auto __linetilde_10_keepramp = this->linetilde_10_keepramp;
        auto __linetilde_10_currentValue = this->linetilde_10_currentValue;
        Index i = 0;
    
        if ((bool)(this->linetilde_10_activeRamps->length)) {
            while ((bool)(this->linetilde_10_activeRamps->length) && i < n) {
                number destinationValue = this->linetilde_10_activeRamps[0];
                number inc = this->linetilde_10_activeRamps[1];
                number rampTimeInSamples = this->linetilde_10_activeRamps[2] - this->audioProcessSampleCount - i;
                number val = __linetilde_10_currentValue;
    
                while (rampTimeInSamples > 0 && i < n) {
                    out[(Index)i] = val;
                    val += inc;
                    i++;
                    rampTimeInSamples--;
                }
    
                if (rampTimeInSamples <= 0) {
                    val = destinationValue;
                    this->linetilde_10_activeRamps->splice(0, 3);
    
                    if ((bool)(!(bool)(this->linetilde_10_activeRamps->length))) {
                        this->getEngine()->scheduleClockEventWithValue(
                            this,
                            -281953904,
                            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                            0
                        );;
    
                        if ((bool)(!(bool)(__linetilde_10_keepramp))) {
                            __linetilde_10_time = 0;
                        }
                    }
                }
    
                __linetilde_10_currentValue = val;
            }
        }
    
        while (i < n) {
            out[(Index)i] = __linetilde_10_currentValue;
            i++;
        }
    
        this->linetilde_10_currentValue = __linetilde_10_currentValue;
        this->linetilde_10_time = __linetilde_10_time;
    }
    
    void dspexpr_10_perform(const Sample * in1, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = rnbo_atan(in1[(Index)i]);//#map:_###_obj_###_:1
        }
    }
    
    void scale_tilde_01_perform(
        const Sample * x,
        number lowin,
        number hiin,
        number lowout,
        number highout,
        number pow,
        SampleValue * out1,
        Index n
    ) {
        RNBO_UNUSED(pow);
        RNBO_UNUSED(highout);
        RNBO_UNUSED(lowout);
        RNBO_UNUSED(hiin);
        RNBO_UNUSED(lowin);
        auto inscale = this->safediv(1., 1.57 - 0.785);
        number outdiff = 0.18 - 1;
        Index i;
    
        for (i = 0; i < n; i++) {
            number value = (x[(Index)i] - 0.785) * inscale;
            value = value * outdiff + 1;
            out1[(Index)i] = value;
        }
    }
    
    void expr_04_out1_set(number v) {
        this->expr_04_out1 = v;
        this->numberobj_22_value_set(this->expr_04_out1);
    }
    
    void expr_04_in1_set(number in1) {
        this->expr_04_in1 = in1;
    
        this->expr_04_out1_set(
            (this->expr_04_in1 <= 0 ? -999 : 20 * rnbo_log10((this->expr_04_in1 <= 0.0000000001 ? 0.0000000001 : this->expr_04_in1)))
        );//#map:Drive~/atodb_obj-50:1
    }
    
    void numbertilde_01_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
        auto __numbertilde_01_currentIntervalInSamples = this->numbertilde_01_currentIntervalInSamples;
        auto __numbertilde_01_lastValue = this->numbertilde_01_lastValue;
        auto __numbertilde_01_currentInterval = this->numbertilde_01_currentInterval;
        auto __numbertilde_01_rampInSamples = this->numbertilde_01_rampInSamples;
        auto __numbertilde_01_outValue = this->numbertilde_01_outValue;
        auto __numbertilde_01_currentMode = this->numbertilde_01_currentMode;
        number monitorvalue = input_signal[0];
    
        for (Index i = 0; i < n; i++) {
            if (__numbertilde_01_currentMode == 0) {
                output[(Index)i] = this->numbertilde_01_smooth_next(
                    __numbertilde_01_outValue,
                    __numbertilde_01_rampInSamples,
                    __numbertilde_01_rampInSamples
                );
            } else {
                output[(Index)i] = input_signal[(Index)i];
            }
        }
    
        __numbertilde_01_currentInterval -= n;
    
        if (monitorvalue != __numbertilde_01_lastValue && __numbertilde_01_currentInterval <= 0) {
            __numbertilde_01_currentInterval = __numbertilde_01_currentIntervalInSamples;
    
            this->getEngine()->scheduleClockEventWithValue(
                this,
                2098551528,
                this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                monitorvalue
            );;
    
            __numbertilde_01_lastValue = monitorvalue;
    
            this->getEngine()->sendListMessage(
                TAG("monitor"),
                TAG("Drive~/number~_obj-1"),
                {monitorvalue},
                this->_currentTime
            );;
        }
    
        this->numbertilde_01_currentInterval = __numbertilde_01_currentInterval;
        this->numbertilde_01_lastValue = __numbertilde_01_lastValue;
    }
    
    void numbertilde_02_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
        auto __numbertilde_02_currentIntervalInSamples = this->numbertilde_02_currentIntervalInSamples;
        auto __numbertilde_02_lastValue = this->numbertilde_02_lastValue;
        auto __numbertilde_02_currentInterval = this->numbertilde_02_currentInterval;
        auto __numbertilde_02_rampInSamples = this->numbertilde_02_rampInSamples;
        auto __numbertilde_02_outValue = this->numbertilde_02_outValue;
        auto __numbertilde_02_currentMode = this->numbertilde_02_currentMode;
        number monitorvalue = input_signal[0];
    
        for (Index i = 0; i < n; i++) {
            if (__numbertilde_02_currentMode == 0) {
                output[(Index)i] = this->numbertilde_02_smooth_next(
                    __numbertilde_02_outValue,
                    __numbertilde_02_rampInSamples,
                    __numbertilde_02_rampInSamples
                );
            } else {
                output[(Index)i] = input_signal[(Index)i];
            }
        }
    
        __numbertilde_02_currentInterval -= n;
    
        if (monitorvalue != __numbertilde_02_lastValue && __numbertilde_02_currentInterval <= 0) {
            __numbertilde_02_currentInterval = __numbertilde_02_currentIntervalInSamples;
    
            this->getEngine()->scheduleClockEventWithValue(
                this,
                -1494586265,
                this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                monitorvalue
            );;
    
            __numbertilde_02_lastValue = monitorvalue;
    
            this->getEngine()->sendListMessage(
                TAG("monitor"),
                TAG("Drive~/number~_obj-23"),
                {monitorvalue},
                this->_currentTime
            );;
        }
    
        this->numbertilde_02_currentInterval = __numbertilde_02_currentInterval;
        this->numbertilde_02_lastValue = __numbertilde_02_lastValue;
    }
    
    void dspexpr_06_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
        }
    }
    
    void dspexpr_05_perform(const Sample * in1, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = rnbo_atan(in1[(Index)i]);//#map:_###_obj_###_:1
        }
    }
    
    void dspexpr_04_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
        }
    }
    
    void dspexpr_08_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
        }
    }
    
    void dspexpr_09_perform(const Sample * in1, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = rnbo_atan(in1[(Index)i]);//#map:_###_obj_###_:1
        }
    }
    
    void dspexpr_07_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
        }
    }
    
    void signalforwarder_01_perform(const SampleValue * input, SampleValue * output, Index n) {
        for (Index i = 0; i < n; i++) {
            output[(Index)i] = input[(Index)i];
        }
    }
    
    void dspexpr_03_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
        }
    }
    
    void dspexpr_02_perform(const Sample * in1, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = rnbo_atan(in1[(Index)i]);//#map:_###_obj_###_:1
        }
    }
    
    void dspexpr_01_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
        }
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    void numberobj_20_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_20_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_20_value = localvalue;
    }
    
    void numberobj_21_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_21_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_21_value = localvalue;
    }
    
    void numberobj_22_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_22_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_22_value = localvalue;
    }
    
    number cycle_tilde_01_ph_next(number freq, number reset) {
        {
            {
                if (reset >= 0.)
                    this->cycle_tilde_01_ph_currentPhase = reset;
            }
        }
    
        number pincr = freq * this->cycle_tilde_01_ph_conv;
    
        if (this->cycle_tilde_01_ph_currentPhase < 0.)
            this->cycle_tilde_01_ph_currentPhase = 1. + this->cycle_tilde_01_ph_currentPhase;
    
        if (this->cycle_tilde_01_ph_currentPhase > 1.)
            this->cycle_tilde_01_ph_currentPhase = this->cycle_tilde_01_ph_currentPhase - 1.;
    
        number tmp = this->cycle_tilde_01_ph_currentPhase;
        this->cycle_tilde_01_ph_currentPhase += pincr;
        return tmp;
    }
    
    void cycle_tilde_01_ph_reset() {
        this->cycle_tilde_01_ph_currentPhase = 0;
    }
    
    void cycle_tilde_01_ph_dspsetup() {
        this->cycle_tilde_01_ph_conv = (number)1 / this->sr;
    }
    
    void cycle_tilde_01_dspsetup(bool force) {
        if ((bool)(this->cycle_tilde_01_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->cycle_tilde_01_phasei = 0;
        this->cycle_tilde_01_f2i = (number)4294967296 / this->samplerate();
        this->cycle_tilde_01_wrap = (long)(this->cycle_tilde_01_buffer->getSize()) - 1;
        this->cycle_tilde_01_setupDone = true;
        this->cycle_tilde_01_ph_dspsetup();
    }
    
    void cycle_tilde_01_bufferUpdated() {
        this->cycle_tilde_01_wrap = (long)(this->cycle_tilde_01_buffer->getSize()) - 1;
    }
    
    void numberobj_20_init() {
        this->numberobj_20_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Drive~/number_obj-47"), 1, this->_currentTime);
    }
    
    void numberobj_20_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_20_value;
    }
    
    void numberobj_20_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_20_value_set(preset["value"]);
    }
    
    void numberobj_21_init() {
        this->numberobj_21_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Drive~/number_obj-41"), 1, this->_currentTime);
    }
    
    void numberobj_21_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_21_value;
    }
    
    void numberobj_21_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_21_value_set(preset["value"]);
    }
    
    number numbertilde_01_smooth_d_next(number x) {
        number temp = (number)(x - this->numbertilde_01_smooth_d_prev);
        this->numbertilde_01_smooth_d_prev = x;
        return temp;
    }
    
    void numbertilde_01_smooth_d_dspsetup() {
        this->numbertilde_01_smooth_d_reset();
    }
    
    void numbertilde_01_smooth_d_reset() {
        this->numbertilde_01_smooth_d_prev = 0;
    }
    
    number numbertilde_01_smooth_next(number x, number up, number down) {
        if (this->numbertilde_01_smooth_d_next(x) != 0.) {
            if (x > this->numbertilde_01_smooth_prev) {
                number _up = up;
    
                if (_up < 1)
                    _up = 1;
    
                this->numbertilde_01_smooth_index = _up;
                this->numbertilde_01_smooth_increment = (x - this->numbertilde_01_smooth_prev) / _up;
            } else if (x < this->numbertilde_01_smooth_prev) {
                number _down = down;
    
                if (_down < 1)
                    _down = 1;
    
                this->numbertilde_01_smooth_index = _down;
                this->numbertilde_01_smooth_increment = (x - this->numbertilde_01_smooth_prev) / _down;
            }
        }
    
        if (this->numbertilde_01_smooth_index > 0) {
            this->numbertilde_01_smooth_prev += this->numbertilde_01_smooth_increment;
            this->numbertilde_01_smooth_index -= 1;
        } else {
            this->numbertilde_01_smooth_prev = x;
        }
    
        return this->numbertilde_01_smooth_prev;
    }
    
    void numbertilde_01_smooth_reset() {
        this->numbertilde_01_smooth_prev = 0;
        this->numbertilde_01_smooth_index = 0;
        this->numbertilde_01_smooth_increment = 0;
        this->numbertilde_01_smooth_d_reset();
    }
    
    void numbertilde_01_init() {
        this->numbertilde_01_currentMode = 1;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Drive~/number~_obj-1"), 1, this->_currentTime);
    }
    
    void numbertilde_01_dspsetup(bool force) {
        if ((bool)(this->numbertilde_01_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->numbertilde_01_currentIntervalInSamples = this->mstosamps(100);
        this->numbertilde_01_currentInterval = this->numbertilde_01_currentIntervalInSamples;
        this->numbertilde_01_rampInSamples = this->mstosamps(this->numbertilde_01_ramp);
        this->numbertilde_01_setupDone = true;
        this->numbertilde_01_smooth_d_dspsetup();
    }
    
    number numbertilde_02_smooth_d_next(number x) {
        number temp = (number)(x - this->numbertilde_02_smooth_d_prev);
        this->numbertilde_02_smooth_d_prev = x;
        return temp;
    }
    
    void numbertilde_02_smooth_d_dspsetup() {
        this->numbertilde_02_smooth_d_reset();
    }
    
    void numbertilde_02_smooth_d_reset() {
        this->numbertilde_02_smooth_d_prev = 0;
    }
    
    number numbertilde_02_smooth_next(number x, number up, number down) {
        if (this->numbertilde_02_smooth_d_next(x) != 0.) {
            if (x > this->numbertilde_02_smooth_prev) {
                number _up = up;
    
                if (_up < 1)
                    _up = 1;
    
                this->numbertilde_02_smooth_index = _up;
                this->numbertilde_02_smooth_increment = (x - this->numbertilde_02_smooth_prev) / _up;
            } else if (x < this->numbertilde_02_smooth_prev) {
                number _down = down;
    
                if (_down < 1)
                    _down = 1;
    
                this->numbertilde_02_smooth_index = _down;
                this->numbertilde_02_smooth_increment = (x - this->numbertilde_02_smooth_prev) / _down;
            }
        }
    
        if (this->numbertilde_02_smooth_index > 0) {
            this->numbertilde_02_smooth_prev += this->numbertilde_02_smooth_increment;
            this->numbertilde_02_smooth_index -= 1;
        } else {
            this->numbertilde_02_smooth_prev = x;
        }
    
        return this->numbertilde_02_smooth_prev;
    }
    
    void numbertilde_02_smooth_reset() {
        this->numbertilde_02_smooth_prev = 0;
        this->numbertilde_02_smooth_index = 0;
        this->numbertilde_02_smooth_increment = 0;
        this->numbertilde_02_smooth_d_reset();
    }
    
    void numbertilde_02_init() {
        this->numbertilde_02_currentMode = 1;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Drive~/number~_obj-23"), 1, this->_currentTime);
    }
    
    void numbertilde_02_dspsetup(bool force) {
        if ((bool)(this->numbertilde_02_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->numbertilde_02_currentIntervalInSamples = this->mstosamps(100);
        this->numbertilde_02_currentInterval = this->numbertilde_02_currentIntervalInSamples;
        this->numbertilde_02_rampInSamples = this->mstosamps(this->numbertilde_02_ramp);
        this->numbertilde_02_setupDone = true;
        this->numbertilde_02_smooth_d_dspsetup();
    }
    
    void numberobj_22_init() {
        this->numberobj_22_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Drive~/number_obj-52"), 1, this->_currentTime);
    }
    
    void numberobj_22_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_22_value;
    }
    
    void numberobj_22_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_22_value_set(preset["value"]);
    }
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        dspexpr_01_in1 = 0;
        dspexpr_01_in2 = 0;
        dspexpr_02_in1 = 0;
        dspexpr_03_in1 = 0;
        dspexpr_03_in2 = 0;
        dspexpr_04_in1 = 0;
        dspexpr_04_in2 = 0;
        dspexpr_05_in1 = 0;
        dspexpr_06_in1 = 0;
        dspexpr_06_in2 = 0;
        dspexpr_07_in1 = 0;
        dspexpr_07_in2 = 0;
        cycle_tilde_01_frequency = 10;
        cycle_tilde_01_phase_offset = 0;
        dspexpr_08_in1 = 0;
        dspexpr_08_in2 = 0;
        dspexpr_09_in1 = 0;
        linetilde_10_time = 10;
        linetilde_10_keepramp = 0;
        numberobj_20_value = 0;
        numberobj_20_value_setter(numberobj_20_value);
        scale_07_inlow = 0;
        scale_07_inhigh = 100;
        scale_07_outlow = 1;
        scale_07_outhigh = 1256;
        scale_07_power = 3.664;
        numberobj_21_value = 0;
        numberobj_21_value_setter(numberobj_21_value);
        numbertilde_01_input_number = 0;
        numbertilde_01_ramp = 0;
        scale_tilde_01_x = 0;
        scale_tilde_01_lowin = 0.785;
        scale_tilde_01_hiin = 1.57;
        scale_tilde_01_lowout = 1;
        scale_tilde_01_highout = 0.18;
        scale_tilde_01_pow = 1;
        dspexpr_10_in1 = 0;
        numbertilde_02_input_number = 0;
        numbertilde_02_ramp = 0;
        numberobj_22_value = 0;
        numberobj_22_value_setter(numberobj_22_value);
        expr_04_in1 = 0;
        expr_04_out1 = 0;
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        signals[0] = nullptr;
        signals[1] = nullptr;
        signals[2] = nullptr;
        signals[3] = nullptr;
        signals[4] = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        cycle_tilde_01_wrap = 0;
        cycle_tilde_01_ph_currentPhase = 0;
        cycle_tilde_01_ph_conv = 0;
        cycle_tilde_01_setupDone = false;
        linetilde_10_currentValue = 0;
        numberobj_20_currentFormat = 6;
        numberobj_20_lastValue = 0;
        numberobj_21_currentFormat = 6;
        numberobj_21_lastValue = 0;
        numbertilde_01_currentInterval = 0;
        numbertilde_01_currentIntervalInSamples = 0;
        numbertilde_01_lastValue = 0;
        numbertilde_01_outValue = 0;
        numbertilde_01_rampInSamples = 0;
        numbertilde_01_currentMode = 0;
        numbertilde_01_smooth_d_prev = 0;
        numbertilde_01_smooth_prev = 0;
        numbertilde_01_smooth_index = 0;
        numbertilde_01_smooth_increment = 0;
        numbertilde_01_setupDone = false;
        numbertilde_02_currentInterval = 0;
        numbertilde_02_currentIntervalInSamples = 0;
        numbertilde_02_lastValue = 0;
        numbertilde_02_outValue = 0;
        numbertilde_02_rampInSamples = 0;
        numbertilde_02_currentMode = 0;
        numbertilde_02_smooth_d_prev = 0;
        numbertilde_02_smooth_prev = 0;
        numbertilde_02_smooth_index = 0;
        numbertilde_02_smooth_increment = 0;
        numbertilde_02_setupDone = false;
        numberobj_22_currentFormat = 6;
        numberobj_22_lastValue = 0;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 1;
        parameterOffset = 0;
    }
    
    // member variables
    
        number dspexpr_01_in1;
        number dspexpr_01_in2;
        number dspexpr_02_in1;
        number dspexpr_03_in1;
        number dspexpr_03_in2;
        number dspexpr_04_in1;
        number dspexpr_04_in2;
        number dspexpr_05_in1;
        number dspexpr_06_in1;
        number dspexpr_06_in2;
        number dspexpr_07_in1;
        number dspexpr_07_in2;
        number cycle_tilde_01_frequency;
        number cycle_tilde_01_phase_offset;
        number dspexpr_08_in1;
        number dspexpr_08_in2;
        number dspexpr_09_in1;
        list linetilde_10_segments;
        number linetilde_10_time;
        number linetilde_10_keepramp;
        number numberobj_20_value;
        list scale_07_input;
        number scale_07_inlow;
        number scale_07_inhigh;
        number scale_07_outlow;
        number scale_07_outhigh;
        number scale_07_power;
        list scale_07_out;
        number numberobj_21_value;
        number numbertilde_01_input_number;
        number numbertilde_01_ramp;
        number scale_tilde_01_x;
        number scale_tilde_01_lowin;
        number scale_tilde_01_hiin;
        number scale_tilde_01_lowout;
        number scale_tilde_01_highout;
        number scale_tilde_01_pow;
        number dspexpr_10_in1;
        number numbertilde_02_input_number;
        number numbertilde_02_ramp;
        number numberobj_22_value;
        number expr_04_in1;
        number expr_04_out1;
        MillisecondTime _currentTime;
        UInt64 audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        SampleValue * signals[5];
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        Float64BufferRef cycle_tilde_01_buffer;
        long cycle_tilde_01_wrap;
        uint32_t cycle_tilde_01_phasei;
        SampleValue cycle_tilde_01_f2i;
        number cycle_tilde_01_ph_currentPhase;
        number cycle_tilde_01_ph_conv;
        bool cycle_tilde_01_setupDone;
        list linetilde_10_activeRamps;
        number linetilde_10_currentValue;
        Int numberobj_20_currentFormat;
        number numberobj_20_lastValue;
        Int numberobj_21_currentFormat;
        number numberobj_21_lastValue;
        SampleIndex numbertilde_01_currentInterval;
        SampleIndex numbertilde_01_currentIntervalInSamples;
        number numbertilde_01_lastValue;
        number numbertilde_01_outValue;
        number numbertilde_01_rampInSamples;
        Int numbertilde_01_currentMode;
        number numbertilde_01_smooth_d_prev;
        number numbertilde_01_smooth_prev;
        number numbertilde_01_smooth_index;
        number numbertilde_01_smooth_increment;
        bool numbertilde_01_setupDone;
        SampleIndex numbertilde_02_currentInterval;
        SampleIndex numbertilde_02_currentIntervalInSamples;
        number numbertilde_02_lastValue;
        number numbertilde_02_outValue;
        number numbertilde_02_rampInSamples;
        Int numbertilde_02_currentMode;
        number numbertilde_02_smooth_d_prev;
        number numbertilde_02_smooth_prev;
        number numbertilde_02_smooth_index;
        number numbertilde_02_smooth_increment;
        bool numbertilde_02_setupDone;
        Int numberobj_22_currentFormat;
        number numberobj_22_lastValue;
        number stackprotect_count;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
    
};

class RNBOSubpatcher_806 : public PatcherInterfaceImpl {
    
    friend class drone;
    
    public:
    
    class RNBOSubpatcher_794 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_806;
            friend class drone;
            
            public:
            
            RNBOSubpatcher_794()
            {
            }
            
            ~RNBOSubpatcher_794()
            {
            }
            
            virtual RNBOSubpatcher_806* getPatcher() const {
                return static_cast<RNBOSubpatcher_806 *>(_parentPatcher);
            }
            
            drone* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            number samplerate() const {
                return this->sr;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
                const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
                const SampleValue * in3 = (numInputs >= 3 && inputs[2] ? inputs[2] : this->zeroBuffer);
                this->dspexpr_12_perform(in1, in2, this->signals[0], n);
            
                this->cycle_tilde_03_perform(
                    this->signals[0],
                    this->cycle_tilde_03_phase_offset,
                    this->signals[1],
                    this->dummyBuffer,
                    n
                );
            
                this->dspexpr_14_perform(this->signals[0], in3, this->signals[2], n);
                this->dspexpr_13_perform(this->signals[1], this->signals[2], this->signals[0], n);
                this->dspexpr_11_perform(in1, this->signals[0], this->signals[2], n);
                this->cycle_tilde_02_perform(this->signals[2], this->cycle_tilde_02_phase_offset, out1, out2, n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 3; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->cycle_tilde_03_dspsetup(forceDSPSetup);
                this->cycle_tilde_02_dspsetup(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->updateTime(time);
            
                if (index == 0) {
                    this->cycle_tilde_02_buffer = new Float64Buffer(this->getPatcher()->getPatcher()->RNBODefaultSinus);
                    this->cycle_tilde_02_bufferUpdated();
                    this->cycle_tilde_03_buffer = new Float64Buffer(this->getPatcher()->getPatcher()->RNBODefaultSinus);
                    this->cycle_tilde_03_bufferUpdated();
                }
            }
            
            void initialize() {
                this->assign_defaults();
                this->setState();
                this->cycle_tilde_02_buffer = new Float64Buffer(this->getPatcher()->getPatcher()->RNBODefaultSinus);
                this->cycle_tilde_03_buffer = new Float64Buffer(this->getPatcher()->getPatcher()->RNBODefaultSinus);
            }
            
            protected:
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 3;
            }
            
            Index getNumOutputChannels() const {
                return 2;
            }
            
            void initializeObjects() {}
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {
                this->cycle_tilde_02_buffer->requestSize(16384, 1);
                this->cycle_tilde_02_buffer->setSampleRate(this->sr);
                this->cycle_tilde_03_buffer->requestSize(16384, 1);
                this->cycle_tilde_03_buffer->setSampleRate(this->sr);
                this->cycle_tilde_02_buffer = this->cycle_tilde_02_buffer->allocateIfNeeded();
                this->cycle_tilde_03_buffer = this->cycle_tilde_03_buffer->allocateIfNeeded();
            }
            
            void dspexpr_12_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void cycle_tilde_03_perform(
                const Sample * frequency,
                number phase_offset,
                SampleValue * out1,
                SampleValue * out2,
                Index n
            ) {
                RNBO_UNUSED(phase_offset);
                auto __cycle_tilde_03_f2i = this->cycle_tilde_03_f2i;
                auto __cycle_tilde_03_buffer = this->cycle_tilde_03_buffer;
                auto __cycle_tilde_03_phasei = this->cycle_tilde_03_phasei;
                Index i;
            
                for (i = 0; i < n; i++) {
                    {
                        uint32_t uint_phase;
            
                        {
                            {
                                uint_phase = __cycle_tilde_03_phasei;
                            }
                        }
            
                        uint32_t idx = (uint32_t)(uint32_rshift(uint_phase, 18));
                        number frac = ((BinOpInt)((BinOpInt)uint_phase & (BinOpInt)262143)) * 3.81471181759574e-6;
                        number y0 = __cycle_tilde_03_buffer[(Index)idx];
                        number y1 = __cycle_tilde_03_buffer[(Index)((BinOpInt)(idx + 1) & (BinOpInt)16383)];
                        number y = y0 + frac * (y1 - y0);
            
                        {
                            uint32_t pincr = (uint32_t)(uint32_trunc(frequency[(Index)i] * __cycle_tilde_03_f2i));
                            __cycle_tilde_03_phasei = uint32_add(__cycle_tilde_03_phasei, pincr);
                        }
            
                        out1[(Index)i] = y;
                        out2[(Index)i] = uint_phase * 0.232830643653869629e-9;
                        continue;
                    }
                }
            
                this->cycle_tilde_03_phasei = __cycle_tilde_03_phasei;
            }
            
            void dspexpr_14_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_13_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_11_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] + in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void cycle_tilde_02_perform(
                const Sample * frequency,
                number phase_offset,
                SampleValue * out1,
                SampleValue * out2,
                Index n
            ) {
                RNBO_UNUSED(phase_offset);
                auto __cycle_tilde_02_f2i = this->cycle_tilde_02_f2i;
                auto __cycle_tilde_02_buffer = this->cycle_tilde_02_buffer;
                auto __cycle_tilde_02_phasei = this->cycle_tilde_02_phasei;
                Index i;
            
                for (i = 0; i < n; i++) {
                    {
                        uint32_t uint_phase;
            
                        {
                            {
                                uint_phase = __cycle_tilde_02_phasei;
                            }
                        }
            
                        uint32_t idx = (uint32_t)(uint32_rshift(uint_phase, 18));
                        number frac = ((BinOpInt)((BinOpInt)uint_phase & (BinOpInt)262143)) * 3.81471181759574e-6;
                        number y0 = __cycle_tilde_02_buffer[(Index)idx];
                        number y1 = __cycle_tilde_02_buffer[(Index)((BinOpInt)(idx + 1) & (BinOpInt)16383)];
                        number y = y0 + frac * (y1 - y0);
            
                        {
                            uint32_t pincr = (uint32_t)(uint32_trunc(frequency[(Index)i] * __cycle_tilde_02_f2i));
                            __cycle_tilde_02_phasei = uint32_add(__cycle_tilde_02_phasei, pincr);
                        }
            
                        out1[(Index)i] = y;
                        out2[(Index)i] = uint_phase * 0.232830643653869629e-9;
                        continue;
                    }
                }
            
                this->cycle_tilde_02_phasei = __cycle_tilde_02_phasei;
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            number cycle_tilde_02_ph_next(number freq, number reset) {
                {
                    {
                        if (reset >= 0.)
                            this->cycle_tilde_02_ph_currentPhase = reset;
                    }
                }
            
                number pincr = freq * this->cycle_tilde_02_ph_conv;
            
                if (this->cycle_tilde_02_ph_currentPhase < 0.)
                    this->cycle_tilde_02_ph_currentPhase = 1. + this->cycle_tilde_02_ph_currentPhase;
            
                if (this->cycle_tilde_02_ph_currentPhase > 1.)
                    this->cycle_tilde_02_ph_currentPhase = this->cycle_tilde_02_ph_currentPhase - 1.;
            
                number tmp = this->cycle_tilde_02_ph_currentPhase;
                this->cycle_tilde_02_ph_currentPhase += pincr;
                return tmp;
            }
            
            void cycle_tilde_02_ph_reset() {
                this->cycle_tilde_02_ph_currentPhase = 0;
            }
            
            void cycle_tilde_02_ph_dspsetup() {
                this->cycle_tilde_02_ph_conv = (number)1 / this->sr;
            }
            
            void cycle_tilde_02_dspsetup(bool force) {
                if ((bool)(this->cycle_tilde_02_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->cycle_tilde_02_phasei = 0;
                this->cycle_tilde_02_f2i = (number)4294967296 / this->samplerate();
                this->cycle_tilde_02_wrap = (long)(this->cycle_tilde_02_buffer->getSize()) - 1;
                this->cycle_tilde_02_setupDone = true;
                this->cycle_tilde_02_ph_dspsetup();
            }
            
            void cycle_tilde_02_bufferUpdated() {
                this->cycle_tilde_02_wrap = (long)(this->cycle_tilde_02_buffer->getSize()) - 1;
            }
            
            number cycle_tilde_03_ph_next(number freq, number reset) {
                {
                    {
                        if (reset >= 0.)
                            this->cycle_tilde_03_ph_currentPhase = reset;
                    }
                }
            
                number pincr = freq * this->cycle_tilde_03_ph_conv;
            
                if (this->cycle_tilde_03_ph_currentPhase < 0.)
                    this->cycle_tilde_03_ph_currentPhase = 1. + this->cycle_tilde_03_ph_currentPhase;
            
                if (this->cycle_tilde_03_ph_currentPhase > 1.)
                    this->cycle_tilde_03_ph_currentPhase = this->cycle_tilde_03_ph_currentPhase - 1.;
            
                number tmp = this->cycle_tilde_03_ph_currentPhase;
                this->cycle_tilde_03_ph_currentPhase += pincr;
                return tmp;
            }
            
            void cycle_tilde_03_ph_reset() {
                this->cycle_tilde_03_ph_currentPhase = 0;
            }
            
            void cycle_tilde_03_ph_dspsetup() {
                this->cycle_tilde_03_ph_conv = (number)1 / this->sr;
            }
            
            void cycle_tilde_03_dspsetup(bool force) {
                if ((bool)(this->cycle_tilde_03_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->cycle_tilde_03_phasei = 0;
                this->cycle_tilde_03_f2i = (number)4294967296 / this->samplerate();
                this->cycle_tilde_03_wrap = (long)(this->cycle_tilde_03_buffer->getSize()) - 1;
                this->cycle_tilde_03_setupDone = true;
                this->cycle_tilde_03_ph_dspsetup();
            }
            
            void cycle_tilde_03_bufferUpdated() {
                this->cycle_tilde_03_wrap = (long)(this->cycle_tilde_03_buffer->getSize()) - 1;
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                cycle_tilde_02_frequency = 0;
                cycle_tilde_02_phase_offset = 0;
                dspexpr_11_in1 = 0;
                dspexpr_11_in2 = 0;
                dspexpr_12_in1 = 0;
                dspexpr_12_in2 = 0;
                cycle_tilde_03_frequency = 0;
                cycle_tilde_03_phase_offset = 0;
                dspexpr_13_in1 = 0;
                dspexpr_13_in2 = 0;
                dspexpr_14_in1 = 0;
                dspexpr_14_in2 = 0;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                signals[1] = nullptr;
                signals[2] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                cycle_tilde_02_wrap = 0;
                cycle_tilde_02_ph_currentPhase = 0;
                cycle_tilde_02_ph_conv = 0;
                cycle_tilde_02_setupDone = false;
                cycle_tilde_03_wrap = 0;
                cycle_tilde_03_ph_currentPhase = 0;
                cycle_tilde_03_ph_conv = 0;
                cycle_tilde_03_setupDone = false;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number cycle_tilde_02_frequency;
                number cycle_tilde_02_phase_offset;
                number dspexpr_11_in1;
                number dspexpr_11_in2;
                number dspexpr_12_in1;
                number dspexpr_12_in2;
                number cycle_tilde_03_frequency;
                number cycle_tilde_03_phase_offset;
                number dspexpr_13_in1;
                number dspexpr_13_in2;
                number dspexpr_14_in1;
                number dspexpr_14_in2;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[3];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                Float64BufferRef cycle_tilde_02_buffer;
                long cycle_tilde_02_wrap;
                uint32_t cycle_tilde_02_phasei;
                SampleValue cycle_tilde_02_f2i;
                number cycle_tilde_02_ph_currentPhase;
                number cycle_tilde_02_ph_conv;
                bool cycle_tilde_02_setupDone;
                Float64BufferRef cycle_tilde_03_buffer;
                long cycle_tilde_03_wrap;
                uint32_t cycle_tilde_03_phasei;
                SampleValue cycle_tilde_03_f2i;
                number cycle_tilde_03_ph_currentPhase;
                number cycle_tilde_03_ph_conv;
                bool cycle_tilde_03_setupDone;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_795 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_806;
            friend class drone;
            
            public:
            
            RNBOSubpatcher_795()
            {
            }
            
            ~RNBOSubpatcher_795()
            {
            }
            
            virtual RNBOSubpatcher_806* getPatcher() const {
                return static_cast<RNBOSubpatcher_806 *>(_parentPatcher);
            }
            
            drone* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            inline number safediv(number num, number denom) {
                return (denom == 0.0 ? 0.0 : num / denom);
            }
            
            number maximum(number x, number y) {
                return (x < y ? y : x);
            }
            
            number mstosamps(MillisecondTime ms) {
                return ms * this->sr * 0.001;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
                const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
            
                this->gen_01_perform(
                    in2,
                    in2,
                    this->gen_01_in3,
                    this->gen_01_in4,
                    this->gen_01_in5,
                    this->gen_01_in6,
                    this->gen_01_attack_lockout,
                    this->signals[0],
                    n
                );
            
                this->dspexpr_15_perform(in1, this->signals[0], out1, n);
                this->signalforwarder_02_perform(this->signals[0], out2, n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 1; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->gen_01_dspsetup(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& preset) {
                this->param_01_getPresetValue(getSubState(preset, "attack"));
                this->param_02_getPresetValue(getSubState(preset, "decay"));
                this->param_03_getPresetValue(getSubState(preset, "sustain"));
                this->param_04_getPresetValue(getSubState(preset, "release"));
            }
            
            void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
                this->updateTime(time);
            
                switch (index) {
                case 0:
                    {
                    this->param_01_value_set(v);
                    break;
                    }
                case 1:
                    {
                    this->param_02_value_set(v);
                    break;
                    }
                case 2:
                    {
                    this->param_03_value_set(v);
                    break;
                    }
                case 3:
                    {
                    this->param_04_value_set(v);
                    break;
                    }
                }
            }
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                case 0:
                    {
                    return this->param_01_value;
                    }
                case 1:
                    {
                    return this->param_02_value;
                    }
                case 2:
                    {
                    return this->param_03_value;
                    }
                case 3:
                    {
                    return this->param_04_value;
                    }
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 4;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                case 0:
                    {
                    return "attack";
                    }
                case 1:
                    {
                    return "decay";
                    }
                case 2:
                    {
                    return "sustain";
                    }
                case 3:
                    {
                    return "release";
                    }
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                case 0:
                    {
                    return "note/env.adsr/attack";
                    }
                case 1:
                    {
                    return "note/env.adsr/decay";
                    }
                case 2:
                    {
                    return "note/env.adsr/sustain";
                    }
                case 3:
                    {
                    return "note/env.adsr/release";
                    }
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
                {
                    switch (index) {
                    case 0:
                        {
                        info->type = ParameterTypeNumber;
                        info->initialValue = 30;
                        info->min = 0;
                        info->max = 5000;
                        info->exponent = 3;
                        info->steps = 0;
                        info->debug = false;
                        info->saveable = true;
                        info->transmittable = true;
                        info->initialized = true;
                        info->visible = true;
                        info->displayName = "";
                        info->unit = "";
                        info->ioType = IOTypeUndefined;
                        info->signalIndex = INVALID_INDEX;
                        break;
                        }
                    case 1:
                        {
                        info->type = ParameterTypeNumber;
                        info->initialValue = 200;
                        info->min = 1;
                        info->max = 5000;
                        info->exponent = 3;
                        info->steps = 0;
                        info->debug = false;
                        info->saveable = true;
                        info->transmittable = true;
                        info->initialized = true;
                        info->visible = true;
                        info->displayName = "";
                        info->unit = "";
                        info->ioType = IOTypeUndefined;
                        info->signalIndex = INVALID_INDEX;
                        break;
                        }
                    case 2:
                        {
                        info->type = ParameterTypeNumber;
                        info->initialValue = 0.5;
                        info->min = 0;
                        info->max = 1;
                        info->exponent = 0.8;
                        info->steps = 0;
                        info->debug = false;
                        info->saveable = true;
                        info->transmittable = true;
                        info->initialized = true;
                        info->visible = true;
                        info->displayName = "";
                        info->unit = "";
                        info->ioType = IOTypeUndefined;
                        info->signalIndex = INVALID_INDEX;
                        break;
                        }
                    case 3:
                        {
                        info->type = ParameterTypeNumber;
                        info->initialValue = 300;
                        info->min = 1;
                        info->max = 90000;
                        info->exponent = 5;
                        info->steps = 0;
                        info->debug = false;
                        info->saveable = true;
                        info->transmittable = true;
                        info->initialized = true;
                        info->visible = true;
                        info->displayName = "";
                        info->unit = "";
                        info->ioType = IOTypeUndefined;
                        info->signalIndex = INVALID_INDEX;
                        break;
                        }
                    }
                }
            }
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                case 2:
                    {
                    {
                        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                        ParameterValue normalizedValue = (value - 0) / (1 - 0);
            
                        {
                            if (normalizedValue != 0.0) {
                                normalizedValue = rnbo_exp(
                                    rnbo_log((normalizedValue <= 0.0000000001 ? 0.0000000001 : normalizedValue)) * 1. / (number)0.8
                                );
                            }
                        }
            
                        return normalizedValue;
                    }
                    }
                case 0:
                    {
                    {
                        value = (value < 0 ? 0 : (value > 5000 ? 5000 : value));
                        ParameterValue normalizedValue = (value - 0) / (5000 - 0);
            
                        {
                            if (normalizedValue != 0.0) {
                                normalizedValue = rnbo_exp(
                                    rnbo_log((normalizedValue <= 0.0000000001 ? 0.0000000001 : normalizedValue)) * 1. / (number)3
                                );
                            }
                        }
            
                        return normalizedValue;
                    }
                    }
                case 1:
                    {
                    {
                        value = (value < 1 ? 1 : (value > 5000 ? 5000 : value));
                        ParameterValue normalizedValue = (value - 1) / (5000 - 1);
            
                        {
                            if (normalizedValue != 0.0) {
                                normalizedValue = rnbo_exp(
                                    rnbo_log((normalizedValue <= 0.0000000001 ? 0.0000000001 : normalizedValue)) * 1. / (number)3
                                );
                            }
                        }
            
                        return normalizedValue;
                    }
                    }
                case 3:
                    {
                    {
                        value = (value < 1 ? 1 : (value > 90000 ? 90000 : value));
                        ParameterValue normalizedValue = (value - 1) / (90000 - 1);
            
                        {
                            if (normalizedValue != 0.0) {
                                normalizedValue = rnbo_exp(
                                    rnbo_log((normalizedValue <= 0.0000000001 ? 0.0000000001 : normalizedValue)) * 1. / (number)5
                                );
                            }
                        }
            
                        return normalizedValue;
                    }
                    }
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                case 2:
                    {
                    {
                        {
                            if (value == 0.0) {
                                return 0;
                            } else {
                                return 0 + rnbo_exp(rnbo_log((value <= 0.0000000001 ? 0.0000000001 : value)) * 0.8) * (1 - 0);
                            }
                        }
                    }
                    }
                case 0:
                    {
                    {
                        {
                            if (value == 0.0) {
                                return 0;
                            } else {
                                return 0 + rnbo_exp(rnbo_log((value <= 0.0000000001 ? 0.0000000001 : value)) * 3) * (5000 - 0);
                            }
                        }
                    }
                    }
                case 1:
                    {
                    {
                        {
                            if (value == 0.0) {
                                return 1;
                            } else {
                                return 1 + rnbo_exp(rnbo_log((value <= 0.0000000001 ? 0.0000000001 : value)) * 3) * (5000 - 1);
                            }
                        }
                    }
                    }
                case 3:
                    {
                    {
                        {
                            if (value == 0.0) {
                                return 1;
                            } else {
                                return 1 + rnbo_exp(rnbo_log((value <= 0.0000000001 ? 0.0000000001 : value)) * 5) * (90000 - 1);
                            }
                        }
                    }
                    }
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                case 0:
                    {
                    return this->param_01_value_constrain(value);
                    }
                case 1:
                    {
                    return this->param_02_value_constrain(value);
                    }
                case 2:
                    {
                    return this->param_03_value_constrain(value);
                    }
                case 3:
                    {
                    return this->param_04_value_constrain(value);
                    }
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            void param_01_value_set(number v) {
                v = this->param_01_value_constrain(v);
                this->param_01_value = v;
                this->sendParameter(0, false);
            
                if (this->param_01_value != this->param_01_lastValue) {
                    this->getEngine()->presetTouched();
                    this->param_01_lastValue = this->param_01_value;
                }
            
                this->gen_01_in3_set(v);
            }
            
            void param_02_value_set(number v) {
                v = this->param_02_value_constrain(v);
                this->param_02_value = v;
                this->sendParameter(1, false);
            
                if (this->param_02_value != this->param_02_lastValue) {
                    this->getEngine()->presetTouched();
                    this->param_02_lastValue = this->param_02_value;
                }
            
                this->gen_01_in4_set(v);
            }
            
            void param_03_value_set(number v) {
                v = this->param_03_value_constrain(v);
                this->param_03_value = v;
                this->sendParameter(2, false);
            
                if (this->param_03_value != this->param_03_lastValue) {
                    this->getEngine()->presetTouched();
                    this->param_03_lastValue = this->param_03_value;
                }
            
                this->gen_01_in5_set(v);
            }
            
            void param_04_value_set(number v) {
                v = this->param_04_value_constrain(v);
                this->param_04_value = v;
                this->sendParameter(3, false);
            
                if (this->param_04_value != this->param_04_lastValue) {
                    this->getEngine()->presetTouched();
                    this->param_04_lastValue = this->param_04_value;
                }
            
                this->gen_01_in6_set(v);
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 2;
            }
            
            Index getNumOutputChannels() const {
                return 2;
            }
            
            void initializeObjects() {
                this->gen_01_attack_has_ended_init();
                this->gen_01_sustain_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {
                this->updateTime(this->getEngine()->getCurrentTime());
            
                {
                    this->scheduleParamInit(0, 0);
                }
            
                {
                    this->scheduleParamInit(1, 0);
                }
            
                {
                    this->scheduleParamInit(2, 0);
                }
            
                {
                    this->scheduleParamInit(3, 0);
                }
            }
            
            void allocateDataRefs() {}
            
            number param_01_value_constrain(number v) const {
                v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));
                return v;
            }
            
            void gen_01_in3_set(number v) {
                this->gen_01_in3 = v;
            }
            
            number param_02_value_constrain(number v) const {
                v = (v > 5000 ? 5000 : (v < 1 ? 1 : v));
                return v;
            }
            
            void gen_01_in4_set(number v) {
                this->gen_01_in4 = v;
            }
            
            number param_03_value_constrain(number v) const {
                v = (v > 1 ? 1 : (v < 0 ? 0 : v));
                return v;
            }
            
            void gen_01_in5_set(number v) {
                this->gen_01_in5 = v;
            }
            
            number param_04_value_constrain(number v) const {
                v = (v > 90000 ? 90000 : (v < 1 ? 1 : v));
                return v;
            }
            
            void gen_01_in6_set(number v) {
                this->gen_01_in6 = v;
            }
            
            void gen_01_perform(
                const Sample * in1,
                const Sample * in2,
                number in3,
                number in4,
                number in5,
                number in6,
                number attack_lockout,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(attack_lockout);
                auto __gen_01_sustain_value = this->gen_01_sustain_value;
                auto __gen_01_attack_has_ended_value = this->gen_01_attack_has_ended_value;
                auto min_1_0 = this->maximum(in3, 0.1);
                auto min_2_1 = this->maximum(in4, 0.1);
                number clamp_3_2 = (in5 > 1 ? 1 : (in5 < 0 ? 0 : in5));
                auto min_4_3 = this->maximum(in6, 0.1);
                number attack_iter_interval_8 = this->mstosamps(min_1_0) * 0.33333333333333;
                number release_iter_interval_9 = this->mstosamps(min_4_3) * 0.33333333333333;
                number decay_iter_interval_10 = this->mstosamps(min_2_1) * 0.33333333333333;
                number sustain_smoothing_12 = 1 - ((this->mstosamps(20) == 0. ? 0. : (number)1 / this->mstosamps(20)));
                Index i;
            
                for (i = 0; i < n; i++) {
                    number trigger_5 = this->gen_01_delta_4_next(in2[(Index)i] > 0) > 0;
                    number is_released_6 = in1[(Index)i] == 0;
                    number is_attacking_7 = ((bool)(trigger_5) || (bool)(!(bool)(__gen_01_attack_has_ended_value))) && ((bool)(!(bool)(is_released_6)) || 0);
                    number decay_iter_interval_5_11 = !(bool)(is_released_6) * decay_iter_interval_10 + is_released_6 * release_iter_interval_9;
                    __gen_01_sustain_value = clamp_3_2 + sustain_smoothing_12 * (__gen_01_sustain_value - clamp_3_2);
                    number ad_target_13 = (is_attacking_7 > 0 ? 1.0523956964913 : -0.052395696491256);
                    number asr_target_14 = ((bool)(!(bool)(is_released_6)) || (bool)(is_attacking_7) ? 1.0523956964913 : -0.052395696491256);
                    number ad_16 = this->gen_01_slide_15_next(ad_target_13, attack_iter_interval_8, decay_iter_interval_5_11);
                    number ad_6_17 = (ad_16 > 1 ? 1 : (ad_16 < 0 ? 0 : ad_16));
                    number asr_19 = this->gen_01_slide_18_next(asr_target_14, attack_iter_interval_8, release_iter_interval_9);
                    number asr_7_20 = (asr_19 > 1 ? 1 : (asr_19 < 0 ? 0 : asr_19));
                    __gen_01_attack_has_ended_value = (bool)(!(bool)(is_attacking_7)) || ad_6_17 >= 1;
                    number expr_8_21 = ad_6_17 + __gen_01_sustain_value * (asr_7_20 - ad_6_17);
                    out1[(Index)i] = expr_8_21;
                }
            
                this->gen_01_attack_has_ended_value = __gen_01_attack_has_ended_value;
                this->gen_01_sustain_value = __gen_01_sustain_value;
            }
            
            void dspexpr_15_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void signalforwarder_02_perform(const SampleValue * input, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            number gen_01_attack_has_ended_getvalue() {
                return this->gen_01_attack_has_ended_value;
            }
            
            void gen_01_attack_has_ended_setvalue(number val) {
                this->gen_01_attack_has_ended_value = val;
            }
            
            void gen_01_attack_has_ended_reset() {
                this->gen_01_attack_has_ended_value = 0;
            }
            
            void gen_01_attack_has_ended_init() {
                this->gen_01_attack_has_ended_value = 0;
            }
            
            number gen_01_sustain_getvalue() {
                return this->gen_01_sustain_value;
            }
            
            void gen_01_sustain_setvalue(number val) {
                this->gen_01_sustain_value = val;
            }
            
            void gen_01_sustain_reset() {
                this->gen_01_sustain_value = 0;
            }
            
            void gen_01_sustain_init() {
                this->gen_01_sustain_value = 0.5;
            }
            
            number gen_01_delta_4_next(number x) {
                number temp = (number)(x - this->gen_01_delta_4_prev);
                this->gen_01_delta_4_prev = x;
                return temp;
            }
            
            void gen_01_delta_4_dspsetup() {
                this->gen_01_delta_4_reset();
            }
            
            void gen_01_delta_4_reset() {
                this->gen_01_delta_4_prev = 0;
            }
            
            number gen_01_slide_15_next(number x, number up, number down) {
                number temp = x - this->gen_01_slide_15_prev;
                auto iup = this->safediv(1., this->maximum(1., rnbo_abs(up)));
                auto idown = this->safediv(1., this->maximum(1., rnbo_abs(down)));
                this->gen_01_slide_15_prev = this->gen_01_slide_15_prev + ((x > this->gen_01_slide_15_prev ? iup : idown)) * temp;
                return this->gen_01_slide_15_prev;
            }
            
            void gen_01_slide_15_reset() {
                this->gen_01_slide_15_prev = 0;
            }
            
            number gen_01_slide_18_next(number x, number up, number down) {
                number temp = x - this->gen_01_slide_18_prev;
                auto iup = this->safediv(1., this->maximum(1., rnbo_abs(up)));
                auto idown = this->safediv(1., this->maximum(1., rnbo_abs(down)));
                this->gen_01_slide_18_prev = this->gen_01_slide_18_prev + ((x > this->gen_01_slide_18_prev ? iup : idown)) * temp;
                return this->gen_01_slide_18_prev;
            }
            
            void gen_01_slide_18_reset() {
                this->gen_01_slide_18_prev = 0;
            }
            
            void gen_01_dspsetup(bool force) {
                if ((bool)(this->gen_01_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->gen_01_setupDone = true;
                this->gen_01_delta_4_dspsetup();
            }
            
            void param_01_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->param_01_value;
            }
            
            void param_01_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->param_01_value_set(preset["value"]);
            }
            
            void param_02_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->param_02_value;
            }
            
            void param_02_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->param_02_value_set(preset["value"]);
            }
            
            void param_03_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->param_03_value;
            }
            
            void param_03_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->param_03_value_set(preset["value"]);
            }
            
            void param_04_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->param_04_value;
            }
            
            void param_04_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->param_04_value_set(preset["value"]);
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                dspexpr_15_in1 = 0;
                dspexpr_15_in2 = 0;
                gen_01_in1 = 0;
                gen_01_in2 = 0;
                gen_01_in3 = 0;
                gen_01_in4 = 0;
                gen_01_in5 = 0;
                gen_01_in6 = 0;
                gen_01_attack_lockout = 0;
                param_01_value = 30;
                param_02_value = 200;
                param_03_value = 0.5;
                param_04_value = 300;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                gen_01_attack_has_ended_value = 0;
                gen_01_sustain_value = 0;
                gen_01_delta_4_prev = 0;
                gen_01_slide_15_prev = 0;
                gen_01_slide_18_prev = 0;
                gen_01_setupDone = false;
                param_01_lastValue = 0;
                param_02_lastValue = 0;
                param_03_lastValue = 0;
                param_04_lastValue = 0;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number dspexpr_15_in1;
                number dspexpr_15_in2;
                number gen_01_in1;
                number gen_01_in2;
                number gen_01_in3;
                number gen_01_in4;
                number gen_01_in5;
                number gen_01_in6;
                number gen_01_attack_lockout;
                number param_01_value;
                number param_02_value;
                number param_03_value;
                number param_04_value;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[1];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                number gen_01_attack_has_ended_value;
                number gen_01_sustain_value;
                number gen_01_delta_4_prev;
                number gen_01_slide_15_prev;
                number gen_01_slide_18_prev;
                bool gen_01_setupDone;
                number param_01_lastValue;
                number param_02_lastValue;
                number param_03_lastValue;
                number param_04_lastValue;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    RNBOSubpatcher_806()
    {
    }
    
    ~RNBOSubpatcher_806()
    {
        delete this->p_04;
        delete this->p_05;
    }
    
    virtual drone* getPatcher() const {
        return static_cast<drone *>(_parentPatcher);
    }
    
    drone* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
        getEngine()->flushClockEvents(this, 1646922831, false);
        getEngine()->flushClockEvents(this, -871642103, false);
        getEngine()->flushClockEvents(this, -1508480176, false);
    }
    
    inline number linearinterp(number frac, number x, number y) {
        return x + (y - x) * frac;
    }
    
    inline number safediv(number num, number denom) {
        return (denom == 0.0 ? 0.0 : num / denom);
    }
    
    number safepow(number base, number exponent) {
        return fixnan(rnbo_pow(base, exponent));
    }
    
    number scale(
        number x,
        number lowin,
        number hiin,
        number lowout,
        number highout,
        number pow
    ) {
        auto inscale = this->safediv(1., hiin - lowin);
        number outdiff = highout - lowout;
        number value = (x - lowin) * inscale;
    
        if (pow != 1) {
            if (value > 0)
                value = this->safepow(value, pow);
            else
                value = -this->safepow(-value, pow);
        }
    
        value = value * outdiff + lowout;
        return value;
    }
    
    number samplerate() const {
        return this->sr;
    }
    
    Index voice() {
        return this->_voiceIndex;
    }
    
    number random(number low, number high) {
        number range = high - low;
        return globalrandom() * range + low;
    }
    
    Index getNumMidiInputPorts() const {
        return 0;
    }
    
    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        const SampleValue * const* inputs,
        Index numInputs,
        SampleValue * const* outputs,
        Index numOutputs,
        Index n
    ) {
        RNBO_UNUSED(numInputs);
        RNBO_UNUSED(inputs);
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
        this->mtof_tilde_01_perform(this->mtof_tilde_01_midivalue, this->signals[0], n);
        this->dspexpr_17_perform(this->signals[0], this->dspexpr_17_in2, this->signals[1], n);
        this->ip_01_perform(this->signals[0], n);
        this->ip_02_perform(this->signals[2], n);
    
        this->p_04_perform(
            this->signals[1],
            this->signals[0],
            this->signals[2],
            this->signals[3],
            this->dummyBuffer,
            n
        );
    
        this->ip_03_perform(this->signals[2], n);
        this->p_05_perform(this->signals[3], this->signals[2], this->signals[0], this->dummyBuffer, n);
        this->dspexpr_16_perform(this->signals[0], this->dspexpr_16_in2, out1, n);
    
        this->cycle_tilde_04_perform(
            this->cycle_tilde_04_frequency,
            this->cycle_tilde_04_phase_offset,
            this->signals[0],
            this->dummyBuffer,
            n
        );
    
        this->snapshot_01_perform(this->signals[0], n);
    
        this->cycle_tilde_05_perform(
            this->cycle_tilde_05_frequency,
            this->cycle_tilde_05_phase_offset,
            this->signals[0],
            this->dummyBuffer,
            n
        );
    
        this->snapshot_02_perform(this->signals[0], n);
        this->stackprotect_perform(n);
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            Index i;
    
            for (i = 0; i < 4; i++) {
                this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
            }
    
            this->ip_01_sigbuf = resizeSignal(this->ip_01_sigbuf, this->maxvs, maxBlockSize);
            this->ip_02_sigbuf = resizeSignal(this->ip_02_sigbuf, this->maxvs, maxBlockSize);
            this->ip_03_sigbuf = resizeSignal(this->ip_03_sigbuf, this->maxvs, maxBlockSize);
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        this->ip_01_dspsetup(forceDSPSetup);
        this->ip_02_dspsetup(forceDSPSetup);
        this->ip_03_dspsetup(forceDSPSetup);
        this->cycle_tilde_04_dspsetup(forceDSPSetup);
        this->cycle_tilde_05_dspsetup(forceDSPSetup);
        this->p_04->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_05->prepareToProcess(sampleRate, maxBlockSize, force);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            {
            this->setProbingIndex(-1);
            break;
            }
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    void onSampleRateChanged(double ) {}
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {
        this->p_04 = new RNBOSubpatcher_794();
        this->p_04->setEngineAndPatcher(this->getEngine(), this);
        this->p_04->initialize();
        this->p_04->setParameterOffset(this->getParameterOffset(this->p_04));
        this->p_05 = new RNBOSubpatcher_795();
        this->p_05->setEngineAndPatcher(this->getEngine(), this);
        this->p_05->initialize();
        this->p_05->setParameterOffset(this->getParameterOffset(this->p_05));
    }
    
    void getPreset(PatcherStateInterface& preset) {
        this->param_05_getPresetValue(getSubState(preset, "ratio"));
        this->param_06_getPresetValue(getSubState(preset, "index"));
        this->param_07_getPresetValue(getSubState(preset, "lfo"));
        this->p_04->getPreset(getSubState(getSubState(preset, "__sps"), "osc.fm[4]"));
        this->p_05->getPreset(getSubState(getSubState(preset, "__sps"), "env.adsr"));
    }
    
    void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
        this->updateTime(time);
    
        switch (index) {
        case 0:
            {
            this->param_05_value_set(v);
            break;
            }
        case 1:
            {
            this->param_06_value_set(v);
            break;
            }
        case 2:
            {
            this->param_07_value_set(v);
            break;
            }
        default:
            {
            index -= 3;
    
            if (index < this->p_04->getNumParameters())
                this->p_04->setParameterValue(index, v, time);
    
            index -= this->p_04->getNumParameters();
    
            if (index < this->p_05->getNumParameters())
                this->p_05->setParameterValue(index, v, time);
    
            break;
            }
        }
    }
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
        this->setParameterValue(index, this->getParameterValue(index), time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        case 0:
            {
            return this->param_05_value;
            }
        case 1:
            {
            return this->param_06_value;
            }
        case 2:
            {
            return this->param_07_value;
            }
        default:
            {
            index -= 3;
    
            if (index < this->p_04->getNumParameters())
                return this->p_04->getParameterValue(index);
    
            index -= this->p_04->getNumParameters();
    
            if (index < this->p_05->getNumParameters())
                return this->p_05->getParameterValue(index);
    
            return 0;
            }
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 0;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 0;
    }
    
    ParameterIndex getNumParameters() const {
        return 3 + this->p_04->getNumParameters() + this->p_05->getNumParameters();
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        case 0:
            {
            return "ratio";
            }
        case 1:
            {
            return "index";
            }
        case 2:
            {
            return "lfo";
            }
        default:
            {
            index -= 3;
    
            if (index < this->p_04->getNumParameters())
                return this->p_04->getParameterName(index);
    
            index -= this->p_04->getNumParameters();
    
            if (index < this->p_05->getNumParameters())
                return this->p_05->getParameterName(index);
    
            return "bogus";
            }
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        case 0:
            {
            return "note/ratio";
            }
        case 1:
            {
            return "note/index";
            }
        case 2:
            {
            return "note/lfo";
            }
        default:
            {
            index -= 3;
    
            if (index < this->p_04->getNumParameters())
                return this->p_04->getParameterId(index);
    
            index -= this->p_04->getNumParameters();
    
            if (index < this->p_05->getNumParameters())
                return this->p_05->getParameterId(index);
    
            return "bogus";
            }
        }
    }
    
    void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
        {
            switch (index) {
            case 0:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 1;
                info->min = 1;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            case 1:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 1;
                info->min = 1;
                info->max = 20;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            case 2:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 1;
                info->min = 1;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            default:
                {
                index -= 3;
    
                if (index < this->p_04->getNumParameters())
                    this->p_04->getParameterInfo(index, info);
    
                index -= this->p_04->getNumParameters();
    
                if (index < this->p_05->getNumParameters())
                    this->p_05->getParameterInfo(index, info);
    
                break;
                }
            }
        }
    }
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
        if (subpatcher == this->p_04)
            return 3;
    
        if (subpatcher == this->p_05)
            return 3 + this->p_04->getNumParameters();
    
        return 0;
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        case 1:
            {
            {
                value = (value < 1 ? 1 : (value > 20 ? 20 : value));
                ParameterValue normalizedValue = (value - 1) / (20 - 1);
                return normalizedValue;
            }
            }
        case 0:
        case 2:
            {
            {
                value = (value < 1 ? 1 : (value > 100 ? 100 : value));
                ParameterValue normalizedValue = (value - 1) / (100 - 1);
                return normalizedValue;
            }
            }
        default:
            {
            index -= 3;
    
            if (index < this->p_04->getNumParameters())
                return this->p_04->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_04->getNumParameters();
    
            if (index < this->p_05->getNumParameters())
                return this->p_05->convertToNormalizedParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        case 1:
            {
            {
                {
                    return 1 + value * (20 - 1);
                }
            }
            }
        case 0:
        case 2:
            {
            {
                {
                    return 1 + value * (100 - 1);
                }
            }
            }
        default:
            {
            index -= 3;
    
            if (index < this->p_04->getNumParameters())
                return this->p_04->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_04->getNumParameters();
    
            if (index < this->p_05->getNumParameters())
                return this->p_05->convertFromNormalizedParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        case 0:
            {
            return this->param_05_value_constrain(value);
            }
        case 1:
            {
            return this->param_06_value_constrain(value);
            }
        case 2:
            {
            return this->param_07_value_constrain(value);
            }
        default:
            {
            index -= 3;
    
            if (index < this->p_04->getNumParameters())
                return this->p_04->constrainParameterValue(index, value);
    
            index -= this->p_04->getNumParameters();
    
            if (index < this->p_05->getNumParameters())
                return this->p_05->constrainParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
        RNBO_UNUSED(hasValue);
        this->updateTime(time);
    
        switch (index) {
        case 1646922831:
            {
            this->snapshot_01_out_set(value);
            break;
            }
        case -871642103:
            {
            this->loadbang_01_startupbang_bang();
            break;
            }
        case -1508480176:
            {
            this->snapshot_02_out_set(value);
            break;
            }
        }
    }
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("valin"):
            {
            if (TAG("note/number_obj-76") == objectId)
                this->numberobj_23_valin_set(payload);
    
            if (TAG("note/number_obj-12") == objectId)
                this->numberobj_24_valin_set(payload);
    
            if (TAG("note/number_obj-20") == objectId)
                this->numberobj_25_valin_set(payload);
    
            if (TAG("note/number_obj-3") == objectId)
                this->numberobj_26_valin_set(payload);
    
            break;
            }
        case TAG("format"):
            {
            if (TAG("note/number_obj-76") == objectId)
                this->numberobj_23_format_set(payload);
    
            if (TAG("note/number_obj-12") == objectId)
                this->numberobj_24_format_set(payload);
    
            if (TAG("note/number_obj-20") == objectId)
                this->numberobj_25_format_set(payload);
    
            if (TAG("note/number_obj-3") == objectId)
                this->numberobj_26_format_set(payload);
    
            break;
            }
        }
    
        this->p_04->processNumMessage(tag, objectId, time, payload);
        this->p_05->processNumMessage(tag, objectId, time, payload);
    }
    
    void processListMessage(
        MessageTag tag,
        MessageTag objectId,
        MillisecondTime time,
        const list& payload
    ) {
        RNBO_UNUSED(objectId);
        this->updateTime(time);
        this->p_04->processListMessage(tag, objectId, time, payload);
        this->p_05->processListMessage(tag, objectId, time, payload);
    }
    
    void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("startupbang"):
            {
            if (TAG("note/loadbang_obj-10") == objectId)
                this->loadbang_01_startupbang_bang();
    
            break;
            }
        case TAG("bangin"):
            {
            if (TAG("note/button_obj-9") == objectId)
                this->button_01_bangin_bang();
    
            break;
            }
        }
    
        this->p_04->processBangMessage(tag, objectId, time);
        this->p_05->processBangMessage(tag, objectId, time);
    }
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
        case TAG("valout"):
            {
            return "valout";
            }
        case TAG("note/number_obj-76"):
            {
            return "note/number_obj-76";
            }
        case TAG("setup"):
            {
            return "setup";
            }
        case TAG("note/number_obj-12"):
            {
            return "note/number_obj-12";
            }
        case TAG("bangout"):
            {
            return "bangout";
            }
        case TAG("note/button_obj-9"):
            {
            return "note/button_obj-9";
            }
        case TAG("note/number_obj-20"):
            {
            return "note/number_obj-20";
            }
        case TAG("note/number_obj-3"):
            {
            return "note/number_obj-3";
            }
        case TAG("valin"):
            {
            return "valin";
            }
        case TAG("format"):
            {
            return "format";
            }
        case TAG("startupbang"):
            {
            return "startupbang";
            }
        case TAG("note/loadbang_obj-10"):
            {
            return "note/loadbang_obj-10";
            }
        case TAG("bangin"):
            {
            return "bangin";
            }
        }
    
        auto subpatchResult_0 = this->p_04->resolveTag(tag);
    
        if (subpatchResult_0)
            return subpatchResult_0;
    
        auto subpatchResult_1 = this->p_05->resolveTag(tag);
    
        if (subpatchResult_1)
            return subpatchResult_1;
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        default:
            {
            return nullptr;
            }
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 0;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
        this->updateTime(time);
    
        if (index == 1) {
            this->mtof_tilde_01_innerMtoF_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultMtofLookupTable256);
        }
    
        if (index == 0) {
            this->cycle_tilde_04_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultSinus);
            this->cycle_tilde_04_bufferUpdated();
            this->cycle_tilde_05_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultSinus);
            this->cycle_tilde_05_bufferUpdated();
        }
    
        this->p_04->processDataViewUpdate(index, time);
        this->p_05->processDataViewUpdate(index, time);
    }
    
    void initialize() {
        this->assign_defaults();
        this->setState();
        this->mtof_tilde_01_innerMtoF_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultMtofLookupTable256);
        this->cycle_tilde_04_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultSinus);
        this->cycle_tilde_05_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultSinus);
    }
    
    protected:
    
    void param_05_value_set(number v) {
        v = this->param_05_value_constrain(v);
        this->param_05_value = v;
        this->sendParameter(0, false);
    
        if (this->param_05_value != this->param_05_lastValue) {
            this->getEngine()->presetTouched();
            this->param_05_lastValue = this->param_05_value;
        }
    
        this->ip_01_value_set(v);
    }
    
    void param_06_value_set(number v) {
        v = this->param_06_value_constrain(v);
        this->param_06_value = v;
        this->sendParameter(1, false);
    
        if (this->param_06_value != this->param_06_lastValue) {
            this->getEngine()->presetTouched();
            this->param_06_lastValue = this->param_06_value;
        }
    
        this->ip_02_value_set(v);
    }
    
    void param_07_value_set(number v) {
        v = this->param_07_value_constrain(v);
        this->param_07_value = v;
        this->sendParameter(2, false);
    
        if (this->param_07_value != this->param_07_lastValue) {
            this->getEngine()->presetTouched();
            this->param_07_lastValue = this->param_07_value;
        }
    
        this->cycle_tilde_04_frequency_set(v);
    }
    
    void eventinlet_09_out1_bang_bang() {}
    
    void eventinlet_09_out1_number_set(number v) {
        this->dspexpr_17_in2_set(v);
    }
    
    void numberobj_23_valin_set(number v) {
        this->numberobj_23_value_set(v);
    }
    
    void numberobj_23_format_set(number v) {
        this->numberobj_23_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void snapshot_01_out_set(number v) {
        this->snapshot_01_out = v;
    
        {
            list converted = {v};
            this->scale_08_input_set(converted);
        }
    }
    
    void loadbang_01_startupbang_bang() {
        this->loadbang_01_output_bang();
    }
    
    void numberobj_24_valin_set(number v) {
        this->numberobj_24_value_set(v);
    }
    
    void numberobj_24_format_set(number v) {
        this->numberobj_24_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void button_01_bangin_bang() {
        this->button_01_bangval_bang();
    }
    
    void numberobj_25_valin_set(number v) {
        this->numberobj_25_value_set(v);
    }
    
    void numberobj_25_format_set(number v) {
        this->numberobj_25_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void snapshot_02_out_set(number v) {
        this->snapshot_02_out = v;
    
        {
            list converted = {v};
            this->scale_09_input_set(converted);
        }
    }
    
    void numberobj_26_valin_set(number v) {
        this->numberobj_26_value_set(v);
    }
    
    void numberobj_26_format_set(number v) {
        this->numberobj_26_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 0;
    }
    
    Index getNumOutputChannels() const {
        return 1;
    }
    
    void initializeObjects() {
        this->mtof_tilde_01_innerScala_init();
        this->mtof_tilde_01_init();
        this->ip_01_init();
        this->ip_02_init();
        this->ip_03_init();
        this->numberobj_23_init();
        this->numberobj_24_init();
        this->random_01_nz_init();
        this->numberobj_25_init();
        this->numberobj_26_init();
        this->random_02_nz_init();
        this->p_04->initializeObjects();
        this->p_05->initializeObjects();
    }
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {
        this->updateTime(this->getEngine()->getCurrentTime());
        this->p_04->startup();
        this->p_05->startup();
        this->getEngine()->scheduleClockEvent(this, -871642103, 0 + this->_currentTime);;
    
        {
            this->scheduleParamInit(0, 0);
        }
    
        {
            this->scheduleParamInit(1, 0);
        }
    
        {
            this->scheduleParamInit(2, 0);
        }
    }
    
    void allocateDataRefs() {
        this->p_04->allocateDataRefs();
        this->p_05->allocateDataRefs();
        this->mtof_tilde_01_innerMtoF_buffer->requestSize(65536, 1);
        this->mtof_tilde_01_innerMtoF_buffer->setSampleRate(this->sr);
        this->cycle_tilde_04_buffer->requestSize(16384, 1);
        this->cycle_tilde_04_buffer->setSampleRate(this->sr);
        this->cycle_tilde_05_buffer->requestSize(16384, 1);
        this->cycle_tilde_05_buffer->setSampleRate(this->sr);
        this->mtof_tilde_01_innerMtoF_buffer = this->mtof_tilde_01_innerMtoF_buffer->allocateIfNeeded();
        this->cycle_tilde_04_buffer = this->cycle_tilde_04_buffer->allocateIfNeeded();
        this->cycle_tilde_05_buffer = this->cycle_tilde_05_buffer->allocateIfNeeded();
    }
    
    void cycle_tilde_05_frequency_set(number v) {
        this->cycle_tilde_05_frequency = v;
    }
    
    void numberobj_26_output_set(number v) {
        this->cycle_tilde_05_frequency_set(v);
    }
    
    void numberobj_26_value_set(number v) {
        this->numberobj_26_value_setter(v);
        v = this->numberobj_26_value;
        number localvalue = v;
    
        if (this->numberobj_26_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("note/number_obj-3"), localvalue, this->_currentTime);
        this->numberobj_26_output_set(localvalue);
    }
    
    void expr_09_out1_set(number v) {
        this->expr_09_out1 = v;
        this->numberobj_26_value_set(this->expr_09_out1);
    }
    
    void expr_09_in1_set(number in1) {
        this->expr_09_in1 = in1;
    
        this->expr_09_out1_set(
            (this->expr_09_in2 == 0 ? 0 : (this->expr_09_in2 == 0. ? 0. : this->expr_09_in1 / this->expr_09_in2))
        );//#map:note//_obj-4:1
    }
    
    void random_02_result_set(number v) {
        this->expr_09_in1_set(v);
    }
    
    void random_02_trigger_bang() {
        this->random_02_result_set(rnbo_abs(this->random_02_nz_next()) * this->random_02_limit);
    }
    
    void cycle_tilde_04_frequency_set(number v) {
        this->cycle_tilde_04_frequency = v;
    }
    
    void numberobj_24_output_set(number v) {
        this->cycle_tilde_04_frequency_set(v);
    }
    
    void numberobj_24_value_set(number v) {
        this->numberobj_24_value_setter(v);
        v = this->numberobj_24_value;
        number localvalue = v;
    
        if (this->numberobj_24_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("note/number_obj-12"), localvalue, this->_currentTime);
        this->numberobj_24_output_set(localvalue);
    }
    
    void expr_07_out1_set(number v) {
        this->expr_07_out1 = v;
        this->numberobj_24_value_set(this->expr_07_out1);
    }
    
    void expr_07_in1_set(number in1) {
        this->expr_07_in1 = in1;
    
        this->expr_07_out1_set(
            (this->expr_07_in2 == 0 ? 0 : (this->expr_07_in2 == 0. ? 0. : this->expr_07_in1 / this->expr_07_in2))
        );//#map:note//_obj-7:1
    }
    
    void random_01_result_set(number v) {
        this->expr_07_in1_set(v);
    }
    
    void random_01_trigger_bang() {
        this->random_01_result_set(rnbo_abs(this->random_01_nz_next()) * this->random_01_limit);
    }
    
    void button_01_output_bang() {
        this->random_02_trigger_bang();
        this->random_01_trigger_bang();
    }
    
    void button_01_bangval_bang() {
        this->getEngine()->sendBangMessage(TAG("bangout"), TAG("note/button_obj-9"), this->_currentTime);;
        this->button_01_output_bang();
    }
    
    void receive_03_output_bang_bang() {
        this->button_01_bangval_bang();
    }
    
    void ip_03_value_set(number v) {
        this->ip_03_value = v;
        this->ip_03_fillSigBuf();
        this->ip_03_lastValue = v;
    }
    
    void expr_05_out1_set(number v) {
        this->expr_05_out1 = v;
        this->ip_03_value_set(this->expr_05_out1);
    }
    
    void expr_05_in1_set(number in1) {
        this->expr_05_in1 = in1;
    
        this->expr_05_out1_set(
            (this->expr_05_in2 == 0 ? 0 : (this->expr_05_in2 == 0. ? 0. : this->expr_05_in1 / this->expr_05_in2))
        );//#map:note//_obj-28:1
    }
    
    void expr_05_in2_set(number v) {
        this->expr_05_in2 = v;
    }
    
    void receive_02_output_list_set(const list& v) {
        this->receive_02_output_list = jsCreateListCopy(v);
    
        {
            if (v->length > 1)
                this->expr_05_in2_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->expr_05_in1_set(converted);
        }
    }
    
    void mtof_tilde_01_midivalue_set(number v) {
        this->mtof_tilde_01_midivalue = v;
    }
    
    void receive_01_output_number_set(number v) {
        this->receive_01_output_number = v;
        this->mtof_tilde_01_midivalue_set(v);
    }
    
    void dspexpr_17_in2_set(number v) {
        this->dspexpr_17_in2 = v;
    }
    
    void eventinlet_09_out1_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->dspexpr_17_in2_set(converted);
        }
    }
    
    number param_05_value_constrain(number v) const {
        v = (v > 100 ? 100 : (v < 1 ? 1 : v));
        return v;
    }
    
    void ip_01_value_set(number v) {
        this->ip_01_value = v;
        this->ip_01_fillSigBuf();
        this->ip_01_lastValue = v;
    }
    
    number param_06_value_constrain(number v) const {
        v = (v > 20 ? 20 : (v < 1 ? 1 : v));
        return v;
    }
    
    void ip_02_value_set(number v) {
        this->ip_02_value = v;
        this->ip_02_fillSigBuf();
        this->ip_02_lastValue = v;
    }
    
    number param_07_value_constrain(number v) const {
        v = (v > 100 ? 100 : (v < 1 ? 1 : v));
        return v;
    }
    
    void dspexpr_16_in2_set(number v) {
        this->dspexpr_16_in2 = v;
    }
    
    void numberobj_23_output_set(number v) {
        this->dspexpr_16_in2_set(v);
    }
    
    void numberobj_23_value_set(number v) {
        this->numberobj_23_value_setter(v);
        v = this->numberobj_23_value;
        number localvalue = v;
    
        if (this->numberobj_23_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("note/number_obj-76"), localvalue, this->_currentTime);
        this->numberobj_23_output_set(localvalue);
    }
    
    void expr_06_out1_set(number v) {
        this->expr_06_out1 = v;
        this->numberobj_23_value_set(this->expr_06_out1);
    }
    
    void expr_06_in1_set(number in1) {
        this->expr_06_in1 = in1;
    
        this->expr_06_out1_set(
            (this->expr_06_in2 == 0 ? 0 : (this->expr_06_in2 == 0. ? 0. : this->expr_06_in1 / this->expr_06_in2))
        );//#map:note//_obj-73:1
    }
    
    void expr_06_in2_set(number v) {
        this->expr_06_in2 = v;
    }
    
    void scale_08_out_set(const list& v) {
        this->scale_08_out = jsCreateListCopy(v);
    
        {
            if (v->length > 1)
                this->expr_06_in2_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->expr_06_in1_set(converted);
        }
    }
    
    void scale_08_input_set(const list& v) {
        this->scale_08_input = jsCreateListCopy(v);
        list tmp = {};
    
        for (Index i = 0; i < v->length; i++) {
            tmp->push(this->scale(
                v[(Index)i],
                this->scale_08_inlow,
                this->scale_08_inhigh,
                this->scale_08_outlow,
                this->scale_08_outhigh,
                this->scale_08_power
            ));
        }
    
        this->scale_08_out_set(tmp);
    }
    
    void loadbang_01_output_bang() {
        this->button_01_bangval_bang();
    }
    
    void numberobj_25_output_set(number v) {
        this->param_06_value_set(v);
    }
    
    void numberobj_25_value_set(number v) {
        this->numberobj_25_value_setter(v);
        v = this->numberobj_25_value;
        number localvalue = v;
    
        if (this->numberobj_25_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("note/number_obj-20"), localvalue, this->_currentTime);
        this->numberobj_25_output_set(localvalue);
    }
    
    void expr_08_out1_set(number v) {
        this->expr_08_out1 = v;
        this->numberobj_25_value_set(this->expr_08_out1);
    }
    
    void expr_08_in1_set(number in1) {
        this->expr_08_in1 = in1;
    
        this->expr_08_out1_set(
            (this->expr_08_in2 == 0 ? 0 : (this->expr_08_in2 == 0. ? 0. : this->expr_08_in1 / this->expr_08_in2))
        );//#map:note//_obj-13:1
    }
    
    void expr_08_in2_set(number v) {
        this->expr_08_in2 = v;
    }
    
    void scale_09_out_set(const list& v) {
        this->scale_09_out = jsCreateListCopy(v);
    
        {
            if (v->length > 1)
                this->expr_08_in2_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->expr_08_in1_set(converted);
        }
    }
    
    void scale_09_input_set(const list& v) {
        this->scale_09_input = jsCreateListCopy(v);
        list tmp = {};
    
        for (Index i = 0; i < v->length; i++) {
            tmp->push(this->scale(
                v[(Index)i],
                this->scale_09_inlow,
                this->scale_09_inhigh,
                this->scale_09_outlow,
                this->scale_09_outhigh,
                this->scale_09_power
            ));
        }
    
        this->scale_09_out_set(tmp);
    }
    
    void mtof_tilde_01_perform(number midivalue, SampleValue * out, Index n) {
        auto __mtof_tilde_01_base = this->mtof_tilde_01_base;
    
        for (Index i = 0; i < n; i++) {
            out[(Index)i] = this->mtof_tilde_01_innerMtoF_next(midivalue, __mtof_tilde_01_base);
        }
    }
    
    void dspexpr_17_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2;//#map:_###_obj_###_:1
        }
    }
    
    void ip_01_perform(SampleValue * out, Index n) {
        auto __ip_01_lastValue = this->ip_01_lastValue;
        auto __ip_01_lastIndex = this->ip_01_lastIndex;
    
        for (Index i = 0; i < n; i++) {
            out[(Index)i] = ((SampleIndex)(i) >= __ip_01_lastIndex ? __ip_01_lastValue : this->ip_01_sigbuf[(Index)i]);
        }
    
        __ip_01_lastIndex = 0;
        this->ip_01_lastIndex = __ip_01_lastIndex;
    }
    
    void ip_02_perform(SampleValue * out, Index n) {
        auto __ip_02_lastValue = this->ip_02_lastValue;
        auto __ip_02_lastIndex = this->ip_02_lastIndex;
    
        for (Index i = 0; i < n; i++) {
            out[(Index)i] = ((SampleIndex)(i) >= __ip_02_lastIndex ? __ip_02_lastValue : this->ip_02_sigbuf[(Index)i]);
        }
    
        __ip_02_lastIndex = 0;
        this->ip_02_lastIndex = __ip_02_lastIndex;
    }
    
    void p_04_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        const SampleValue * in3,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        ConstSampleArray<3> ins = {in1, in2, in3};
        SampleArray<2> outs = {out1, out2};
        this->p_04->process(ins, 3, outs, 2, n);
    }
    
    void ip_03_perform(SampleValue * out, Index n) {
        auto __ip_03_lastValue = this->ip_03_lastValue;
        auto __ip_03_lastIndex = this->ip_03_lastIndex;
    
        for (Index i = 0; i < n; i++) {
            out[(Index)i] = ((SampleIndex)(i) >= __ip_03_lastIndex ? __ip_03_lastValue : this->ip_03_sigbuf[(Index)i]);
        }
    
        __ip_03_lastIndex = 0;
        this->ip_03_lastIndex = __ip_03_lastIndex;
    }
    
    void p_05_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        // subpatcher: env.adsr
        ConstSampleArray<2> ins = {in1, in2};
    
        SampleArray<2> outs = {out1, out2};
        this->p_05->process(ins, 2, outs, 2, n);
    }
    
    void dspexpr_16_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2;//#map:_###_obj_###_:1
        }
    }
    
    void cycle_tilde_04_perform(
        number frequency,
        number phase_offset,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        RNBO_UNUSED(phase_offset);
        auto __cycle_tilde_04_f2i = this->cycle_tilde_04_f2i;
        auto __cycle_tilde_04_buffer = this->cycle_tilde_04_buffer;
        auto __cycle_tilde_04_phasei = this->cycle_tilde_04_phasei;
        Index i;
    
        for (i = 0; i < n; i++) {
            {
                uint32_t uint_phase;
    
                {
                    {
                        uint_phase = __cycle_tilde_04_phasei;
                    }
                }
    
                uint32_t idx = (uint32_t)(uint32_rshift(uint_phase, 18));
                number frac = ((BinOpInt)((BinOpInt)uint_phase & (BinOpInt)262143)) * 3.81471181759574e-6;
                number y0 = __cycle_tilde_04_buffer[(Index)idx];
                number y1 = __cycle_tilde_04_buffer[(Index)((BinOpInt)(idx + 1) & (BinOpInt)16383)];
                number y = y0 + frac * (y1 - y0);
    
                {
                    uint32_t pincr = (uint32_t)(uint32_trunc(frequency * __cycle_tilde_04_f2i));
                    __cycle_tilde_04_phasei = uint32_add(__cycle_tilde_04_phasei, pincr);
                }
    
                out1[(Index)i] = y;
                out2[(Index)i] = uint_phase * 0.232830643653869629e-9;
                continue;
            }
        }
    
        this->cycle_tilde_04_phasei = __cycle_tilde_04_phasei;
    }
    
    void snapshot_01_perform(const SampleValue * input_signal, Index n) {
        auto __snapshot_01_lastValue = this->snapshot_01_lastValue;
        auto __snapshot_01_calc = this->snapshot_01_calc;
        auto __snapshot_01_count = this->snapshot_01_count;
        auto __snapshot_01_nextTime = this->snapshot_01_nextTime;
        auto __snapshot_01_interval = this->snapshot_01_interval;
        number timeInSamples = this->msToSamps(__snapshot_01_interval, this->sr);
    
        if (__snapshot_01_interval > 0) {
            for (Index i = 0; i < n; i++) {
                if (__snapshot_01_nextTime <= __snapshot_01_count + (SampleIndex)(i)) {
                    {
                        __snapshot_01_calc = input_signal[(Index)i];
                    }
    
                    this->getEngine()->scheduleClockEventWithValue(
                        this,
                        1646922831,
                        this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                        __snapshot_01_calc
                    );;
    
                    __snapshot_01_calc = 0;
                    __snapshot_01_nextTime += timeInSamples;
                }
            }
    
            __snapshot_01_count += this->vs;
        }
    
        __snapshot_01_lastValue = input_signal[(Index)(n - 1)];
        this->snapshot_01_nextTime = __snapshot_01_nextTime;
        this->snapshot_01_count = __snapshot_01_count;
        this->snapshot_01_calc = __snapshot_01_calc;
        this->snapshot_01_lastValue = __snapshot_01_lastValue;
    }
    
    void cycle_tilde_05_perform(
        number frequency,
        number phase_offset,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        RNBO_UNUSED(phase_offset);
        auto __cycle_tilde_05_f2i = this->cycle_tilde_05_f2i;
        auto __cycle_tilde_05_buffer = this->cycle_tilde_05_buffer;
        auto __cycle_tilde_05_phasei = this->cycle_tilde_05_phasei;
        Index i;
    
        for (i = 0; i < n; i++) {
            {
                uint32_t uint_phase;
    
                {
                    {
                        uint_phase = __cycle_tilde_05_phasei;
                    }
                }
    
                uint32_t idx = (uint32_t)(uint32_rshift(uint_phase, 18));
                number frac = ((BinOpInt)((BinOpInt)uint_phase & (BinOpInt)262143)) * 3.81471181759574e-6;
                number y0 = __cycle_tilde_05_buffer[(Index)idx];
                number y1 = __cycle_tilde_05_buffer[(Index)((BinOpInt)(idx + 1) & (BinOpInt)16383)];
                number y = y0 + frac * (y1 - y0);
    
                {
                    uint32_t pincr = (uint32_t)(uint32_trunc(frequency * __cycle_tilde_05_f2i));
                    __cycle_tilde_05_phasei = uint32_add(__cycle_tilde_05_phasei, pincr);
                }
    
                out1[(Index)i] = y;
                out2[(Index)i] = uint_phase * 0.232830643653869629e-9;
                continue;
            }
        }
    
        this->cycle_tilde_05_phasei = __cycle_tilde_05_phasei;
    }
    
    void snapshot_02_perform(const SampleValue * input_signal, Index n) {
        auto __snapshot_02_lastValue = this->snapshot_02_lastValue;
        auto __snapshot_02_calc = this->snapshot_02_calc;
        auto __snapshot_02_count = this->snapshot_02_count;
        auto __snapshot_02_nextTime = this->snapshot_02_nextTime;
        auto __snapshot_02_interval = this->snapshot_02_interval;
        number timeInSamples = this->msToSamps(__snapshot_02_interval, this->sr);
    
        if (__snapshot_02_interval > 0) {
            for (Index i = 0; i < n; i++) {
                if (__snapshot_02_nextTime <= __snapshot_02_count + (SampleIndex)(i)) {
                    {
                        __snapshot_02_calc = input_signal[(Index)i];
                    }
    
                    this->getEngine()->scheduleClockEventWithValue(
                        this,
                        -1508480176,
                        this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                        __snapshot_02_calc
                    );;
    
                    __snapshot_02_calc = 0;
                    __snapshot_02_nextTime += timeInSamples;
                }
            }
    
            __snapshot_02_count += this->vs;
        }
    
        __snapshot_02_lastValue = input_signal[(Index)(n - 1)];
        this->snapshot_02_nextTime = __snapshot_02_nextTime;
        this->snapshot_02_count = __snapshot_02_count;
        this->snapshot_02_calc = __snapshot_02_calc;
        this->snapshot_02_lastValue = __snapshot_02_lastValue;
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    void numberobj_23_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_23_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_23_value = localvalue;
    }
    
    void numberobj_24_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_24_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_24_value = localvalue;
    }
    
    void random_01_limit_setter(number v) {
        if (v >= 0)
            this->random_01_limit = v;
    }
    
    void numberobj_25_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_25_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_25_value = localvalue;
    }
    
    void numberobj_26_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_26_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_26_value = localvalue;
    }
    
    void random_02_limit_setter(number v) {
        if (v >= 0)
            this->random_02_limit = v;
    }
    
    number mtof_tilde_01_innerMtoF_next(number midivalue, number tuning) {
        if (midivalue == this->mtof_tilde_01_innerMtoF_lastInValue && tuning == this->mtof_tilde_01_innerMtoF_lastTuning)
            return this->mtof_tilde_01_innerMtoF_lastOutValue;
    
        this->mtof_tilde_01_innerMtoF_lastInValue = midivalue;
        this->mtof_tilde_01_innerMtoF_lastTuning = tuning;
        number result = 0;
    
        {
            result = rnbo_exp(.057762265 * (midivalue - 69.0));
        }
    
        this->mtof_tilde_01_innerMtoF_lastOutValue = tuning * result;
        return this->mtof_tilde_01_innerMtoF_lastOutValue;
    }
    
    void mtof_tilde_01_innerMtoF_reset() {
        this->mtof_tilde_01_innerMtoF_lastInValue = 0;
        this->mtof_tilde_01_innerMtoF_lastOutValue = 0;
        this->mtof_tilde_01_innerMtoF_lastTuning = 0;
    }
    
    void mtof_tilde_01_innerScala_mid(int v) {
        this->mtof_tilde_01_innerScala_kbmMid = v;
        this->mtof_tilde_01_innerScala_updateRefFreq();
    }
    
    void mtof_tilde_01_innerScala_ref(int v) {
        this->mtof_tilde_01_innerScala_kbmRefNum = v;
        this->mtof_tilde_01_innerScala_updateRefFreq();
    }
    
    void mtof_tilde_01_innerScala_base(number v) {
        this->mtof_tilde_01_innerScala_kbmRefFreq = v;
        this->mtof_tilde_01_innerScala_updateRefFreq();
    }
    
    void mtof_tilde_01_innerScala_init() {
        list sclValid = {
            12,
            100,
            0,
            200,
            0,
            300,
            0,
            400,
            0,
            500,
            0,
            600,
            0,
            700,
            0,
            800,
            0,
            900,
            0,
            1000,
            0,
            1100,
            0,
            2,
            1
        };
    
        this->mtof_tilde_01_innerScala_updateScale(sclValid);
    }
    
    void mtof_tilde_01_innerScala_update(list scale, list map) {
        if (scale->length > 0) {
            this->mtof_tilde_01_innerScala_updateScale(scale);
        }
    
        if (map->length > 0) {
            this->mtof_tilde_01_innerScala_updateMap(map);
        }
    }
    
    number mtof_tilde_01_innerScala_mtof(number note) {
        if ((bool)(this->mtof_tilde_01_innerScala_lastValid) && this->mtof_tilde_01_innerScala_lastNote == note) {
            return this->mtof_tilde_01_innerScala_lastFreq;
        }
    
        array<int, 2> degoct = this->mtof_tilde_01_innerScala_applyKBM(note);
        number out = 0;
    
        if (degoct[1] > 0) {
            out = this->mtof_tilde_01_innerScala_applySCL(degoct[0], fract(note), this->mtof_tilde_01_innerScala_refFreq);
        }
    
        this->mtof_tilde_01_innerScala_updateLast(note, out);
        return out;
    }
    
    number mtof_tilde_01_innerScala_ftom(number hz) {
        if (hz <= 0.0) {
            return 0.0;
        }
    
        if ((bool)(this->mtof_tilde_01_innerScala_lastValid) && this->mtof_tilde_01_innerScala_lastFreq == hz) {
            return this->mtof_tilde_01_innerScala_lastNote;
        }
    
        array<number, 2> df = this->mtof_tilde_01_innerScala_hztodeg(hz);
        int degree = (int)(df[0]);
        number frac = df[1];
        number out = 0;
    
        if (this->mtof_tilde_01_innerScala_kbmSize == 0) {
            out = this->mtof_tilde_01_innerScala_kbmMid + degree;
        } else {
            array<int, 2> octdeg = this->mtof_tilde_01_innerScala_octdegree(degree, this->mtof_tilde_01_innerScala_kbmOctaveDegree);
            number oct = (number)(octdeg[0]);
            int index = (int)(octdeg[1]);
            Index entry = 0;
    
            for (Index i = 0; i < this->mtof_tilde_01_innerScala_kbmMapSize; i++) {
                if (index == this->mtof_tilde_01_innerScala_kbmValid[(Index)(i + this->mtof_tilde_01_innerScala_KBM_MAP_OFFSET)]) {
                    entry = i;
                    break;
                }
            }
    
            out = oct * this->mtof_tilde_01_innerScala_kbmSize + entry + this->mtof_tilde_01_innerScala_kbmMid;
        }
    
        out = out + frac;
        this->mtof_tilde_01_innerScala_updateLast(out, hz);
        return this->mtof_tilde_01_innerScala_lastNote;
    }
    
    int mtof_tilde_01_innerScala_updateScale(list scl) {
        if (scl->length < 1) {
            return 0;
        }
    
        number sclDataEntries = scl[0] * 2 + 1;
    
        if (sclDataEntries <= scl->length) {
            this->mtof_tilde_01_innerScala_lastValid = false;
            this->mtof_tilde_01_innerScala_sclExpMul = {};
            number last = 1;
    
            for (Index i = 1; i < sclDataEntries; i += 2) {
                const number c = (const number)(scl[(Index)(i + 0)]);
                const number d = (const number)(scl[(Index)(i + 1)]);
    
                if (d <= 0) {
                    last = c / (number)1200;
                } else {
                    last = rnbo_log2(c / d);
                }
    
                this->mtof_tilde_01_innerScala_sclExpMul->push(last);
            }
    
            this->mtof_tilde_01_innerScala_sclOctaveMul = last;
            this->mtof_tilde_01_innerScala_sclEntryCount = (int)(this->mtof_tilde_01_innerScala_sclExpMul->length);
    
            if (scl->length >= sclDataEntries + 3) {
                this->mtof_tilde_01_innerScala_kbmMid = (int)(scl[(Index)(sclDataEntries + 2)]);
                this->mtof_tilde_01_innerScala_kbmRefNum = (int)(scl[(Index)(sclDataEntries + 1)]);
                this->mtof_tilde_01_innerScala_kbmRefFreq = scl[(Index)(sclDataEntries + 0)];
                this->mtof_tilde_01_innerScala_kbmSize = (int)(0);
            }
    
            this->mtof_tilde_01_innerScala_updateRefFreq();
            return 1;
        }
    
        return 0;
    }
    
    int mtof_tilde_01_innerScala_updateMap(list kbm) {
        if (kbm->length == 1 && kbm[0] == 0.0) {
            kbm = {0.0, 0.0, 0.0, 60.0, 69.0, 440.0};
        }
    
        if (kbm->length >= 6 && kbm[0] >= 0.0) {
            this->mtof_tilde_01_innerScala_lastValid = false;
            Index size = (Index)(kbm[0]);
            int octave = 12;
    
            if (kbm->length > 6) {
                octave = (int)(kbm[6]);
            }
    
            if (size > 0 && kbm->length < this->mtof_tilde_01_innerScala_KBM_MAP_OFFSET) {
                return 0;
            }
    
            this->mtof_tilde_01_innerScala_kbmSize = (int)(size);
            this->mtof_tilde_01_innerScala_kbmMin = (int)(kbm[1]);
            this->mtof_tilde_01_innerScala_kbmMax = (int)(kbm[2]);
            this->mtof_tilde_01_innerScala_kbmMid = (int)(kbm[3]);
            this->mtof_tilde_01_innerScala_kbmRefNum = (int)(kbm[4]);
            this->mtof_tilde_01_innerScala_kbmRefFreq = kbm[5];
            this->mtof_tilde_01_innerScala_kbmOctaveDegree = octave;
            this->mtof_tilde_01_innerScala_kbmValid = kbm;
            this->mtof_tilde_01_innerScala_kbmMapSize = (kbm->length - this->mtof_tilde_01_innerScala_KBM_MAP_OFFSET > kbm->length ? kbm->length : (kbm->length - this->mtof_tilde_01_innerScala_KBM_MAP_OFFSET < 0 ? 0 : kbm->length - this->mtof_tilde_01_innerScala_KBM_MAP_OFFSET));
            this->mtof_tilde_01_innerScala_updateRefFreq();
            return 1;
        }
    
        return 0;
    }
    
    void mtof_tilde_01_innerScala_updateLast(number note, number freq) {
        this->mtof_tilde_01_innerScala_lastValid = true;
        this->mtof_tilde_01_innerScala_lastNote = note;
        this->mtof_tilde_01_innerScala_lastFreq = freq;
    }
    
    array<number, 2> mtof_tilde_01_innerScala_hztodeg(number hz) {
        number hza = rnbo_abs(hz);
    
        number octave = rnbo_floor(
            rnbo_log2(hza / this->mtof_tilde_01_innerScala_refFreq) / this->mtof_tilde_01_innerScala_sclOctaveMul
        );
    
        int i = 0;
        number frac = 0;
        number n = 0;
    
        for (; i < this->mtof_tilde_01_innerScala_sclEntryCount; i++) {
            number c = this->mtof_tilde_01_innerScala_applySCLOctIndex(octave, i + 0, 0.0, this->mtof_tilde_01_innerScala_refFreq);
            n = this->mtof_tilde_01_innerScala_applySCLOctIndex(octave, i + 1, 0.0, this->mtof_tilde_01_innerScala_refFreq);
    
            if (c <= hza && hza < n) {
                if (c != hza) {
                    frac = rnbo_log2(hza / c) / rnbo_log2(n / c);
                }
    
                break;
            }
        }
    
        if (i == this->mtof_tilde_01_innerScala_sclEntryCount && n != hza) {
            number c = n;
            n = this->mtof_tilde_01_innerScala_applySCLOctIndex(octave + 1, 0, 0.0, this->mtof_tilde_01_innerScala_refFreq);
            frac = rnbo_log2(hza / c) / rnbo_log2(n / c);
        }
    
        number deg = i + octave * this->mtof_tilde_01_innerScala_sclEntryCount;
    
        {
            deg = rnbo_fround((deg + frac) * 1 / (number)1) * 1;
            frac = 0.0;
        }
    
        return {deg, frac};
    }
    
    array<int, 2> mtof_tilde_01_innerScala_octdegree(int degree, int count) {
        int octave = 0;
        int index = 0;
    
        if (degree < 0) {
            octave = -(1 + (-1 - degree) / count);
            index = -degree % count;
    
            if (index > 0) {
                index = count - index;
            }
        } else {
            octave = degree / count;
            index = degree % count;
        }
    
        return {octave, index};
    }
    
    array<int, 2> mtof_tilde_01_innerScala_applyKBM(number note) {
        if ((this->mtof_tilde_01_innerScala_kbmMin == this->mtof_tilde_01_innerScala_kbmMax && this->mtof_tilde_01_innerScala_kbmMax == 0) || (note >= this->mtof_tilde_01_innerScala_kbmMin && note <= this->mtof_tilde_01_innerScala_kbmMax)) {
            int degree = (int)(rnbo_floor(note - this->mtof_tilde_01_innerScala_kbmMid));
    
            if (this->mtof_tilde_01_innerScala_kbmSize == 0) {
                return {degree, 1};
            }
    
            array<int, 2> octdeg = this->mtof_tilde_01_innerScala_octdegree(degree, this->mtof_tilde_01_innerScala_kbmSize);
            int octave = (int)(octdeg[0]);
            Index index = (Index)(octdeg[1]);
    
            if (this->mtof_tilde_01_innerScala_kbmMapSize > index) {
                degree = (int)(this->mtof_tilde_01_innerScala_kbmValid[(Index)(this->mtof_tilde_01_innerScala_KBM_MAP_OFFSET + index)]);
    
                if (degree >= 0) {
                    return {degree + octave * this->mtof_tilde_01_innerScala_kbmOctaveDegree, 1};
                }
            }
        }
    
        return {-1, 0};
    }
    
    number mtof_tilde_01_innerScala_applySCL(int degree, number frac, number refFreq) {
        array<int, 2> octdeg = this->mtof_tilde_01_innerScala_octdegree(degree, this->mtof_tilde_01_innerScala_sclEntryCount);
        return this->mtof_tilde_01_innerScala_applySCLOctIndex(octdeg[0], octdeg[1], frac, refFreq);
    }
    
    number mtof_tilde_01_innerScala_applySCLOctIndex(number octave, int index, number frac, number refFreq) {
        number p = 0;
    
        if (index > 0) {
            p = this->mtof_tilde_01_innerScala_sclExpMul[(Index)(index - 1)];
        }
    
        if (frac > 0) {
            p = this->linearinterp(frac, p, this->mtof_tilde_01_innerScala_sclExpMul[(Index)index]);
        } else if (frac < 0) {
            p = this->linearinterp(-frac, this->mtof_tilde_01_innerScala_sclExpMul[(Index)index], p);
        }
    
        return refFreq * rnbo_pow(2, p + octave * this->mtof_tilde_01_innerScala_sclOctaveMul);
    }
    
    void mtof_tilde_01_innerScala_updateRefFreq() {
        this->mtof_tilde_01_innerScala_lastValid = false;
        int refOffset = (int)(this->mtof_tilde_01_innerScala_kbmRefNum - this->mtof_tilde_01_innerScala_kbmMid);
    
        if (refOffset == 0) {
            this->mtof_tilde_01_innerScala_refFreq = this->mtof_tilde_01_innerScala_kbmRefFreq;
        } else {
            int base = (int)(this->mtof_tilde_01_innerScala_kbmSize);
    
            if (base < 1) {
                base = this->mtof_tilde_01_innerScala_sclEntryCount;
            }
    
            array<int, 2> octdeg = this->mtof_tilde_01_innerScala_octdegree(refOffset, base);
            number oct = (number)(octdeg[0]);
            int index = (int)(octdeg[1]);
    
            if (base > 0) {
                oct = oct + rnbo_floor(index / base);
                index = index % base;
            }
    
            if (index >= 0 && index < this->mtof_tilde_01_innerScala_kbmSize) {
                if (index < this->mtof_tilde_01_innerScala_kbmMapSize) {
                    index = (int)(this->mtof_tilde_01_innerScala_kbmValid[(Index)((Index)(index) + this->mtof_tilde_01_innerScala_KBM_MAP_OFFSET)]);
                } else {
                    index = -1;
                }
            }
    
            if (index < 0 || index > this->mtof_tilde_01_innerScala_sclExpMul->length)
                {} else {
                number p = 0;
    
                if (index > 0) {
                    p = this->mtof_tilde_01_innerScala_sclExpMul[(Index)(index - 1)];
                }
    
                this->mtof_tilde_01_innerScala_refFreq = this->mtof_tilde_01_innerScala_kbmRefFreq / rnbo_pow(2, p + oct * this->mtof_tilde_01_innerScala_sclOctaveMul);
            }
        }
    }
    
    void mtof_tilde_01_innerScala_reset() {
        this->mtof_tilde_01_innerScala_lastValid = false;
        this->mtof_tilde_01_innerScala_lastNote = 0;
        this->mtof_tilde_01_innerScala_lastFreq = 0;
        this->mtof_tilde_01_innerScala_sclEntryCount = 0;
        this->mtof_tilde_01_innerScala_sclOctaveMul = 1;
        this->mtof_tilde_01_innerScala_sclExpMul = {};
        this->mtof_tilde_01_innerScala_kbmValid = {0, 0, 0, 60, 69, 440};
        this->mtof_tilde_01_innerScala_kbmMid = 60;
        this->mtof_tilde_01_innerScala_kbmRefNum = 69;
        this->mtof_tilde_01_innerScala_kbmRefFreq = 440;
        this->mtof_tilde_01_innerScala_kbmSize = 0;
        this->mtof_tilde_01_innerScala_kbmMin = 0;
        this->mtof_tilde_01_innerScala_kbmMax = 0;
        this->mtof_tilde_01_innerScala_kbmOctaveDegree = 12;
        this->mtof_tilde_01_innerScala_kbmMapSize = 0;
        this->mtof_tilde_01_innerScala_refFreq = 261.63;
    }
    
    void mtof_tilde_01_init() {
        this->mtof_tilde_01_innerScala_update(this->mtof_tilde_01_scale, this->mtof_tilde_01_map);
    }
    
    void param_05_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_05_value;
    }
    
    void param_05_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_05_value_set(preset["value"]);
    }
    
    void ip_01_init() {
        this->ip_01_lastValue = this->ip_01_value;
    }
    
    void ip_01_fillSigBuf() {
        if ((bool)(this->ip_01_sigbuf)) {
            SampleIndex k = (SampleIndex)(this->sampleOffsetIntoNextAudioBuffer);
    
            if (k >= (SampleIndex)(this->vs))
                k = (SampleIndex)(this->vs) - 1;
    
            for (SampleIndex i = (SampleIndex)(this->ip_01_lastIndex); i < k; i++) {
                if (this->ip_01_resetCount > 0) {
                    this->ip_01_sigbuf[(Index)i] = 1;
                    this->ip_01_resetCount--;
                } else {
                    this->ip_01_sigbuf[(Index)i] = this->ip_01_lastValue;
                }
            }
    
            this->ip_01_lastIndex = k;
        }
    }
    
    void ip_01_dspsetup(bool force) {
        if ((bool)(this->ip_01_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->ip_01_lastIndex = 0;
        this->ip_01_setupDone = true;
    }
    
    void param_06_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_06_value;
    }
    
    void param_06_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_06_value_set(preset["value"]);
    }
    
    void ip_02_init() {
        this->ip_02_lastValue = this->ip_02_value;
    }
    
    void ip_02_fillSigBuf() {
        if ((bool)(this->ip_02_sigbuf)) {
            SampleIndex k = (SampleIndex)(this->sampleOffsetIntoNextAudioBuffer);
    
            if (k >= (SampleIndex)(this->vs))
                k = (SampleIndex)(this->vs) - 1;
    
            for (SampleIndex i = (SampleIndex)(this->ip_02_lastIndex); i < k; i++) {
                if (this->ip_02_resetCount > 0) {
                    this->ip_02_sigbuf[(Index)i] = 1;
                    this->ip_02_resetCount--;
                } else {
                    this->ip_02_sigbuf[(Index)i] = this->ip_02_lastValue;
                }
            }
    
            this->ip_02_lastIndex = k;
        }
    }
    
    void ip_02_dspsetup(bool force) {
        if ((bool)(this->ip_02_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->ip_02_lastIndex = 0;
        this->ip_02_setupDone = true;
    }
    
    void ip_03_init() {
        this->ip_03_lastValue = this->ip_03_value;
    }
    
    void ip_03_fillSigBuf() {
        if ((bool)(this->ip_03_sigbuf)) {
            SampleIndex k = (SampleIndex)(this->sampleOffsetIntoNextAudioBuffer);
    
            if (k >= (SampleIndex)(this->vs))
                k = (SampleIndex)(this->vs) - 1;
    
            for (SampleIndex i = (SampleIndex)(this->ip_03_lastIndex); i < k; i++) {
                if (this->ip_03_resetCount > 0) {
                    this->ip_03_sigbuf[(Index)i] = 1;
                    this->ip_03_resetCount--;
                } else {
                    this->ip_03_sigbuf[(Index)i] = this->ip_03_lastValue;
                }
            }
    
            this->ip_03_lastIndex = k;
        }
    }
    
    void ip_03_dspsetup(bool force) {
        if ((bool)(this->ip_03_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->ip_03_lastIndex = 0;
        this->ip_03_setupDone = true;
    }
    
    void param_07_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_07_value;
    }
    
    void param_07_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_07_value_set(preset["value"]);
    }
    
    void numberobj_23_init() {
        this->numberobj_23_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("note/number_obj-76"), 1, this->_currentTime);
    }
    
    void numberobj_23_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_23_value;
    }
    
    void numberobj_23_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_23_value_set(preset["value"]);
    }
    
    number cycle_tilde_04_ph_next(number freq, number reset) {
        {
            {
                if (reset >= 0.)
                    this->cycle_tilde_04_ph_currentPhase = reset;
            }
        }
    
        number pincr = freq * this->cycle_tilde_04_ph_conv;
    
        if (this->cycle_tilde_04_ph_currentPhase < 0.)
            this->cycle_tilde_04_ph_currentPhase = 1. + this->cycle_tilde_04_ph_currentPhase;
    
        if (this->cycle_tilde_04_ph_currentPhase > 1.)
            this->cycle_tilde_04_ph_currentPhase = this->cycle_tilde_04_ph_currentPhase - 1.;
    
        number tmp = this->cycle_tilde_04_ph_currentPhase;
        this->cycle_tilde_04_ph_currentPhase += pincr;
        return tmp;
    }
    
    void cycle_tilde_04_ph_reset() {
        this->cycle_tilde_04_ph_currentPhase = 0;
    }
    
    void cycle_tilde_04_ph_dspsetup() {
        this->cycle_tilde_04_ph_conv = (number)1 / this->sr;
    }
    
    void cycle_tilde_04_dspsetup(bool force) {
        if ((bool)(this->cycle_tilde_04_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->cycle_tilde_04_phasei = 0;
        this->cycle_tilde_04_f2i = (number)4294967296 / this->samplerate();
        this->cycle_tilde_04_wrap = (long)(this->cycle_tilde_04_buffer->getSize()) - 1;
        this->cycle_tilde_04_setupDone = true;
        this->cycle_tilde_04_ph_dspsetup();
    }
    
    void cycle_tilde_04_bufferUpdated() {
        this->cycle_tilde_04_wrap = (long)(this->cycle_tilde_04_buffer->getSize()) - 1;
    }
    
    void numberobj_24_init() {
        this->numberobj_24_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("note/number_obj-12"), 1, this->_currentTime);
    }
    
    void numberobj_24_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_24_value;
    }
    
    void numberobj_24_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_24_value_set(preset["value"]);
    }
    
    void random_01_nz_reset() {
        xoshiro_reset(
            systemticks() + this->voice() + this->random(0, 10000),
            this->random_01_nz_state
        );
    }
    
    void random_01_nz_init() {
        this->random_01_nz_reset();
    }
    
    void random_01_nz_seed(number v) {
        xoshiro_reset(v, this->random_01_nz_state);
    }
    
    number random_01_nz_next() {
        return xoshiro_next(this->random_01_nz_state);
    }
    
    void numberobj_25_init() {
        this->numberobj_25_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("note/number_obj-20"), 1, this->_currentTime);
    }
    
    void numberobj_25_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_25_value;
    }
    
    void numberobj_25_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_25_value_set(preset["value"]);
    }
    
    number cycle_tilde_05_ph_next(number freq, number reset) {
        {
            {
                if (reset >= 0.)
                    this->cycle_tilde_05_ph_currentPhase = reset;
            }
        }
    
        number pincr = freq * this->cycle_tilde_05_ph_conv;
    
        if (this->cycle_tilde_05_ph_currentPhase < 0.)
            this->cycle_tilde_05_ph_currentPhase = 1. + this->cycle_tilde_05_ph_currentPhase;
    
        if (this->cycle_tilde_05_ph_currentPhase > 1.)
            this->cycle_tilde_05_ph_currentPhase = this->cycle_tilde_05_ph_currentPhase - 1.;
    
        number tmp = this->cycle_tilde_05_ph_currentPhase;
        this->cycle_tilde_05_ph_currentPhase += pincr;
        return tmp;
    }
    
    void cycle_tilde_05_ph_reset() {
        this->cycle_tilde_05_ph_currentPhase = 0;
    }
    
    void cycle_tilde_05_ph_dspsetup() {
        this->cycle_tilde_05_ph_conv = (number)1 / this->sr;
    }
    
    void cycle_tilde_05_dspsetup(bool force) {
        if ((bool)(this->cycle_tilde_05_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->cycle_tilde_05_phasei = 0;
        this->cycle_tilde_05_f2i = (number)4294967296 / this->samplerate();
        this->cycle_tilde_05_wrap = (long)(this->cycle_tilde_05_buffer->getSize()) - 1;
        this->cycle_tilde_05_setupDone = true;
        this->cycle_tilde_05_ph_dspsetup();
    }
    
    void cycle_tilde_05_bufferUpdated() {
        this->cycle_tilde_05_wrap = (long)(this->cycle_tilde_05_buffer->getSize()) - 1;
    }
    
    void numberobj_26_init() {
        this->numberobj_26_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("note/number_obj-3"), 1, this->_currentTime);
    }
    
    void numberobj_26_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_26_value;
    }
    
    void numberobj_26_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_26_value_set(preset["value"]);
    }
    
    void random_02_nz_reset() {
        xoshiro_reset(
            systemticks() + this->voice() + this->random(0, 10000),
            this->random_02_nz_state
        );
    }
    
    void random_02_nz_init() {
        this->random_02_nz_reset();
    }
    
    void random_02_nz_seed(number v) {
        xoshiro_reset(v, this->random_02_nz_state);
    }
    
    number random_02_nz_next() {
        return xoshiro_next(this->random_02_nz_state);
    }
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        mtof_tilde_01_midivalue = 0;
        mtof_tilde_01_base = 440;
        receive_01_output_number = 0;
        dspexpr_16_in1 = 0;
        dspexpr_16_in2 = 0;
        p_04_target = 0;
        dspexpr_17_in1 = 0;
        dspexpr_17_in2 = 1;
        p_05_target = 0;
        param_05_value = 1;
        ip_01_value = 0;
        ip_01_impulse = 0;
        param_06_value = 1;
        ip_02_value = 0;
        ip_02_impulse = 0;
        receive_02_output_number = 0;
        expr_05_in1 = 0;
        expr_05_in2 = 127;
        expr_05_out1 = 0;
        ip_03_value = 0;
        ip_03_impulse = 0;
        param_07_value = 1;
        numberobj_23_value = 0;
        numberobj_23_value_setter(numberobj_23_value);
        expr_06_in1 = 0;
        expr_06_in2 = 100;
        expr_06_out1 = 0;
        scale_08_inlow = -1;
        scale_08_inhigh = 1;
        scale_08_outlow = 1;
        scale_08_outhigh = 100;
        scale_08_power = 1;
        cycle_tilde_04_frequency = 0.001;
        cycle_tilde_04_phase_offset = 0;
        snapshot_01_interval = 20;
        snapshot_01_out = 0;
        numberobj_24_value = 0;
        numberobj_24_value_setter(numberobj_24_value);
        expr_07_in1 = 0;
        expr_07_in2 = 10000;
        expr_07_out1 = 0;
        random_01_limit = 100;
        random_01_limit_setter(random_01_limit);
        random_01_seed = 0;
        receive_03_output_number = 0;
        numberobj_25_value = 0;
        numberobj_25_value_setter(numberobj_25_value);
        expr_08_in1 = 0;
        expr_08_in2 = 100;
        expr_08_out1 = 0;
        scale_09_inlow = -1;
        scale_09_inhigh = 1;
        scale_09_outlow = 1;
        scale_09_outhigh = 500;
        scale_09_power = 1;
        snapshot_02_interval = 20;
        snapshot_02_out = 0;
        cycle_tilde_05_frequency = 0.001;
        cycle_tilde_05_phase_offset = 0;
        numberobj_26_value = 0;
        numberobj_26_value_setter(numberobj_26_value);
        expr_09_in1 = 0;
        expr_09_in2 = 10000;
        expr_09_out1 = 0;
        random_02_limit = 100;
        random_02_limit_setter(random_02_limit);
        random_02_seed = 0;
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        signals[0] = nullptr;
        signals[1] = nullptr;
        signals[2] = nullptr;
        signals[3] = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        mtof_tilde_01_innerMtoF_lastInValue = 0;
        mtof_tilde_01_innerMtoF_lastOutValue = 0;
        mtof_tilde_01_innerMtoF_lastTuning = 0;
        mtof_tilde_01_innerScala_lastValid = false;
        mtof_tilde_01_innerScala_lastNote = 0;
        mtof_tilde_01_innerScala_lastFreq = 0;
        mtof_tilde_01_innerScala_sclEntryCount = 0;
        mtof_tilde_01_innerScala_sclOctaveMul = 1;
        mtof_tilde_01_innerScala_kbmValid = { 0, 0, 0, 60, 69, 440 };
        mtof_tilde_01_innerScala_kbmMid = 60;
        mtof_tilde_01_innerScala_kbmRefNum = 69;
        mtof_tilde_01_innerScala_kbmRefFreq = 440;
        mtof_tilde_01_innerScala_kbmSize = 0;
        mtof_tilde_01_innerScala_kbmMin = 0;
        mtof_tilde_01_innerScala_kbmMax = 0;
        mtof_tilde_01_innerScala_kbmOctaveDegree = 12;
        mtof_tilde_01_innerScala_kbmMapSize = 0;
        mtof_tilde_01_innerScala_refFreq = 261.63;
        param_05_lastValue = 0;
        ip_01_lastIndex = 0;
        ip_01_lastValue = 0;
        ip_01_resetCount = 0;
        ip_01_sigbuf = nullptr;
        ip_01_setupDone = false;
        param_06_lastValue = 0;
        ip_02_lastIndex = 0;
        ip_02_lastValue = 0;
        ip_02_resetCount = 0;
        ip_02_sigbuf = nullptr;
        ip_02_setupDone = false;
        ip_03_lastIndex = 0;
        ip_03_lastValue = 0;
        ip_03_resetCount = 0;
        ip_03_sigbuf = nullptr;
        ip_03_setupDone = false;
        param_07_lastValue = 0;
        numberobj_23_currentFormat = 6;
        numberobj_23_lastValue = 0;
        cycle_tilde_04_wrap = 0;
        cycle_tilde_04_ph_currentPhase = 0;
        cycle_tilde_04_ph_conv = 0;
        cycle_tilde_04_setupDone = false;
        snapshot_01_calc = 0;
        snapshot_01_nextTime = 0;
        snapshot_01_count = 0;
        snapshot_01_lastValue = 0;
        numberobj_24_currentFormat = 6;
        numberobj_24_lastValue = 0;
        numberobj_25_currentFormat = 6;
        numberobj_25_lastValue = 0;
        snapshot_02_calc = 0;
        snapshot_02_nextTime = 0;
        snapshot_02_count = 0;
        snapshot_02_lastValue = 0;
        cycle_tilde_05_wrap = 0;
        cycle_tilde_05_ph_currentPhase = 0;
        cycle_tilde_05_ph_conv = 0;
        cycle_tilde_05_setupDone = false;
        numberobj_26_currentFormat = 6;
        numberobj_26_lastValue = 0;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 1;
        parameterOffset = 0;
    }
    
    // member variables
    
        number mtof_tilde_01_midivalue;
        list mtof_tilde_01_scale;
        list mtof_tilde_01_map;
        number mtof_tilde_01_base;
        number receive_01_output_number;
        list receive_01_output_list;
        number dspexpr_16_in1;
        number dspexpr_16_in2;
        number p_04_target;
        number dspexpr_17_in1;
        number dspexpr_17_in2;
        number p_05_target;
        number param_05_value;
        number ip_01_value;
        number ip_01_impulse;
        number param_06_value;
        number ip_02_value;
        number ip_02_impulse;
        number receive_02_output_number;
        list receive_02_output_list;
        number expr_05_in1;
        number expr_05_in2;
        number expr_05_out1;
        number ip_03_value;
        number ip_03_impulse;
        number param_07_value;
        number numberobj_23_value;
        number expr_06_in1;
        number expr_06_in2;
        number expr_06_out1;
        list scale_08_input;
        number scale_08_inlow;
        number scale_08_inhigh;
        number scale_08_outlow;
        number scale_08_outhigh;
        number scale_08_power;
        list scale_08_out;
        number cycle_tilde_04_frequency;
        number cycle_tilde_04_phase_offset;
        number snapshot_01_interval;
        number snapshot_01_out;
        number numberobj_24_value;
        number expr_07_in1;
        number expr_07_in2;
        number expr_07_out1;
        number random_01_limit;
        number random_01_seed;
        number receive_03_output_number;
        list receive_03_output_list;
        number numberobj_25_value;
        number expr_08_in1;
        number expr_08_in2;
        number expr_08_out1;
        list scale_09_input;
        number scale_09_inlow;
        number scale_09_inhigh;
        number scale_09_outlow;
        number scale_09_outhigh;
        number scale_09_power;
        list scale_09_out;
        number snapshot_02_interval;
        number snapshot_02_out;
        number cycle_tilde_05_frequency;
        number cycle_tilde_05_phase_offset;
        number numberobj_26_value;
        number expr_09_in1;
        number expr_09_in2;
        number expr_09_out1;
        number random_02_limit;
        number random_02_seed;
        MillisecondTime _currentTime;
        UInt64 audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        SampleValue * signals[4];
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        number mtof_tilde_01_innerMtoF_lastInValue;
        number mtof_tilde_01_innerMtoF_lastOutValue;
        number mtof_tilde_01_innerMtoF_lastTuning;
        Float64BufferRef mtof_tilde_01_innerMtoF_buffer;
        const Index mtof_tilde_01_innerScala_KBM_MAP_OFFSET = 7;
        bool mtof_tilde_01_innerScala_lastValid;
        number mtof_tilde_01_innerScala_lastNote;
        number mtof_tilde_01_innerScala_lastFreq;
        int mtof_tilde_01_innerScala_sclEntryCount;
        number mtof_tilde_01_innerScala_sclOctaveMul;
        list mtof_tilde_01_innerScala_sclExpMul;
        list mtof_tilde_01_innerScala_kbmValid;
        int mtof_tilde_01_innerScala_kbmMid;
        int mtof_tilde_01_innerScala_kbmRefNum;
        number mtof_tilde_01_innerScala_kbmRefFreq;
        int mtof_tilde_01_innerScala_kbmSize;
        int mtof_tilde_01_innerScala_kbmMin;
        int mtof_tilde_01_innerScala_kbmMax;
        int mtof_tilde_01_innerScala_kbmOctaveDegree;
        Index mtof_tilde_01_innerScala_kbmMapSize;
        number mtof_tilde_01_innerScala_refFreq;
        number param_05_lastValue;
        SampleIndex ip_01_lastIndex;
        number ip_01_lastValue;
        SampleIndex ip_01_resetCount;
        signal ip_01_sigbuf;
        bool ip_01_setupDone;
        number param_06_lastValue;
        SampleIndex ip_02_lastIndex;
        number ip_02_lastValue;
        SampleIndex ip_02_resetCount;
        signal ip_02_sigbuf;
        bool ip_02_setupDone;
        SampleIndex ip_03_lastIndex;
        number ip_03_lastValue;
        SampleIndex ip_03_resetCount;
        signal ip_03_sigbuf;
        bool ip_03_setupDone;
        number param_07_lastValue;
        Int numberobj_23_currentFormat;
        number numberobj_23_lastValue;
        Float64BufferRef cycle_tilde_04_buffer;
        long cycle_tilde_04_wrap;
        uint32_t cycle_tilde_04_phasei;
        SampleValue cycle_tilde_04_f2i;
        number cycle_tilde_04_ph_currentPhase;
        number cycle_tilde_04_ph_conv;
        bool cycle_tilde_04_setupDone;
        number snapshot_01_calc;
        number snapshot_01_nextTime;
        SampleIndex snapshot_01_count;
        number snapshot_01_lastValue;
        Int numberobj_24_currentFormat;
        number numberobj_24_lastValue;
        UInt random_01_nz_state[4] = { };
        Int numberobj_25_currentFormat;
        number numberobj_25_lastValue;
        number snapshot_02_calc;
        number snapshot_02_nextTime;
        SampleIndex snapshot_02_count;
        number snapshot_02_lastValue;
        Float64BufferRef cycle_tilde_05_buffer;
        long cycle_tilde_05_wrap;
        uint32_t cycle_tilde_05_phasei;
        SampleValue cycle_tilde_05_f2i;
        number cycle_tilde_05_ph_currentPhase;
        number cycle_tilde_05_ph_conv;
        bool cycle_tilde_05_setupDone;
        Int numberobj_26_currentFormat;
        number numberobj_26_lastValue;
        UInt random_02_nz_state[4] = { };
        number stackprotect_count;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
        RNBOSubpatcher_794* p_04;
        RNBOSubpatcher_795* p_05;
    
};

class RNBOSubpatcher_807 : public PatcherInterfaceImpl {
    
    friend class drone;
    
    public:
    
    class RNBOSubpatcher_796 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_807;
            friend class drone;
            
            public:
            
            RNBOSubpatcher_796()
            {
            }
            
            ~RNBOSubpatcher_796()
            {
            }
            
            virtual RNBOSubpatcher_807* getPatcher() const {
                return static_cast<RNBOSubpatcher_807 *>(_parentPatcher);
            }
            
            drone* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            number samplerate() const {
                return this->sr;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
                const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
                const SampleValue * in3 = (numInputs >= 3 && inputs[2] ? inputs[2] : this->zeroBuffer);
                this->dspexpr_19_perform(in1, in2, this->signals[0], n);
            
                this->cycle_tilde_07_perform(
                    this->signals[0],
                    this->cycle_tilde_07_phase_offset,
                    this->signals[1],
                    this->dummyBuffer,
                    n
                );
            
                this->dspexpr_21_perform(this->signals[0], in3, this->signals[2], n);
                this->dspexpr_20_perform(this->signals[1], this->signals[2], this->signals[0], n);
                this->dspexpr_18_perform(in1, this->signals[0], this->signals[2], n);
                this->cycle_tilde_06_perform(this->signals[2], this->cycle_tilde_06_phase_offset, out1, out2, n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 3; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->cycle_tilde_07_dspsetup(forceDSPSetup);
                this->cycle_tilde_06_dspsetup(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->updateTime(time);
            
                if (index == 0) {
                    this->cycle_tilde_06_buffer = new Float64Buffer(this->getPatcher()->getPatcher()->RNBODefaultSinus);
                    this->cycle_tilde_06_bufferUpdated();
                    this->cycle_tilde_07_buffer = new Float64Buffer(this->getPatcher()->getPatcher()->RNBODefaultSinus);
                    this->cycle_tilde_07_bufferUpdated();
                }
            }
            
            void initialize() {
                this->assign_defaults();
                this->setState();
                this->cycle_tilde_06_buffer = new Float64Buffer(this->getPatcher()->getPatcher()->RNBODefaultSinus);
                this->cycle_tilde_07_buffer = new Float64Buffer(this->getPatcher()->getPatcher()->RNBODefaultSinus);
            }
            
            protected:
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 3;
            }
            
            Index getNumOutputChannels() const {
                return 2;
            }
            
            void initializeObjects() {}
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {
                this->cycle_tilde_06_buffer->requestSize(16384, 1);
                this->cycle_tilde_06_buffer->setSampleRate(this->sr);
                this->cycle_tilde_07_buffer->requestSize(16384, 1);
                this->cycle_tilde_07_buffer->setSampleRate(this->sr);
                this->cycle_tilde_06_buffer = this->cycle_tilde_06_buffer->allocateIfNeeded();
                this->cycle_tilde_07_buffer = this->cycle_tilde_07_buffer->allocateIfNeeded();
            }
            
            void dspexpr_19_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void cycle_tilde_07_perform(
                const Sample * frequency,
                number phase_offset,
                SampleValue * out1,
                SampleValue * out2,
                Index n
            ) {
                RNBO_UNUSED(phase_offset);
                auto __cycle_tilde_07_f2i = this->cycle_tilde_07_f2i;
                auto __cycle_tilde_07_buffer = this->cycle_tilde_07_buffer;
                auto __cycle_tilde_07_phasei = this->cycle_tilde_07_phasei;
                Index i;
            
                for (i = 0; i < n; i++) {
                    {
                        uint32_t uint_phase;
            
                        {
                            {
                                uint_phase = __cycle_tilde_07_phasei;
                            }
                        }
            
                        uint32_t idx = (uint32_t)(uint32_rshift(uint_phase, 18));
                        number frac = ((BinOpInt)((BinOpInt)uint_phase & (BinOpInt)262143)) * 3.81471181759574e-6;
                        number y0 = __cycle_tilde_07_buffer[(Index)idx];
                        number y1 = __cycle_tilde_07_buffer[(Index)((BinOpInt)(idx + 1) & (BinOpInt)16383)];
                        number y = y0 + frac * (y1 - y0);
            
                        {
                            uint32_t pincr = (uint32_t)(uint32_trunc(frequency[(Index)i] * __cycle_tilde_07_f2i));
                            __cycle_tilde_07_phasei = uint32_add(__cycle_tilde_07_phasei, pincr);
                        }
            
                        out1[(Index)i] = y;
                        out2[(Index)i] = uint_phase * 0.232830643653869629e-9;
                        continue;
                    }
                }
            
                this->cycle_tilde_07_phasei = __cycle_tilde_07_phasei;
            }
            
            void dspexpr_21_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_20_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_18_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] + in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void cycle_tilde_06_perform(
                const Sample * frequency,
                number phase_offset,
                SampleValue * out1,
                SampleValue * out2,
                Index n
            ) {
                RNBO_UNUSED(phase_offset);
                auto __cycle_tilde_06_f2i = this->cycle_tilde_06_f2i;
                auto __cycle_tilde_06_buffer = this->cycle_tilde_06_buffer;
                auto __cycle_tilde_06_phasei = this->cycle_tilde_06_phasei;
                Index i;
            
                for (i = 0; i < n; i++) {
                    {
                        uint32_t uint_phase;
            
                        {
                            {
                                uint_phase = __cycle_tilde_06_phasei;
                            }
                        }
            
                        uint32_t idx = (uint32_t)(uint32_rshift(uint_phase, 18));
                        number frac = ((BinOpInt)((BinOpInt)uint_phase & (BinOpInt)262143)) * 3.81471181759574e-6;
                        number y0 = __cycle_tilde_06_buffer[(Index)idx];
                        number y1 = __cycle_tilde_06_buffer[(Index)((BinOpInt)(idx + 1) & (BinOpInt)16383)];
                        number y = y0 + frac * (y1 - y0);
            
                        {
                            uint32_t pincr = (uint32_t)(uint32_trunc(frequency[(Index)i] * __cycle_tilde_06_f2i));
                            __cycle_tilde_06_phasei = uint32_add(__cycle_tilde_06_phasei, pincr);
                        }
            
                        out1[(Index)i] = y;
                        out2[(Index)i] = uint_phase * 0.232830643653869629e-9;
                        continue;
                    }
                }
            
                this->cycle_tilde_06_phasei = __cycle_tilde_06_phasei;
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            number cycle_tilde_06_ph_next(number freq, number reset) {
                {
                    {
                        if (reset >= 0.)
                            this->cycle_tilde_06_ph_currentPhase = reset;
                    }
                }
            
                number pincr = freq * this->cycle_tilde_06_ph_conv;
            
                if (this->cycle_tilde_06_ph_currentPhase < 0.)
                    this->cycle_tilde_06_ph_currentPhase = 1. + this->cycle_tilde_06_ph_currentPhase;
            
                if (this->cycle_tilde_06_ph_currentPhase > 1.)
                    this->cycle_tilde_06_ph_currentPhase = this->cycle_tilde_06_ph_currentPhase - 1.;
            
                number tmp = this->cycle_tilde_06_ph_currentPhase;
                this->cycle_tilde_06_ph_currentPhase += pincr;
                return tmp;
            }
            
            void cycle_tilde_06_ph_reset() {
                this->cycle_tilde_06_ph_currentPhase = 0;
            }
            
            void cycle_tilde_06_ph_dspsetup() {
                this->cycle_tilde_06_ph_conv = (number)1 / this->sr;
            }
            
            void cycle_tilde_06_dspsetup(bool force) {
                if ((bool)(this->cycle_tilde_06_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->cycle_tilde_06_phasei = 0;
                this->cycle_tilde_06_f2i = (number)4294967296 / this->samplerate();
                this->cycle_tilde_06_wrap = (long)(this->cycle_tilde_06_buffer->getSize()) - 1;
                this->cycle_tilde_06_setupDone = true;
                this->cycle_tilde_06_ph_dspsetup();
            }
            
            void cycle_tilde_06_bufferUpdated() {
                this->cycle_tilde_06_wrap = (long)(this->cycle_tilde_06_buffer->getSize()) - 1;
            }
            
            number cycle_tilde_07_ph_next(number freq, number reset) {
                {
                    {
                        if (reset >= 0.)
                            this->cycle_tilde_07_ph_currentPhase = reset;
                    }
                }
            
                number pincr = freq * this->cycle_tilde_07_ph_conv;
            
                if (this->cycle_tilde_07_ph_currentPhase < 0.)
                    this->cycle_tilde_07_ph_currentPhase = 1. + this->cycle_tilde_07_ph_currentPhase;
            
                if (this->cycle_tilde_07_ph_currentPhase > 1.)
                    this->cycle_tilde_07_ph_currentPhase = this->cycle_tilde_07_ph_currentPhase - 1.;
            
                number tmp = this->cycle_tilde_07_ph_currentPhase;
                this->cycle_tilde_07_ph_currentPhase += pincr;
                return tmp;
            }
            
            void cycle_tilde_07_ph_reset() {
                this->cycle_tilde_07_ph_currentPhase = 0;
            }
            
            void cycle_tilde_07_ph_dspsetup() {
                this->cycle_tilde_07_ph_conv = (number)1 / this->sr;
            }
            
            void cycle_tilde_07_dspsetup(bool force) {
                if ((bool)(this->cycle_tilde_07_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->cycle_tilde_07_phasei = 0;
                this->cycle_tilde_07_f2i = (number)4294967296 / this->samplerate();
                this->cycle_tilde_07_wrap = (long)(this->cycle_tilde_07_buffer->getSize()) - 1;
                this->cycle_tilde_07_setupDone = true;
                this->cycle_tilde_07_ph_dspsetup();
            }
            
            void cycle_tilde_07_bufferUpdated() {
                this->cycle_tilde_07_wrap = (long)(this->cycle_tilde_07_buffer->getSize()) - 1;
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                cycle_tilde_06_frequency = 0;
                cycle_tilde_06_phase_offset = 0;
                dspexpr_18_in1 = 0;
                dspexpr_18_in2 = 0;
                dspexpr_19_in1 = 0;
                dspexpr_19_in2 = 0;
                cycle_tilde_07_frequency = 0;
                cycle_tilde_07_phase_offset = 0;
                dspexpr_20_in1 = 0;
                dspexpr_20_in2 = 0;
                dspexpr_21_in1 = 0;
                dspexpr_21_in2 = 0;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                signals[1] = nullptr;
                signals[2] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                cycle_tilde_06_wrap = 0;
                cycle_tilde_06_ph_currentPhase = 0;
                cycle_tilde_06_ph_conv = 0;
                cycle_tilde_06_setupDone = false;
                cycle_tilde_07_wrap = 0;
                cycle_tilde_07_ph_currentPhase = 0;
                cycle_tilde_07_ph_conv = 0;
                cycle_tilde_07_setupDone = false;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number cycle_tilde_06_frequency;
                number cycle_tilde_06_phase_offset;
                number dspexpr_18_in1;
                number dspexpr_18_in2;
                number dspexpr_19_in1;
                number dspexpr_19_in2;
                number cycle_tilde_07_frequency;
                number cycle_tilde_07_phase_offset;
                number dspexpr_20_in1;
                number dspexpr_20_in2;
                number dspexpr_21_in1;
                number dspexpr_21_in2;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[3];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                Float64BufferRef cycle_tilde_06_buffer;
                long cycle_tilde_06_wrap;
                uint32_t cycle_tilde_06_phasei;
                SampleValue cycle_tilde_06_f2i;
                number cycle_tilde_06_ph_currentPhase;
                number cycle_tilde_06_ph_conv;
                bool cycle_tilde_06_setupDone;
                Float64BufferRef cycle_tilde_07_buffer;
                long cycle_tilde_07_wrap;
                uint32_t cycle_tilde_07_phasei;
                SampleValue cycle_tilde_07_f2i;
                number cycle_tilde_07_ph_currentPhase;
                number cycle_tilde_07_ph_conv;
                bool cycle_tilde_07_setupDone;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_797 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_807;
            friend class drone;
            
            public:
            
            RNBOSubpatcher_797()
            {
            }
            
            ~RNBOSubpatcher_797()
            {
            }
            
            virtual RNBOSubpatcher_807* getPatcher() const {
                return static_cast<RNBOSubpatcher_807 *>(_parentPatcher);
            }
            
            drone* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            inline number safediv(number num, number denom) {
                return (denom == 0.0 ? 0.0 : num / denom);
            }
            
            number maximum(number x, number y) {
                return (x < y ? y : x);
            }
            
            number mstosamps(MillisecondTime ms) {
                return ms * this->sr * 0.001;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
                const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
            
                this->gen_02_perform(
                    in2,
                    in2,
                    this->gen_02_in3,
                    this->gen_02_in4,
                    this->gen_02_in5,
                    this->gen_02_in6,
                    this->gen_02_attack_lockout,
                    this->signals[0],
                    n
                );
            
                this->dspexpr_22_perform(in1, this->signals[0], out1, n);
                this->signalforwarder_03_perform(this->signals[0], out2, n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 1; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->gen_02_dspsetup(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& preset) {
                this->param_08_getPresetValue(getSubState(preset, "attack"));
                this->param_09_getPresetValue(getSubState(preset, "decay"));
                this->param_10_getPresetValue(getSubState(preset, "sustain"));
                this->param_11_getPresetValue(getSubState(preset, "release"));
            }
            
            void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
                this->updateTime(time);
            
                switch (index) {
                case 0:
                    {
                    this->param_08_value_set(v);
                    break;
                    }
                case 1:
                    {
                    this->param_09_value_set(v);
                    break;
                    }
                case 2:
                    {
                    this->param_10_value_set(v);
                    break;
                    }
                case 3:
                    {
                    this->param_11_value_set(v);
                    break;
                    }
                }
            }
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                case 0:
                    {
                    return this->param_08_value;
                    }
                case 1:
                    {
                    return this->param_09_value;
                    }
                case 2:
                    {
                    return this->param_10_value;
                    }
                case 3:
                    {
                    return this->param_11_value;
                    }
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 4;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                case 0:
                    {
                    return "attack";
                    }
                case 1:
                    {
                    return "decay";
                    }
                case 2:
                    {
                    return "sustain";
                    }
                case 3:
                    {
                    return "release";
                    }
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                case 0:
                    {
                    return "note[1]/env.adsr/attack";
                    }
                case 1:
                    {
                    return "note[1]/env.adsr/decay";
                    }
                case 2:
                    {
                    return "note[1]/env.adsr/sustain";
                    }
                case 3:
                    {
                    return "note[1]/env.adsr/release";
                    }
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
                {
                    switch (index) {
                    case 0:
                        {
                        info->type = ParameterTypeNumber;
                        info->initialValue = 30;
                        info->min = 0;
                        info->max = 5000;
                        info->exponent = 3;
                        info->steps = 0;
                        info->debug = false;
                        info->saveable = true;
                        info->transmittable = true;
                        info->initialized = true;
                        info->visible = true;
                        info->displayName = "";
                        info->unit = "";
                        info->ioType = IOTypeUndefined;
                        info->signalIndex = INVALID_INDEX;
                        break;
                        }
                    case 1:
                        {
                        info->type = ParameterTypeNumber;
                        info->initialValue = 200;
                        info->min = 1;
                        info->max = 5000;
                        info->exponent = 3;
                        info->steps = 0;
                        info->debug = false;
                        info->saveable = true;
                        info->transmittable = true;
                        info->initialized = true;
                        info->visible = true;
                        info->displayName = "";
                        info->unit = "";
                        info->ioType = IOTypeUndefined;
                        info->signalIndex = INVALID_INDEX;
                        break;
                        }
                    case 2:
                        {
                        info->type = ParameterTypeNumber;
                        info->initialValue = 0.5;
                        info->min = 0;
                        info->max = 1;
                        info->exponent = 0.8;
                        info->steps = 0;
                        info->debug = false;
                        info->saveable = true;
                        info->transmittable = true;
                        info->initialized = true;
                        info->visible = true;
                        info->displayName = "";
                        info->unit = "";
                        info->ioType = IOTypeUndefined;
                        info->signalIndex = INVALID_INDEX;
                        break;
                        }
                    case 3:
                        {
                        info->type = ParameterTypeNumber;
                        info->initialValue = 300;
                        info->min = 1;
                        info->max = 90000;
                        info->exponent = 5;
                        info->steps = 0;
                        info->debug = false;
                        info->saveable = true;
                        info->transmittable = true;
                        info->initialized = true;
                        info->visible = true;
                        info->displayName = "";
                        info->unit = "";
                        info->ioType = IOTypeUndefined;
                        info->signalIndex = INVALID_INDEX;
                        break;
                        }
                    }
                }
            }
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                case 2:
                    {
                    {
                        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                        ParameterValue normalizedValue = (value - 0) / (1 - 0);
            
                        {
                            if (normalizedValue != 0.0) {
                                normalizedValue = rnbo_exp(
                                    rnbo_log((normalizedValue <= 0.0000000001 ? 0.0000000001 : normalizedValue)) * 1. / (number)0.8
                                );
                            }
                        }
            
                        return normalizedValue;
                    }
                    }
                case 0:
                    {
                    {
                        value = (value < 0 ? 0 : (value > 5000 ? 5000 : value));
                        ParameterValue normalizedValue = (value - 0) / (5000 - 0);
            
                        {
                            if (normalizedValue != 0.0) {
                                normalizedValue = rnbo_exp(
                                    rnbo_log((normalizedValue <= 0.0000000001 ? 0.0000000001 : normalizedValue)) * 1. / (number)3
                                );
                            }
                        }
            
                        return normalizedValue;
                    }
                    }
                case 1:
                    {
                    {
                        value = (value < 1 ? 1 : (value > 5000 ? 5000 : value));
                        ParameterValue normalizedValue = (value - 1) / (5000 - 1);
            
                        {
                            if (normalizedValue != 0.0) {
                                normalizedValue = rnbo_exp(
                                    rnbo_log((normalizedValue <= 0.0000000001 ? 0.0000000001 : normalizedValue)) * 1. / (number)3
                                );
                            }
                        }
            
                        return normalizedValue;
                    }
                    }
                case 3:
                    {
                    {
                        value = (value < 1 ? 1 : (value > 90000 ? 90000 : value));
                        ParameterValue normalizedValue = (value - 1) / (90000 - 1);
            
                        {
                            if (normalizedValue != 0.0) {
                                normalizedValue = rnbo_exp(
                                    rnbo_log((normalizedValue <= 0.0000000001 ? 0.0000000001 : normalizedValue)) * 1. / (number)5
                                );
                            }
                        }
            
                        return normalizedValue;
                    }
                    }
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                case 2:
                    {
                    {
                        {
                            if (value == 0.0) {
                                return 0;
                            } else {
                                return 0 + rnbo_exp(rnbo_log((value <= 0.0000000001 ? 0.0000000001 : value)) * 0.8) * (1 - 0);
                            }
                        }
                    }
                    }
                case 0:
                    {
                    {
                        {
                            if (value == 0.0) {
                                return 0;
                            } else {
                                return 0 + rnbo_exp(rnbo_log((value <= 0.0000000001 ? 0.0000000001 : value)) * 3) * (5000 - 0);
                            }
                        }
                    }
                    }
                case 1:
                    {
                    {
                        {
                            if (value == 0.0) {
                                return 1;
                            } else {
                                return 1 + rnbo_exp(rnbo_log((value <= 0.0000000001 ? 0.0000000001 : value)) * 3) * (5000 - 1);
                            }
                        }
                    }
                    }
                case 3:
                    {
                    {
                        {
                            if (value == 0.0) {
                                return 1;
                            } else {
                                return 1 + rnbo_exp(rnbo_log((value <= 0.0000000001 ? 0.0000000001 : value)) * 5) * (90000 - 1);
                            }
                        }
                    }
                    }
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                case 0:
                    {
                    return this->param_08_value_constrain(value);
                    }
                case 1:
                    {
                    return this->param_09_value_constrain(value);
                    }
                case 2:
                    {
                    return this->param_10_value_constrain(value);
                    }
                case 3:
                    {
                    return this->param_11_value_constrain(value);
                    }
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            void param_08_value_set(number v) {
                v = this->param_08_value_constrain(v);
                this->param_08_value = v;
                this->sendParameter(0, false);
            
                if (this->param_08_value != this->param_08_lastValue) {
                    this->getEngine()->presetTouched();
                    this->param_08_lastValue = this->param_08_value;
                }
            
                this->gen_02_in3_set(v);
            }
            
            void param_09_value_set(number v) {
                v = this->param_09_value_constrain(v);
                this->param_09_value = v;
                this->sendParameter(1, false);
            
                if (this->param_09_value != this->param_09_lastValue) {
                    this->getEngine()->presetTouched();
                    this->param_09_lastValue = this->param_09_value;
                }
            
                this->gen_02_in4_set(v);
            }
            
            void param_10_value_set(number v) {
                v = this->param_10_value_constrain(v);
                this->param_10_value = v;
                this->sendParameter(2, false);
            
                if (this->param_10_value != this->param_10_lastValue) {
                    this->getEngine()->presetTouched();
                    this->param_10_lastValue = this->param_10_value;
                }
            
                this->gen_02_in5_set(v);
            }
            
            void param_11_value_set(number v) {
                v = this->param_11_value_constrain(v);
                this->param_11_value = v;
                this->sendParameter(3, false);
            
                if (this->param_11_value != this->param_11_lastValue) {
                    this->getEngine()->presetTouched();
                    this->param_11_lastValue = this->param_11_value;
                }
            
                this->gen_02_in6_set(v);
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 2;
            }
            
            Index getNumOutputChannels() const {
                return 2;
            }
            
            void initializeObjects() {
                this->gen_02_attack_has_ended_init();
                this->gen_02_sustain_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {
                this->updateTime(this->getEngine()->getCurrentTime());
            
                {
                    this->scheduleParamInit(0, 0);
                }
            
                {
                    this->scheduleParamInit(1, 0);
                }
            
                {
                    this->scheduleParamInit(2, 0);
                }
            
                {
                    this->scheduleParamInit(3, 0);
                }
            }
            
            void allocateDataRefs() {}
            
            number param_08_value_constrain(number v) const {
                v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));
                return v;
            }
            
            void gen_02_in3_set(number v) {
                this->gen_02_in3 = v;
            }
            
            number param_09_value_constrain(number v) const {
                v = (v > 5000 ? 5000 : (v < 1 ? 1 : v));
                return v;
            }
            
            void gen_02_in4_set(number v) {
                this->gen_02_in4 = v;
            }
            
            number param_10_value_constrain(number v) const {
                v = (v > 1 ? 1 : (v < 0 ? 0 : v));
                return v;
            }
            
            void gen_02_in5_set(number v) {
                this->gen_02_in5 = v;
            }
            
            number param_11_value_constrain(number v) const {
                v = (v > 90000 ? 90000 : (v < 1 ? 1 : v));
                return v;
            }
            
            void gen_02_in6_set(number v) {
                this->gen_02_in6 = v;
            }
            
            void gen_02_perform(
                const Sample * in1,
                const Sample * in2,
                number in3,
                number in4,
                number in5,
                number in6,
                number attack_lockout,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(attack_lockout);
                auto __gen_02_sustain_value = this->gen_02_sustain_value;
                auto __gen_02_attack_has_ended_value = this->gen_02_attack_has_ended_value;
                auto min_1_0 = this->maximum(in3, 0.1);
                auto min_2_1 = this->maximum(in4, 0.1);
                number clamp_3_2 = (in5 > 1 ? 1 : (in5 < 0 ? 0 : in5));
                auto min_4_3 = this->maximum(in6, 0.1);
                number attack_iter_interval_8 = this->mstosamps(min_1_0) * 0.33333333333333;
                number release_iter_interval_9 = this->mstosamps(min_4_3) * 0.33333333333333;
                number decay_iter_interval_10 = this->mstosamps(min_2_1) * 0.33333333333333;
                number sustain_smoothing_12 = 1 - ((this->mstosamps(20) == 0. ? 0. : (number)1 / this->mstosamps(20)));
                Index i;
            
                for (i = 0; i < n; i++) {
                    number trigger_5 = this->gen_02_delta_4_next(in2[(Index)i] > 0) > 0;
                    number is_released_6 = in1[(Index)i] == 0;
                    number is_attacking_7 = ((bool)(trigger_5) || (bool)(!(bool)(__gen_02_attack_has_ended_value))) && ((bool)(!(bool)(is_released_6)) || 0);
                    number decay_iter_interval_5_11 = !(bool)(is_released_6) * decay_iter_interval_10 + is_released_6 * release_iter_interval_9;
                    __gen_02_sustain_value = clamp_3_2 + sustain_smoothing_12 * (__gen_02_sustain_value - clamp_3_2);
                    number ad_target_13 = (is_attacking_7 > 0 ? 1.0523956964913 : -0.052395696491256);
                    number asr_target_14 = ((bool)(!(bool)(is_released_6)) || (bool)(is_attacking_7) ? 1.0523956964913 : -0.052395696491256);
                    number ad_16 = this->gen_02_slide_15_next(ad_target_13, attack_iter_interval_8, decay_iter_interval_5_11);
                    number ad_6_17 = (ad_16 > 1 ? 1 : (ad_16 < 0 ? 0 : ad_16));
                    number asr_19 = this->gen_02_slide_18_next(asr_target_14, attack_iter_interval_8, release_iter_interval_9);
                    number asr_7_20 = (asr_19 > 1 ? 1 : (asr_19 < 0 ? 0 : asr_19));
                    __gen_02_attack_has_ended_value = (bool)(!(bool)(is_attacking_7)) || ad_6_17 >= 1;
                    number expr_8_21 = ad_6_17 + __gen_02_sustain_value * (asr_7_20 - ad_6_17);
                    out1[(Index)i] = expr_8_21;
                }
            
                this->gen_02_attack_has_ended_value = __gen_02_attack_has_ended_value;
                this->gen_02_sustain_value = __gen_02_sustain_value;
            }
            
            void dspexpr_22_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void signalforwarder_03_perform(const SampleValue * input, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            number gen_02_attack_has_ended_getvalue() {
                return this->gen_02_attack_has_ended_value;
            }
            
            void gen_02_attack_has_ended_setvalue(number val) {
                this->gen_02_attack_has_ended_value = val;
            }
            
            void gen_02_attack_has_ended_reset() {
                this->gen_02_attack_has_ended_value = 0;
            }
            
            void gen_02_attack_has_ended_init() {
                this->gen_02_attack_has_ended_value = 0;
            }
            
            number gen_02_sustain_getvalue() {
                return this->gen_02_sustain_value;
            }
            
            void gen_02_sustain_setvalue(number val) {
                this->gen_02_sustain_value = val;
            }
            
            void gen_02_sustain_reset() {
                this->gen_02_sustain_value = 0;
            }
            
            void gen_02_sustain_init() {
                this->gen_02_sustain_value = 0.5;
            }
            
            number gen_02_delta_4_next(number x) {
                number temp = (number)(x - this->gen_02_delta_4_prev);
                this->gen_02_delta_4_prev = x;
                return temp;
            }
            
            void gen_02_delta_4_dspsetup() {
                this->gen_02_delta_4_reset();
            }
            
            void gen_02_delta_4_reset() {
                this->gen_02_delta_4_prev = 0;
            }
            
            number gen_02_slide_15_next(number x, number up, number down) {
                number temp = x - this->gen_02_slide_15_prev;
                auto iup = this->safediv(1., this->maximum(1., rnbo_abs(up)));
                auto idown = this->safediv(1., this->maximum(1., rnbo_abs(down)));
                this->gen_02_slide_15_prev = this->gen_02_slide_15_prev + ((x > this->gen_02_slide_15_prev ? iup : idown)) * temp;
                return this->gen_02_slide_15_prev;
            }
            
            void gen_02_slide_15_reset() {
                this->gen_02_slide_15_prev = 0;
            }
            
            number gen_02_slide_18_next(number x, number up, number down) {
                number temp = x - this->gen_02_slide_18_prev;
                auto iup = this->safediv(1., this->maximum(1., rnbo_abs(up)));
                auto idown = this->safediv(1., this->maximum(1., rnbo_abs(down)));
                this->gen_02_slide_18_prev = this->gen_02_slide_18_prev + ((x > this->gen_02_slide_18_prev ? iup : idown)) * temp;
                return this->gen_02_slide_18_prev;
            }
            
            void gen_02_slide_18_reset() {
                this->gen_02_slide_18_prev = 0;
            }
            
            void gen_02_dspsetup(bool force) {
                if ((bool)(this->gen_02_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->gen_02_setupDone = true;
                this->gen_02_delta_4_dspsetup();
            }
            
            void param_08_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->param_08_value;
            }
            
            void param_08_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->param_08_value_set(preset["value"]);
            }
            
            void param_09_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->param_09_value;
            }
            
            void param_09_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->param_09_value_set(preset["value"]);
            }
            
            void param_10_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->param_10_value;
            }
            
            void param_10_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->param_10_value_set(preset["value"]);
            }
            
            void param_11_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->param_11_value;
            }
            
            void param_11_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->param_11_value_set(preset["value"]);
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                dspexpr_22_in1 = 0;
                dspexpr_22_in2 = 0;
                gen_02_in1 = 0;
                gen_02_in2 = 0;
                gen_02_in3 = 0;
                gen_02_in4 = 0;
                gen_02_in5 = 0;
                gen_02_in6 = 0;
                gen_02_attack_lockout = 0;
                param_08_value = 30;
                param_09_value = 200;
                param_10_value = 0.5;
                param_11_value = 300;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                gen_02_attack_has_ended_value = 0;
                gen_02_sustain_value = 0;
                gen_02_delta_4_prev = 0;
                gen_02_slide_15_prev = 0;
                gen_02_slide_18_prev = 0;
                gen_02_setupDone = false;
                param_08_lastValue = 0;
                param_09_lastValue = 0;
                param_10_lastValue = 0;
                param_11_lastValue = 0;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number dspexpr_22_in1;
                number dspexpr_22_in2;
                number gen_02_in1;
                number gen_02_in2;
                number gen_02_in3;
                number gen_02_in4;
                number gen_02_in5;
                number gen_02_in6;
                number gen_02_attack_lockout;
                number param_08_value;
                number param_09_value;
                number param_10_value;
                number param_11_value;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[1];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                number gen_02_attack_has_ended_value;
                number gen_02_sustain_value;
                number gen_02_delta_4_prev;
                number gen_02_slide_15_prev;
                number gen_02_slide_18_prev;
                bool gen_02_setupDone;
                number param_08_lastValue;
                number param_09_lastValue;
                number param_10_lastValue;
                number param_11_lastValue;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    RNBOSubpatcher_807()
    {
    }
    
    ~RNBOSubpatcher_807()
    {
        delete this->p_06;
        delete this->p_07;
    }
    
    virtual drone* getPatcher() const {
        return static_cast<drone *>(_parentPatcher);
    }
    
    drone* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
        getEngine()->flushClockEvents(this, -1508480176, false);
        getEngine()->flushClockEvents(this, -871642103, false);
        getEngine()->flushClockEvents(this, 1646922831, false);
    }
    
    inline number linearinterp(number frac, number x, number y) {
        return x + (y - x) * frac;
    }
    
    inline number safediv(number num, number denom) {
        return (denom == 0.0 ? 0.0 : num / denom);
    }
    
    number safepow(number base, number exponent) {
        return fixnan(rnbo_pow(base, exponent));
    }
    
    number scale(
        number x,
        number lowin,
        number hiin,
        number lowout,
        number highout,
        number pow
    ) {
        auto inscale = this->safediv(1., hiin - lowin);
        number outdiff = highout - lowout;
        number value = (x - lowin) * inscale;
    
        if (pow != 1) {
            if (value > 0)
                value = this->safepow(value, pow);
            else
                value = -this->safepow(-value, pow);
        }
    
        value = value * outdiff + lowout;
        return value;
    }
    
    number samplerate() const {
        return this->sr;
    }
    
    Index voice() {
        return this->_voiceIndex;
    }
    
    number random(number low, number high) {
        number range = high - low;
        return globalrandom() * range + low;
    }
    
    Index getNumMidiInputPorts() const {
        return 0;
    }
    
    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        const SampleValue * const* inputs,
        Index numInputs,
        SampleValue * const* outputs,
        Index numOutputs,
        Index n
    ) {
        RNBO_UNUSED(numInputs);
        RNBO_UNUSED(inputs);
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
        this->mtof_tilde_02_perform(this->mtof_tilde_02_midivalue, this->signals[0], n);
        this->dspexpr_24_perform(this->signals[0], this->dspexpr_24_in2, this->signals[1], n);
        this->ip_04_perform(this->signals[0], n);
        this->ip_05_perform(this->signals[2], n);
    
        this->p_06_perform(
            this->signals[1],
            this->signals[0],
            this->signals[2],
            this->signals[3],
            this->dummyBuffer,
            n
        );
    
        this->ip_06_perform(this->signals[2], n);
        this->p_07_perform(this->signals[3], this->signals[2], this->signals[0], this->dummyBuffer, n);
        this->dspexpr_23_perform(this->signals[0], this->dspexpr_23_in2, out1, n);
    
        this->cycle_tilde_08_perform(
            this->cycle_tilde_08_frequency,
            this->cycle_tilde_08_phase_offset,
            this->signals[0],
            this->dummyBuffer,
            n
        );
    
        this->snapshot_03_perform(this->signals[0], n);
    
        this->cycle_tilde_09_perform(
            this->cycle_tilde_09_frequency,
            this->cycle_tilde_09_phase_offset,
            this->signals[0],
            this->dummyBuffer,
            n
        );
    
        this->snapshot_04_perform(this->signals[0], n);
        this->stackprotect_perform(n);
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            Index i;
    
            for (i = 0; i < 4; i++) {
                this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
            }
    
            this->ip_04_sigbuf = resizeSignal(this->ip_04_sigbuf, this->maxvs, maxBlockSize);
            this->ip_05_sigbuf = resizeSignal(this->ip_05_sigbuf, this->maxvs, maxBlockSize);
            this->ip_06_sigbuf = resizeSignal(this->ip_06_sigbuf, this->maxvs, maxBlockSize);
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        this->ip_04_dspsetup(forceDSPSetup);
        this->ip_05_dspsetup(forceDSPSetup);
        this->ip_06_dspsetup(forceDSPSetup);
        this->cycle_tilde_08_dspsetup(forceDSPSetup);
        this->cycle_tilde_09_dspsetup(forceDSPSetup);
        this->p_06->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_07->prepareToProcess(sampleRate, maxBlockSize, force);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            {
            this->setProbingIndex(-1);
            break;
            }
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    void onSampleRateChanged(double ) {}
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {
        this->p_06 = new RNBOSubpatcher_796();
        this->p_06->setEngineAndPatcher(this->getEngine(), this);
        this->p_06->initialize();
        this->p_06->setParameterOffset(this->getParameterOffset(this->p_06));
        this->p_07 = new RNBOSubpatcher_797();
        this->p_07->setEngineAndPatcher(this->getEngine(), this);
        this->p_07->initialize();
        this->p_07->setParameterOffset(this->getParameterOffset(this->p_07));
    }
    
    void getPreset(PatcherStateInterface& preset) {
        this->param_12_getPresetValue(getSubState(preset, "ratio"));
        this->param_13_getPresetValue(getSubState(preset, "index"));
        this->param_14_getPresetValue(getSubState(preset, "lfo"));
        this->p_06->getPreset(getSubState(getSubState(preset, "__sps"), "osc.fm[4]"));
        this->p_07->getPreset(getSubState(getSubState(preset, "__sps"), "env.adsr"));
    }
    
    void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
        this->updateTime(time);
    
        switch (index) {
        case 0:
            {
            this->param_12_value_set(v);
            break;
            }
        case 1:
            {
            this->param_13_value_set(v);
            break;
            }
        case 2:
            {
            this->param_14_value_set(v);
            break;
            }
        default:
            {
            index -= 3;
    
            if (index < this->p_06->getNumParameters())
                this->p_06->setParameterValue(index, v, time);
    
            index -= this->p_06->getNumParameters();
    
            if (index < this->p_07->getNumParameters())
                this->p_07->setParameterValue(index, v, time);
    
            break;
            }
        }
    }
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
        this->setParameterValue(index, this->getParameterValue(index), time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        case 0:
            {
            return this->param_12_value;
            }
        case 1:
            {
            return this->param_13_value;
            }
        case 2:
            {
            return this->param_14_value;
            }
        default:
            {
            index -= 3;
    
            if (index < this->p_06->getNumParameters())
                return this->p_06->getParameterValue(index);
    
            index -= this->p_06->getNumParameters();
    
            if (index < this->p_07->getNumParameters())
                return this->p_07->getParameterValue(index);
    
            return 0;
            }
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 0;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 0;
    }
    
    ParameterIndex getNumParameters() const {
        return 3 + this->p_06->getNumParameters() + this->p_07->getNumParameters();
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        case 0:
            {
            return "ratio";
            }
        case 1:
            {
            return "index";
            }
        case 2:
            {
            return "lfo";
            }
        default:
            {
            index -= 3;
    
            if (index < this->p_06->getNumParameters())
                return this->p_06->getParameterName(index);
    
            index -= this->p_06->getNumParameters();
    
            if (index < this->p_07->getNumParameters())
                return this->p_07->getParameterName(index);
    
            return "bogus";
            }
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        case 0:
            {
            return "note[1]/ratio";
            }
        case 1:
            {
            return "note[1]/index";
            }
        case 2:
            {
            return "note[1]/lfo";
            }
        default:
            {
            index -= 3;
    
            if (index < this->p_06->getNumParameters())
                return this->p_06->getParameterId(index);
    
            index -= this->p_06->getNumParameters();
    
            if (index < this->p_07->getNumParameters())
                return this->p_07->getParameterId(index);
    
            return "bogus";
            }
        }
    }
    
    void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
        {
            switch (index) {
            case 0:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 1;
                info->min = 1;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            case 1:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 1;
                info->min = 1;
                info->max = 20;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            case 2:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 1;
                info->min = 1;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            default:
                {
                index -= 3;
    
                if (index < this->p_06->getNumParameters())
                    this->p_06->getParameterInfo(index, info);
    
                index -= this->p_06->getNumParameters();
    
                if (index < this->p_07->getNumParameters())
                    this->p_07->getParameterInfo(index, info);
    
                break;
                }
            }
        }
    }
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
        if (subpatcher == this->p_06)
            return 3;
    
        if (subpatcher == this->p_07)
            return 3 + this->p_06->getNumParameters();
    
        return 0;
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        case 1:
            {
            {
                value = (value < 1 ? 1 : (value > 20 ? 20 : value));
                ParameterValue normalizedValue = (value - 1) / (20 - 1);
                return normalizedValue;
            }
            }
        case 0:
        case 2:
            {
            {
                value = (value < 1 ? 1 : (value > 100 ? 100 : value));
                ParameterValue normalizedValue = (value - 1) / (100 - 1);
                return normalizedValue;
            }
            }
        default:
            {
            index -= 3;
    
            if (index < this->p_06->getNumParameters())
                return this->p_06->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_06->getNumParameters();
    
            if (index < this->p_07->getNumParameters())
                return this->p_07->convertToNormalizedParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        case 1:
            {
            {
                {
                    return 1 + value * (20 - 1);
                }
            }
            }
        case 0:
        case 2:
            {
            {
                {
                    return 1 + value * (100 - 1);
                }
            }
            }
        default:
            {
            index -= 3;
    
            if (index < this->p_06->getNumParameters())
                return this->p_06->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_06->getNumParameters();
    
            if (index < this->p_07->getNumParameters())
                return this->p_07->convertFromNormalizedParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        case 0:
            {
            return this->param_12_value_constrain(value);
            }
        case 1:
            {
            return this->param_13_value_constrain(value);
            }
        case 2:
            {
            return this->param_14_value_constrain(value);
            }
        default:
            {
            index -= 3;
    
            if (index < this->p_06->getNumParameters())
                return this->p_06->constrainParameterValue(index, value);
    
            index -= this->p_06->getNumParameters();
    
            if (index < this->p_07->getNumParameters())
                return this->p_07->constrainParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
        RNBO_UNUSED(hasValue);
        this->updateTime(time);
    
        switch (index) {
        case -1508480176:
            {
            this->snapshot_03_out_set(value);
            break;
            }
        case -871642103:
            {
            this->loadbang_02_startupbang_bang();
            break;
            }
        case 1646922831:
            {
            this->snapshot_04_out_set(value);
            break;
            }
        }
    }
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("valin"):
            {
            if (TAG("note[1]/number_obj-76") == objectId)
                this->numberobj_27_valin_set(payload);
    
            if (TAG("note[1]/number_obj-12") == objectId)
                this->numberobj_28_valin_set(payload);
    
            if (TAG("note[1]/number_obj-20") == objectId)
                this->numberobj_29_valin_set(payload);
    
            if (TAG("note[1]/number_obj-3") == objectId)
                this->numberobj_30_valin_set(payload);
    
            break;
            }
        case TAG("format"):
            {
            if (TAG("note[1]/number_obj-76") == objectId)
                this->numberobj_27_format_set(payload);
    
            if (TAG("note[1]/number_obj-12") == objectId)
                this->numberobj_28_format_set(payload);
    
            if (TAG("note[1]/number_obj-20") == objectId)
                this->numberobj_29_format_set(payload);
    
            if (TAG("note[1]/number_obj-3") == objectId)
                this->numberobj_30_format_set(payload);
    
            break;
            }
        }
    
        this->p_06->processNumMessage(tag, objectId, time, payload);
        this->p_07->processNumMessage(tag, objectId, time, payload);
    }
    
    void processListMessage(
        MessageTag tag,
        MessageTag objectId,
        MillisecondTime time,
        const list& payload
    ) {
        RNBO_UNUSED(objectId);
        this->updateTime(time);
        this->p_06->processListMessage(tag, objectId, time, payload);
        this->p_07->processListMessage(tag, objectId, time, payload);
    }
    
    void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("startupbang"):
            {
            if (TAG("note[1]/loadbang_obj-10") == objectId)
                this->loadbang_02_startupbang_bang();
    
            break;
            }
        case TAG("bangin"):
            {
            if (TAG("note[1]/button_obj-9") == objectId)
                this->button_02_bangin_bang();
    
            break;
            }
        }
    
        this->p_06->processBangMessage(tag, objectId, time);
        this->p_07->processBangMessage(tag, objectId, time);
    }
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
        case TAG("valout"):
            {
            return "valout";
            }
        case TAG("note[1]/number_obj-76"):
            {
            return "note[1]/number_obj-76";
            }
        case TAG("setup"):
            {
            return "setup";
            }
        case TAG("note[1]/number_obj-12"):
            {
            return "note[1]/number_obj-12";
            }
        case TAG("bangout"):
            {
            return "bangout";
            }
        case TAG("note[1]/button_obj-9"):
            {
            return "note[1]/button_obj-9";
            }
        case TAG("note[1]/number_obj-20"):
            {
            return "note[1]/number_obj-20";
            }
        case TAG("note[1]/number_obj-3"):
            {
            return "note[1]/number_obj-3";
            }
        case TAG("valin"):
            {
            return "valin";
            }
        case TAG("format"):
            {
            return "format";
            }
        case TAG("startupbang"):
            {
            return "startupbang";
            }
        case TAG("note[1]/loadbang_obj-10"):
            {
            return "note[1]/loadbang_obj-10";
            }
        case TAG("bangin"):
            {
            return "bangin";
            }
        }
    
        auto subpatchResult_0 = this->p_06->resolveTag(tag);
    
        if (subpatchResult_0)
            return subpatchResult_0;
    
        auto subpatchResult_1 = this->p_07->resolveTag(tag);
    
        if (subpatchResult_1)
            return subpatchResult_1;
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        default:
            {
            return nullptr;
            }
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 0;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
        this->updateTime(time);
    
        if (index == 1) {
            this->mtof_tilde_02_innerMtoF_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultMtofLookupTable256);
        }
    
        if (index == 0) {
            this->cycle_tilde_08_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultSinus);
            this->cycle_tilde_08_bufferUpdated();
            this->cycle_tilde_09_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultSinus);
            this->cycle_tilde_09_bufferUpdated();
        }
    
        this->p_06->processDataViewUpdate(index, time);
        this->p_07->processDataViewUpdate(index, time);
    }
    
    void initialize() {
        this->assign_defaults();
        this->setState();
        this->mtof_tilde_02_innerMtoF_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultMtofLookupTable256);
        this->cycle_tilde_08_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultSinus);
        this->cycle_tilde_09_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultSinus);
    }
    
    protected:
    
    void param_12_value_set(number v) {
        v = this->param_12_value_constrain(v);
        this->param_12_value = v;
        this->sendParameter(0, false);
    
        if (this->param_12_value != this->param_12_lastValue) {
            this->getEngine()->presetTouched();
            this->param_12_lastValue = this->param_12_value;
        }
    
        this->ip_04_value_set(v);
    }
    
    void param_13_value_set(number v) {
        v = this->param_13_value_constrain(v);
        this->param_13_value = v;
        this->sendParameter(1, false);
    
        if (this->param_13_value != this->param_13_lastValue) {
            this->getEngine()->presetTouched();
            this->param_13_lastValue = this->param_13_value;
        }
    
        this->ip_05_value_set(v);
    }
    
    void param_14_value_set(number v) {
        v = this->param_14_value_constrain(v);
        this->param_14_value = v;
        this->sendParameter(2, false);
    
        if (this->param_14_value != this->param_14_lastValue) {
            this->getEngine()->presetTouched();
            this->param_14_lastValue = this->param_14_value;
        }
    
        this->cycle_tilde_08_frequency_set(v);
    }
    
    void eventinlet_10_out1_bang_bang() {}
    
    void eventinlet_10_out1_number_set(number v) {
        this->dspexpr_24_in2_set(v);
    }
    
    void numberobj_27_valin_set(number v) {
        this->numberobj_27_value_set(v);
    }
    
    void numberobj_27_format_set(number v) {
        this->numberobj_27_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void snapshot_03_out_set(number v) {
        this->snapshot_03_out = v;
    
        {
            list converted = {v};
            this->scale_10_input_set(converted);
        }
    }
    
    void loadbang_02_startupbang_bang() {
        this->loadbang_02_output_bang();
    }
    
    void numberobj_28_valin_set(number v) {
        this->numberobj_28_value_set(v);
    }
    
    void numberobj_28_format_set(number v) {
        this->numberobj_28_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void button_02_bangin_bang() {
        this->button_02_bangval_bang();
    }
    
    void numberobj_29_valin_set(number v) {
        this->numberobj_29_value_set(v);
    }
    
    void numberobj_29_format_set(number v) {
        this->numberobj_29_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void snapshot_04_out_set(number v) {
        this->snapshot_04_out = v;
    
        {
            list converted = {v};
            this->scale_11_input_set(converted);
        }
    }
    
    void numberobj_30_valin_set(number v) {
        this->numberobj_30_value_set(v);
    }
    
    void numberobj_30_format_set(number v) {
        this->numberobj_30_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 0;
    }
    
    Index getNumOutputChannels() const {
        return 1;
    }
    
    void initializeObjects() {
        this->mtof_tilde_02_innerScala_init();
        this->mtof_tilde_02_init();
        this->ip_04_init();
        this->ip_05_init();
        this->ip_06_init();
        this->numberobj_27_init();
        this->numberobj_28_init();
        this->random_03_nz_init();
        this->numberobj_29_init();
        this->numberobj_30_init();
        this->random_04_nz_init();
        this->p_06->initializeObjects();
        this->p_07->initializeObjects();
    }
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {
        this->updateTime(this->getEngine()->getCurrentTime());
        this->p_06->startup();
        this->p_07->startup();
        this->getEngine()->scheduleClockEvent(this, -871642103, 0 + this->_currentTime);;
    
        {
            this->scheduleParamInit(0, 0);
        }
    
        {
            this->scheduleParamInit(1, 0);
        }
    
        {
            this->scheduleParamInit(2, 0);
        }
    }
    
    void allocateDataRefs() {
        this->p_06->allocateDataRefs();
        this->p_07->allocateDataRefs();
        this->mtof_tilde_02_innerMtoF_buffer->requestSize(65536, 1);
        this->mtof_tilde_02_innerMtoF_buffer->setSampleRate(this->sr);
        this->cycle_tilde_08_buffer->requestSize(16384, 1);
        this->cycle_tilde_08_buffer->setSampleRate(this->sr);
        this->cycle_tilde_09_buffer->requestSize(16384, 1);
        this->cycle_tilde_09_buffer->setSampleRate(this->sr);
        this->mtof_tilde_02_innerMtoF_buffer = this->mtof_tilde_02_innerMtoF_buffer->allocateIfNeeded();
        this->cycle_tilde_08_buffer = this->cycle_tilde_08_buffer->allocateIfNeeded();
        this->cycle_tilde_09_buffer = this->cycle_tilde_09_buffer->allocateIfNeeded();
    }
    
    void cycle_tilde_09_frequency_set(number v) {
        this->cycle_tilde_09_frequency = v;
    }
    
    void numberobj_30_output_set(number v) {
        this->cycle_tilde_09_frequency_set(v);
    }
    
    void numberobj_30_value_set(number v) {
        this->numberobj_30_value_setter(v);
        v = this->numberobj_30_value;
        number localvalue = v;
    
        if (this->numberobj_30_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("note[1]/number_obj-3"), localvalue, this->_currentTime);
        this->numberobj_30_output_set(localvalue);
    }
    
    void expr_14_out1_set(number v) {
        this->expr_14_out1 = v;
        this->numberobj_30_value_set(this->expr_14_out1);
    }
    
    void expr_14_in1_set(number in1) {
        this->expr_14_in1 = in1;
    
        this->expr_14_out1_set(
            (this->expr_14_in2 == 0 ? 0 : (this->expr_14_in2 == 0. ? 0. : this->expr_14_in1 / this->expr_14_in2))
        );//#map:note[1]//_obj-4:1
    }
    
    void random_04_result_set(number v) {
        this->expr_14_in1_set(v);
    }
    
    void random_04_trigger_bang() {
        this->random_04_result_set(rnbo_abs(this->random_04_nz_next()) * this->random_04_limit);
    }
    
    void cycle_tilde_08_frequency_set(number v) {
        this->cycle_tilde_08_frequency = v;
    }
    
    void numberobj_28_output_set(number v) {
        this->cycle_tilde_08_frequency_set(v);
    }
    
    void numberobj_28_value_set(number v) {
        this->numberobj_28_value_setter(v);
        v = this->numberobj_28_value;
        number localvalue = v;
    
        if (this->numberobj_28_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("note[1]/number_obj-12"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_28_output_set(localvalue);
    }
    
    void expr_12_out1_set(number v) {
        this->expr_12_out1 = v;
        this->numberobj_28_value_set(this->expr_12_out1);
    }
    
    void expr_12_in1_set(number in1) {
        this->expr_12_in1 = in1;
    
        this->expr_12_out1_set(
            (this->expr_12_in2 == 0 ? 0 : (this->expr_12_in2 == 0. ? 0. : this->expr_12_in1 / this->expr_12_in2))
        );//#map:note[1]//_obj-7:1
    }
    
    void random_03_result_set(number v) {
        this->expr_12_in1_set(v);
    }
    
    void random_03_trigger_bang() {
        this->random_03_result_set(rnbo_abs(this->random_03_nz_next()) * this->random_03_limit);
    }
    
    void button_02_output_bang() {
        this->random_04_trigger_bang();
        this->random_03_trigger_bang();
    }
    
    void button_02_bangval_bang() {
        this->getEngine()->sendBangMessage(TAG("bangout"), TAG("note[1]/button_obj-9"), this->_currentTime);;
        this->button_02_output_bang();
    }
    
    void receive_06_output_bang_bang() {
        this->button_02_bangval_bang();
    }
    
    void ip_06_value_set(number v) {
        this->ip_06_value = v;
        this->ip_06_fillSigBuf();
        this->ip_06_lastValue = v;
    }
    
    void expr_10_out1_set(number v) {
        this->expr_10_out1 = v;
        this->ip_06_value_set(this->expr_10_out1);
    }
    
    void expr_10_in1_set(number in1) {
        this->expr_10_in1 = in1;
    
        this->expr_10_out1_set(
            (this->expr_10_in2 == 0 ? 0 : (this->expr_10_in2 == 0. ? 0. : this->expr_10_in1 / this->expr_10_in2))
        );//#map:note[1]//_obj-28:1
    }
    
    void expr_10_in2_set(number v) {
        this->expr_10_in2 = v;
    }
    
    void receive_05_output_list_set(const list& v) {
        this->receive_05_output_list = jsCreateListCopy(v);
    
        {
            if (v->length > 1)
                this->expr_10_in2_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->expr_10_in1_set(converted);
        }
    }
    
    void mtof_tilde_02_midivalue_set(number v) {
        this->mtof_tilde_02_midivalue = v;
    }
    
    void receive_04_output_number_set(number v) {
        this->receive_04_output_number = v;
        this->mtof_tilde_02_midivalue_set(v);
    }
    
    void dspexpr_24_in2_set(number v) {
        this->dspexpr_24_in2 = v;
    }
    
    void eventinlet_10_out1_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->dspexpr_24_in2_set(converted);
        }
    }
    
    number param_12_value_constrain(number v) const {
        v = (v > 100 ? 100 : (v < 1 ? 1 : v));
        return v;
    }
    
    void ip_04_value_set(number v) {
        this->ip_04_value = v;
        this->ip_04_fillSigBuf();
        this->ip_04_lastValue = v;
    }
    
    number param_13_value_constrain(number v) const {
        v = (v > 20 ? 20 : (v < 1 ? 1 : v));
        return v;
    }
    
    void ip_05_value_set(number v) {
        this->ip_05_value = v;
        this->ip_05_fillSigBuf();
        this->ip_05_lastValue = v;
    }
    
    number param_14_value_constrain(number v) const {
        v = (v > 100 ? 100 : (v < 1 ? 1 : v));
        return v;
    }
    
    void dspexpr_23_in2_set(number v) {
        this->dspexpr_23_in2 = v;
    }
    
    void numberobj_27_output_set(number v) {
        this->dspexpr_23_in2_set(v);
    }
    
    void numberobj_27_value_set(number v) {
        this->numberobj_27_value_setter(v);
        v = this->numberobj_27_value;
        number localvalue = v;
    
        if (this->numberobj_27_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("note[1]/number_obj-76"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_27_output_set(localvalue);
    }
    
    void expr_11_out1_set(number v) {
        this->expr_11_out1 = v;
        this->numberobj_27_value_set(this->expr_11_out1);
    }
    
    void expr_11_in1_set(number in1) {
        this->expr_11_in1 = in1;
    
        this->expr_11_out1_set(
            (this->expr_11_in2 == 0 ? 0 : (this->expr_11_in2 == 0. ? 0. : this->expr_11_in1 / this->expr_11_in2))
        );//#map:note[1]//_obj-73:1
    }
    
    void expr_11_in2_set(number v) {
        this->expr_11_in2 = v;
    }
    
    void scale_10_out_set(const list& v) {
        this->scale_10_out = jsCreateListCopy(v);
    
        {
            if (v->length > 1)
                this->expr_11_in2_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->expr_11_in1_set(converted);
        }
    }
    
    void scale_10_input_set(const list& v) {
        this->scale_10_input = jsCreateListCopy(v);
        list tmp = {};
    
        for (Index i = 0; i < v->length; i++) {
            tmp->push(this->scale(
                v[(Index)i],
                this->scale_10_inlow,
                this->scale_10_inhigh,
                this->scale_10_outlow,
                this->scale_10_outhigh,
                this->scale_10_power
            ));
        }
    
        this->scale_10_out_set(tmp);
    }
    
    void loadbang_02_output_bang() {
        this->button_02_bangval_bang();
    }
    
    void numberobj_29_output_set(number v) {
        this->param_13_value_set(v);
    }
    
    void numberobj_29_value_set(number v) {
        this->numberobj_29_value_setter(v);
        v = this->numberobj_29_value;
        number localvalue = v;
    
        if (this->numberobj_29_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("note[1]/number_obj-20"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_29_output_set(localvalue);
    }
    
    void expr_13_out1_set(number v) {
        this->expr_13_out1 = v;
        this->numberobj_29_value_set(this->expr_13_out1);
    }
    
    void expr_13_in1_set(number in1) {
        this->expr_13_in1 = in1;
    
        this->expr_13_out1_set(
            (this->expr_13_in2 == 0 ? 0 : (this->expr_13_in2 == 0. ? 0. : this->expr_13_in1 / this->expr_13_in2))
        );//#map:note[1]//_obj-13:1
    }
    
    void expr_13_in2_set(number v) {
        this->expr_13_in2 = v;
    }
    
    void scale_11_out_set(const list& v) {
        this->scale_11_out = jsCreateListCopy(v);
    
        {
            if (v->length > 1)
                this->expr_13_in2_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->expr_13_in1_set(converted);
        }
    }
    
    void scale_11_input_set(const list& v) {
        this->scale_11_input = jsCreateListCopy(v);
        list tmp = {};
    
        for (Index i = 0; i < v->length; i++) {
            tmp->push(this->scale(
                v[(Index)i],
                this->scale_11_inlow,
                this->scale_11_inhigh,
                this->scale_11_outlow,
                this->scale_11_outhigh,
                this->scale_11_power
            ));
        }
    
        this->scale_11_out_set(tmp);
    }
    
    void mtof_tilde_02_perform(number midivalue, SampleValue * out, Index n) {
        auto __mtof_tilde_02_base = this->mtof_tilde_02_base;
    
        for (Index i = 0; i < n; i++) {
            out[(Index)i] = this->mtof_tilde_02_innerMtoF_next(midivalue, __mtof_tilde_02_base);
        }
    }
    
    void dspexpr_24_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2;//#map:_###_obj_###_:1
        }
    }
    
    void ip_04_perform(SampleValue * out, Index n) {
        auto __ip_04_lastValue = this->ip_04_lastValue;
        auto __ip_04_lastIndex = this->ip_04_lastIndex;
    
        for (Index i = 0; i < n; i++) {
            out[(Index)i] = ((SampleIndex)(i) >= __ip_04_lastIndex ? __ip_04_lastValue : this->ip_04_sigbuf[(Index)i]);
        }
    
        __ip_04_lastIndex = 0;
        this->ip_04_lastIndex = __ip_04_lastIndex;
    }
    
    void ip_05_perform(SampleValue * out, Index n) {
        auto __ip_05_lastValue = this->ip_05_lastValue;
        auto __ip_05_lastIndex = this->ip_05_lastIndex;
    
        for (Index i = 0; i < n; i++) {
            out[(Index)i] = ((SampleIndex)(i) >= __ip_05_lastIndex ? __ip_05_lastValue : this->ip_05_sigbuf[(Index)i]);
        }
    
        __ip_05_lastIndex = 0;
        this->ip_05_lastIndex = __ip_05_lastIndex;
    }
    
    void p_06_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        const SampleValue * in3,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        ConstSampleArray<3> ins = {in1, in2, in3};
        SampleArray<2> outs = {out1, out2};
        this->p_06->process(ins, 3, outs, 2, n);
    }
    
    void ip_06_perform(SampleValue * out, Index n) {
        auto __ip_06_lastValue = this->ip_06_lastValue;
        auto __ip_06_lastIndex = this->ip_06_lastIndex;
    
        for (Index i = 0; i < n; i++) {
            out[(Index)i] = ((SampleIndex)(i) >= __ip_06_lastIndex ? __ip_06_lastValue : this->ip_06_sigbuf[(Index)i]);
        }
    
        __ip_06_lastIndex = 0;
        this->ip_06_lastIndex = __ip_06_lastIndex;
    }
    
    void p_07_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        // subpatcher: env.adsr
        ConstSampleArray<2> ins = {in1, in2};
    
        SampleArray<2> outs = {out1, out2};
        this->p_07->process(ins, 2, outs, 2, n);
    }
    
    void dspexpr_23_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2;//#map:_###_obj_###_:1
        }
    }
    
    void cycle_tilde_08_perform(
        number frequency,
        number phase_offset,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        RNBO_UNUSED(phase_offset);
        auto __cycle_tilde_08_f2i = this->cycle_tilde_08_f2i;
        auto __cycle_tilde_08_buffer = this->cycle_tilde_08_buffer;
        auto __cycle_tilde_08_phasei = this->cycle_tilde_08_phasei;
        Index i;
    
        for (i = 0; i < n; i++) {
            {
                uint32_t uint_phase;
    
                {
                    {
                        uint_phase = __cycle_tilde_08_phasei;
                    }
                }
    
                uint32_t idx = (uint32_t)(uint32_rshift(uint_phase, 18));
                number frac = ((BinOpInt)((BinOpInt)uint_phase & (BinOpInt)262143)) * 3.81471181759574e-6;
                number y0 = __cycle_tilde_08_buffer[(Index)idx];
                number y1 = __cycle_tilde_08_buffer[(Index)((BinOpInt)(idx + 1) & (BinOpInt)16383)];
                number y = y0 + frac * (y1 - y0);
    
                {
                    uint32_t pincr = (uint32_t)(uint32_trunc(frequency * __cycle_tilde_08_f2i));
                    __cycle_tilde_08_phasei = uint32_add(__cycle_tilde_08_phasei, pincr);
                }
    
                out1[(Index)i] = y;
                out2[(Index)i] = uint_phase * 0.232830643653869629e-9;
                continue;
            }
        }
    
        this->cycle_tilde_08_phasei = __cycle_tilde_08_phasei;
    }
    
    void snapshot_03_perform(const SampleValue * input_signal, Index n) {
        auto __snapshot_03_lastValue = this->snapshot_03_lastValue;
        auto __snapshot_03_calc = this->snapshot_03_calc;
        auto __snapshot_03_count = this->snapshot_03_count;
        auto __snapshot_03_nextTime = this->snapshot_03_nextTime;
        auto __snapshot_03_interval = this->snapshot_03_interval;
        number timeInSamples = this->msToSamps(__snapshot_03_interval, this->sr);
    
        if (__snapshot_03_interval > 0) {
            for (Index i = 0; i < n; i++) {
                if (__snapshot_03_nextTime <= __snapshot_03_count + (SampleIndex)(i)) {
                    {
                        __snapshot_03_calc = input_signal[(Index)i];
                    }
    
                    this->getEngine()->scheduleClockEventWithValue(
                        this,
                        -1508480176,
                        this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                        __snapshot_03_calc
                    );;
    
                    __snapshot_03_calc = 0;
                    __snapshot_03_nextTime += timeInSamples;
                }
            }
    
            __snapshot_03_count += this->vs;
        }
    
        __snapshot_03_lastValue = input_signal[(Index)(n - 1)];
        this->snapshot_03_nextTime = __snapshot_03_nextTime;
        this->snapshot_03_count = __snapshot_03_count;
        this->snapshot_03_calc = __snapshot_03_calc;
        this->snapshot_03_lastValue = __snapshot_03_lastValue;
    }
    
    void cycle_tilde_09_perform(
        number frequency,
        number phase_offset,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        RNBO_UNUSED(phase_offset);
        auto __cycle_tilde_09_f2i = this->cycle_tilde_09_f2i;
        auto __cycle_tilde_09_buffer = this->cycle_tilde_09_buffer;
        auto __cycle_tilde_09_phasei = this->cycle_tilde_09_phasei;
        Index i;
    
        for (i = 0; i < n; i++) {
            {
                uint32_t uint_phase;
    
                {
                    {
                        uint_phase = __cycle_tilde_09_phasei;
                    }
                }
    
                uint32_t idx = (uint32_t)(uint32_rshift(uint_phase, 18));
                number frac = ((BinOpInt)((BinOpInt)uint_phase & (BinOpInt)262143)) * 3.81471181759574e-6;
                number y0 = __cycle_tilde_09_buffer[(Index)idx];
                number y1 = __cycle_tilde_09_buffer[(Index)((BinOpInt)(idx + 1) & (BinOpInt)16383)];
                number y = y0 + frac * (y1 - y0);
    
                {
                    uint32_t pincr = (uint32_t)(uint32_trunc(frequency * __cycle_tilde_09_f2i));
                    __cycle_tilde_09_phasei = uint32_add(__cycle_tilde_09_phasei, pincr);
                }
    
                out1[(Index)i] = y;
                out2[(Index)i] = uint_phase * 0.232830643653869629e-9;
                continue;
            }
        }
    
        this->cycle_tilde_09_phasei = __cycle_tilde_09_phasei;
    }
    
    void snapshot_04_perform(const SampleValue * input_signal, Index n) {
        auto __snapshot_04_lastValue = this->snapshot_04_lastValue;
        auto __snapshot_04_calc = this->snapshot_04_calc;
        auto __snapshot_04_count = this->snapshot_04_count;
        auto __snapshot_04_nextTime = this->snapshot_04_nextTime;
        auto __snapshot_04_interval = this->snapshot_04_interval;
        number timeInSamples = this->msToSamps(__snapshot_04_interval, this->sr);
    
        if (__snapshot_04_interval > 0) {
            for (Index i = 0; i < n; i++) {
                if (__snapshot_04_nextTime <= __snapshot_04_count + (SampleIndex)(i)) {
                    {
                        __snapshot_04_calc = input_signal[(Index)i];
                    }
    
                    this->getEngine()->scheduleClockEventWithValue(
                        this,
                        1646922831,
                        this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                        __snapshot_04_calc
                    );;
    
                    __snapshot_04_calc = 0;
                    __snapshot_04_nextTime += timeInSamples;
                }
            }
    
            __snapshot_04_count += this->vs;
        }
    
        __snapshot_04_lastValue = input_signal[(Index)(n - 1)];
        this->snapshot_04_nextTime = __snapshot_04_nextTime;
        this->snapshot_04_count = __snapshot_04_count;
        this->snapshot_04_calc = __snapshot_04_calc;
        this->snapshot_04_lastValue = __snapshot_04_lastValue;
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    void numberobj_27_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_27_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_27_value = localvalue;
    }
    
    void numberobj_28_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_28_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_28_value = localvalue;
    }
    
    void random_03_limit_setter(number v) {
        if (v >= 0)
            this->random_03_limit = v;
    }
    
    void numberobj_29_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_29_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_29_value = localvalue;
    }
    
    void numberobj_30_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_30_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_30_value = localvalue;
    }
    
    void random_04_limit_setter(number v) {
        if (v >= 0)
            this->random_04_limit = v;
    }
    
    number mtof_tilde_02_innerMtoF_next(number midivalue, number tuning) {
        if (midivalue == this->mtof_tilde_02_innerMtoF_lastInValue && tuning == this->mtof_tilde_02_innerMtoF_lastTuning)
            return this->mtof_tilde_02_innerMtoF_lastOutValue;
    
        this->mtof_tilde_02_innerMtoF_lastInValue = midivalue;
        this->mtof_tilde_02_innerMtoF_lastTuning = tuning;
        number result = 0;
    
        {
            result = rnbo_exp(.057762265 * (midivalue - 69.0));
        }
    
        this->mtof_tilde_02_innerMtoF_lastOutValue = tuning * result;
        return this->mtof_tilde_02_innerMtoF_lastOutValue;
    }
    
    void mtof_tilde_02_innerMtoF_reset() {
        this->mtof_tilde_02_innerMtoF_lastInValue = 0;
        this->mtof_tilde_02_innerMtoF_lastOutValue = 0;
        this->mtof_tilde_02_innerMtoF_lastTuning = 0;
    }
    
    void mtof_tilde_02_innerScala_mid(int v) {
        this->mtof_tilde_02_innerScala_kbmMid = v;
        this->mtof_tilde_02_innerScala_updateRefFreq();
    }
    
    void mtof_tilde_02_innerScala_ref(int v) {
        this->mtof_tilde_02_innerScala_kbmRefNum = v;
        this->mtof_tilde_02_innerScala_updateRefFreq();
    }
    
    void mtof_tilde_02_innerScala_base(number v) {
        this->mtof_tilde_02_innerScala_kbmRefFreq = v;
        this->mtof_tilde_02_innerScala_updateRefFreq();
    }
    
    void mtof_tilde_02_innerScala_init() {
        list sclValid = {
            12,
            100,
            0,
            200,
            0,
            300,
            0,
            400,
            0,
            500,
            0,
            600,
            0,
            700,
            0,
            800,
            0,
            900,
            0,
            1000,
            0,
            1100,
            0,
            2,
            1
        };
    
        this->mtof_tilde_02_innerScala_updateScale(sclValid);
    }
    
    void mtof_tilde_02_innerScala_update(list scale, list map) {
        if (scale->length > 0) {
            this->mtof_tilde_02_innerScala_updateScale(scale);
        }
    
        if (map->length > 0) {
            this->mtof_tilde_02_innerScala_updateMap(map);
        }
    }
    
    number mtof_tilde_02_innerScala_mtof(number note) {
        if ((bool)(this->mtof_tilde_02_innerScala_lastValid) && this->mtof_tilde_02_innerScala_lastNote == note) {
            return this->mtof_tilde_02_innerScala_lastFreq;
        }
    
        array<int, 2> degoct = this->mtof_tilde_02_innerScala_applyKBM(note);
        number out = 0;
    
        if (degoct[1] > 0) {
            out = this->mtof_tilde_02_innerScala_applySCL(degoct[0], fract(note), this->mtof_tilde_02_innerScala_refFreq);
        }
    
        this->mtof_tilde_02_innerScala_updateLast(note, out);
        return out;
    }
    
    number mtof_tilde_02_innerScala_ftom(number hz) {
        if (hz <= 0.0) {
            return 0.0;
        }
    
        if ((bool)(this->mtof_tilde_02_innerScala_lastValid) && this->mtof_tilde_02_innerScala_lastFreq == hz) {
            return this->mtof_tilde_02_innerScala_lastNote;
        }
    
        array<number, 2> df = this->mtof_tilde_02_innerScala_hztodeg(hz);
        int degree = (int)(df[0]);
        number frac = df[1];
        number out = 0;
    
        if (this->mtof_tilde_02_innerScala_kbmSize == 0) {
            out = this->mtof_tilde_02_innerScala_kbmMid + degree;
        } else {
            array<int, 2> octdeg = this->mtof_tilde_02_innerScala_octdegree(degree, this->mtof_tilde_02_innerScala_kbmOctaveDegree);
            number oct = (number)(octdeg[0]);
            int index = (int)(octdeg[1]);
            Index entry = 0;
    
            for (Index i = 0; i < this->mtof_tilde_02_innerScala_kbmMapSize; i++) {
                if (index == this->mtof_tilde_02_innerScala_kbmValid[(Index)(i + this->mtof_tilde_02_innerScala_KBM_MAP_OFFSET)]) {
                    entry = i;
                    break;
                }
            }
    
            out = oct * this->mtof_tilde_02_innerScala_kbmSize + entry + this->mtof_tilde_02_innerScala_kbmMid;
        }
    
        out = out + frac;
        this->mtof_tilde_02_innerScala_updateLast(out, hz);
        return this->mtof_tilde_02_innerScala_lastNote;
    }
    
    int mtof_tilde_02_innerScala_updateScale(list scl) {
        if (scl->length < 1) {
            return 0;
        }
    
        number sclDataEntries = scl[0] * 2 + 1;
    
        if (sclDataEntries <= scl->length) {
            this->mtof_tilde_02_innerScala_lastValid = false;
            this->mtof_tilde_02_innerScala_sclExpMul = {};
            number last = 1;
    
            for (Index i = 1; i < sclDataEntries; i += 2) {
                const number c = (const number)(scl[(Index)(i + 0)]);
                const number d = (const number)(scl[(Index)(i + 1)]);
    
                if (d <= 0) {
                    last = c / (number)1200;
                } else {
                    last = rnbo_log2(c / d);
                }
    
                this->mtof_tilde_02_innerScala_sclExpMul->push(last);
            }
    
            this->mtof_tilde_02_innerScala_sclOctaveMul = last;
            this->mtof_tilde_02_innerScala_sclEntryCount = (int)(this->mtof_tilde_02_innerScala_sclExpMul->length);
    
            if (scl->length >= sclDataEntries + 3) {
                this->mtof_tilde_02_innerScala_kbmMid = (int)(scl[(Index)(sclDataEntries + 2)]);
                this->mtof_tilde_02_innerScala_kbmRefNum = (int)(scl[(Index)(sclDataEntries + 1)]);
                this->mtof_tilde_02_innerScala_kbmRefFreq = scl[(Index)(sclDataEntries + 0)];
                this->mtof_tilde_02_innerScala_kbmSize = (int)(0);
            }
    
            this->mtof_tilde_02_innerScala_updateRefFreq();
            return 1;
        }
    
        return 0;
    }
    
    int mtof_tilde_02_innerScala_updateMap(list kbm) {
        if (kbm->length == 1 && kbm[0] == 0.0) {
            kbm = {0.0, 0.0, 0.0, 60.0, 69.0, 440.0};
        }
    
        if (kbm->length >= 6 && kbm[0] >= 0.0) {
            this->mtof_tilde_02_innerScala_lastValid = false;
            Index size = (Index)(kbm[0]);
            int octave = 12;
    
            if (kbm->length > 6) {
                octave = (int)(kbm[6]);
            }
    
            if (size > 0 && kbm->length < this->mtof_tilde_02_innerScala_KBM_MAP_OFFSET) {
                return 0;
            }
    
            this->mtof_tilde_02_innerScala_kbmSize = (int)(size);
            this->mtof_tilde_02_innerScala_kbmMin = (int)(kbm[1]);
            this->mtof_tilde_02_innerScala_kbmMax = (int)(kbm[2]);
            this->mtof_tilde_02_innerScala_kbmMid = (int)(kbm[3]);
            this->mtof_tilde_02_innerScala_kbmRefNum = (int)(kbm[4]);
            this->mtof_tilde_02_innerScala_kbmRefFreq = kbm[5];
            this->mtof_tilde_02_innerScala_kbmOctaveDegree = octave;
            this->mtof_tilde_02_innerScala_kbmValid = kbm;
            this->mtof_tilde_02_innerScala_kbmMapSize = (kbm->length - this->mtof_tilde_02_innerScala_KBM_MAP_OFFSET > kbm->length ? kbm->length : (kbm->length - this->mtof_tilde_02_innerScala_KBM_MAP_OFFSET < 0 ? 0 : kbm->length - this->mtof_tilde_02_innerScala_KBM_MAP_OFFSET));
            this->mtof_tilde_02_innerScala_updateRefFreq();
            return 1;
        }
    
        return 0;
    }
    
    void mtof_tilde_02_innerScala_updateLast(number note, number freq) {
        this->mtof_tilde_02_innerScala_lastValid = true;
        this->mtof_tilde_02_innerScala_lastNote = note;
        this->mtof_tilde_02_innerScala_lastFreq = freq;
    }
    
    array<number, 2> mtof_tilde_02_innerScala_hztodeg(number hz) {
        number hza = rnbo_abs(hz);
    
        number octave = rnbo_floor(
            rnbo_log2(hza / this->mtof_tilde_02_innerScala_refFreq) / this->mtof_tilde_02_innerScala_sclOctaveMul
        );
    
        int i = 0;
        number frac = 0;
        number n = 0;
    
        for (; i < this->mtof_tilde_02_innerScala_sclEntryCount; i++) {
            number c = this->mtof_tilde_02_innerScala_applySCLOctIndex(octave, i + 0, 0.0, this->mtof_tilde_02_innerScala_refFreq);
            n = this->mtof_tilde_02_innerScala_applySCLOctIndex(octave, i + 1, 0.0, this->mtof_tilde_02_innerScala_refFreq);
    
            if (c <= hza && hza < n) {
                if (c != hza) {
                    frac = rnbo_log2(hza / c) / rnbo_log2(n / c);
                }
    
                break;
            }
        }
    
        if (i == this->mtof_tilde_02_innerScala_sclEntryCount && n != hza) {
            number c = n;
            n = this->mtof_tilde_02_innerScala_applySCLOctIndex(octave + 1, 0, 0.0, this->mtof_tilde_02_innerScala_refFreq);
            frac = rnbo_log2(hza / c) / rnbo_log2(n / c);
        }
    
        number deg = i + octave * this->mtof_tilde_02_innerScala_sclEntryCount;
    
        {
            deg = rnbo_fround((deg + frac) * 1 / (number)1) * 1;
            frac = 0.0;
        }
    
        return {deg, frac};
    }
    
    array<int, 2> mtof_tilde_02_innerScala_octdegree(int degree, int count) {
        int octave = 0;
        int index = 0;
    
        if (degree < 0) {
            octave = -(1 + (-1 - degree) / count);
            index = -degree % count;
    
            if (index > 0) {
                index = count - index;
            }
        } else {
            octave = degree / count;
            index = degree % count;
        }
    
        return {octave, index};
    }
    
    array<int, 2> mtof_tilde_02_innerScala_applyKBM(number note) {
        if ((this->mtof_tilde_02_innerScala_kbmMin == this->mtof_tilde_02_innerScala_kbmMax && this->mtof_tilde_02_innerScala_kbmMax == 0) || (note >= this->mtof_tilde_02_innerScala_kbmMin && note <= this->mtof_tilde_02_innerScala_kbmMax)) {
            int degree = (int)(rnbo_floor(note - this->mtof_tilde_02_innerScala_kbmMid));
    
            if (this->mtof_tilde_02_innerScala_kbmSize == 0) {
                return {degree, 1};
            }
    
            array<int, 2> octdeg = this->mtof_tilde_02_innerScala_octdegree(degree, this->mtof_tilde_02_innerScala_kbmSize);
            int octave = (int)(octdeg[0]);
            Index index = (Index)(octdeg[1]);
    
            if (this->mtof_tilde_02_innerScala_kbmMapSize > index) {
                degree = (int)(this->mtof_tilde_02_innerScala_kbmValid[(Index)(this->mtof_tilde_02_innerScala_KBM_MAP_OFFSET + index)]);
    
                if (degree >= 0) {
                    return {degree + octave * this->mtof_tilde_02_innerScala_kbmOctaveDegree, 1};
                }
            }
        }
    
        return {-1, 0};
    }
    
    number mtof_tilde_02_innerScala_applySCL(int degree, number frac, number refFreq) {
        array<int, 2> octdeg = this->mtof_tilde_02_innerScala_octdegree(degree, this->mtof_tilde_02_innerScala_sclEntryCount);
        return this->mtof_tilde_02_innerScala_applySCLOctIndex(octdeg[0], octdeg[1], frac, refFreq);
    }
    
    number mtof_tilde_02_innerScala_applySCLOctIndex(number octave, int index, number frac, number refFreq) {
        number p = 0;
    
        if (index > 0) {
            p = this->mtof_tilde_02_innerScala_sclExpMul[(Index)(index - 1)];
        }
    
        if (frac > 0) {
            p = this->linearinterp(frac, p, this->mtof_tilde_02_innerScala_sclExpMul[(Index)index]);
        } else if (frac < 0) {
            p = this->linearinterp(-frac, this->mtof_tilde_02_innerScala_sclExpMul[(Index)index], p);
        }
    
        return refFreq * rnbo_pow(2, p + octave * this->mtof_tilde_02_innerScala_sclOctaveMul);
    }
    
    void mtof_tilde_02_innerScala_updateRefFreq() {
        this->mtof_tilde_02_innerScala_lastValid = false;
        int refOffset = (int)(this->mtof_tilde_02_innerScala_kbmRefNum - this->mtof_tilde_02_innerScala_kbmMid);
    
        if (refOffset == 0) {
            this->mtof_tilde_02_innerScala_refFreq = this->mtof_tilde_02_innerScala_kbmRefFreq;
        } else {
            int base = (int)(this->mtof_tilde_02_innerScala_kbmSize);
    
            if (base < 1) {
                base = this->mtof_tilde_02_innerScala_sclEntryCount;
            }
    
            array<int, 2> octdeg = this->mtof_tilde_02_innerScala_octdegree(refOffset, base);
            number oct = (number)(octdeg[0]);
            int index = (int)(octdeg[1]);
    
            if (base > 0) {
                oct = oct + rnbo_floor(index / base);
                index = index % base;
            }
    
            if (index >= 0 && index < this->mtof_tilde_02_innerScala_kbmSize) {
                if (index < this->mtof_tilde_02_innerScala_kbmMapSize) {
                    index = (int)(this->mtof_tilde_02_innerScala_kbmValid[(Index)((Index)(index) + this->mtof_tilde_02_innerScala_KBM_MAP_OFFSET)]);
                } else {
                    index = -1;
                }
            }
    
            if (index < 0 || index > this->mtof_tilde_02_innerScala_sclExpMul->length)
                {} else {
                number p = 0;
    
                if (index > 0) {
                    p = this->mtof_tilde_02_innerScala_sclExpMul[(Index)(index - 1)];
                }
    
                this->mtof_tilde_02_innerScala_refFreq = this->mtof_tilde_02_innerScala_kbmRefFreq / rnbo_pow(2, p + oct * this->mtof_tilde_02_innerScala_sclOctaveMul);
            }
        }
    }
    
    void mtof_tilde_02_innerScala_reset() {
        this->mtof_tilde_02_innerScala_lastValid = false;
        this->mtof_tilde_02_innerScala_lastNote = 0;
        this->mtof_tilde_02_innerScala_lastFreq = 0;
        this->mtof_tilde_02_innerScala_sclEntryCount = 0;
        this->mtof_tilde_02_innerScala_sclOctaveMul = 1;
        this->mtof_tilde_02_innerScala_sclExpMul = {};
        this->mtof_tilde_02_innerScala_kbmValid = {0, 0, 0, 60, 69, 440};
        this->mtof_tilde_02_innerScala_kbmMid = 60;
        this->mtof_tilde_02_innerScala_kbmRefNum = 69;
        this->mtof_tilde_02_innerScala_kbmRefFreq = 440;
        this->mtof_tilde_02_innerScala_kbmSize = 0;
        this->mtof_tilde_02_innerScala_kbmMin = 0;
        this->mtof_tilde_02_innerScala_kbmMax = 0;
        this->mtof_tilde_02_innerScala_kbmOctaveDegree = 12;
        this->mtof_tilde_02_innerScala_kbmMapSize = 0;
        this->mtof_tilde_02_innerScala_refFreq = 261.63;
    }
    
    void mtof_tilde_02_init() {
        this->mtof_tilde_02_innerScala_update(this->mtof_tilde_02_scale, this->mtof_tilde_02_map);
    }
    
    void param_12_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_12_value;
    }
    
    void param_12_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_12_value_set(preset["value"]);
    }
    
    void ip_04_init() {
        this->ip_04_lastValue = this->ip_04_value;
    }
    
    void ip_04_fillSigBuf() {
        if ((bool)(this->ip_04_sigbuf)) {
            SampleIndex k = (SampleIndex)(this->sampleOffsetIntoNextAudioBuffer);
    
            if (k >= (SampleIndex)(this->vs))
                k = (SampleIndex)(this->vs) - 1;
    
            for (SampleIndex i = (SampleIndex)(this->ip_04_lastIndex); i < k; i++) {
                if (this->ip_04_resetCount > 0) {
                    this->ip_04_sigbuf[(Index)i] = 1;
                    this->ip_04_resetCount--;
                } else {
                    this->ip_04_sigbuf[(Index)i] = this->ip_04_lastValue;
                }
            }
    
            this->ip_04_lastIndex = k;
        }
    }
    
    void ip_04_dspsetup(bool force) {
        if ((bool)(this->ip_04_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->ip_04_lastIndex = 0;
        this->ip_04_setupDone = true;
    }
    
    void param_13_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_13_value;
    }
    
    void param_13_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_13_value_set(preset["value"]);
    }
    
    void ip_05_init() {
        this->ip_05_lastValue = this->ip_05_value;
    }
    
    void ip_05_fillSigBuf() {
        if ((bool)(this->ip_05_sigbuf)) {
            SampleIndex k = (SampleIndex)(this->sampleOffsetIntoNextAudioBuffer);
    
            if (k >= (SampleIndex)(this->vs))
                k = (SampleIndex)(this->vs) - 1;
    
            for (SampleIndex i = (SampleIndex)(this->ip_05_lastIndex); i < k; i++) {
                if (this->ip_05_resetCount > 0) {
                    this->ip_05_sigbuf[(Index)i] = 1;
                    this->ip_05_resetCount--;
                } else {
                    this->ip_05_sigbuf[(Index)i] = this->ip_05_lastValue;
                }
            }
    
            this->ip_05_lastIndex = k;
        }
    }
    
    void ip_05_dspsetup(bool force) {
        if ((bool)(this->ip_05_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->ip_05_lastIndex = 0;
        this->ip_05_setupDone = true;
    }
    
    void ip_06_init() {
        this->ip_06_lastValue = this->ip_06_value;
    }
    
    void ip_06_fillSigBuf() {
        if ((bool)(this->ip_06_sigbuf)) {
            SampleIndex k = (SampleIndex)(this->sampleOffsetIntoNextAudioBuffer);
    
            if (k >= (SampleIndex)(this->vs))
                k = (SampleIndex)(this->vs) - 1;
    
            for (SampleIndex i = (SampleIndex)(this->ip_06_lastIndex); i < k; i++) {
                if (this->ip_06_resetCount > 0) {
                    this->ip_06_sigbuf[(Index)i] = 1;
                    this->ip_06_resetCount--;
                } else {
                    this->ip_06_sigbuf[(Index)i] = this->ip_06_lastValue;
                }
            }
    
            this->ip_06_lastIndex = k;
        }
    }
    
    void ip_06_dspsetup(bool force) {
        if ((bool)(this->ip_06_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->ip_06_lastIndex = 0;
        this->ip_06_setupDone = true;
    }
    
    void param_14_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_14_value;
    }
    
    void param_14_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_14_value_set(preset["value"]);
    }
    
    void numberobj_27_init() {
        this->numberobj_27_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("note[1]/number_obj-76"), 1, this->_currentTime);
    }
    
    void numberobj_27_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_27_value;
    }
    
    void numberobj_27_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_27_value_set(preset["value"]);
    }
    
    number cycle_tilde_08_ph_next(number freq, number reset) {
        {
            {
                if (reset >= 0.)
                    this->cycle_tilde_08_ph_currentPhase = reset;
            }
        }
    
        number pincr = freq * this->cycle_tilde_08_ph_conv;
    
        if (this->cycle_tilde_08_ph_currentPhase < 0.)
            this->cycle_tilde_08_ph_currentPhase = 1. + this->cycle_tilde_08_ph_currentPhase;
    
        if (this->cycle_tilde_08_ph_currentPhase > 1.)
            this->cycle_tilde_08_ph_currentPhase = this->cycle_tilde_08_ph_currentPhase - 1.;
    
        number tmp = this->cycle_tilde_08_ph_currentPhase;
        this->cycle_tilde_08_ph_currentPhase += pincr;
        return tmp;
    }
    
    void cycle_tilde_08_ph_reset() {
        this->cycle_tilde_08_ph_currentPhase = 0;
    }
    
    void cycle_tilde_08_ph_dspsetup() {
        this->cycle_tilde_08_ph_conv = (number)1 / this->sr;
    }
    
    void cycle_tilde_08_dspsetup(bool force) {
        if ((bool)(this->cycle_tilde_08_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->cycle_tilde_08_phasei = 0;
        this->cycle_tilde_08_f2i = (number)4294967296 / this->samplerate();
        this->cycle_tilde_08_wrap = (long)(this->cycle_tilde_08_buffer->getSize()) - 1;
        this->cycle_tilde_08_setupDone = true;
        this->cycle_tilde_08_ph_dspsetup();
    }
    
    void cycle_tilde_08_bufferUpdated() {
        this->cycle_tilde_08_wrap = (long)(this->cycle_tilde_08_buffer->getSize()) - 1;
    }
    
    void numberobj_28_init() {
        this->numberobj_28_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("note[1]/number_obj-12"), 1, this->_currentTime);
    }
    
    void numberobj_28_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_28_value;
    }
    
    void numberobj_28_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_28_value_set(preset["value"]);
    }
    
    void random_03_nz_reset() {
        xoshiro_reset(
            systemticks() + this->voice() + this->random(0, 10000),
            this->random_03_nz_state
        );
    }
    
    void random_03_nz_init() {
        this->random_03_nz_reset();
    }
    
    void random_03_nz_seed(number v) {
        xoshiro_reset(v, this->random_03_nz_state);
    }
    
    number random_03_nz_next() {
        return xoshiro_next(this->random_03_nz_state);
    }
    
    void numberobj_29_init() {
        this->numberobj_29_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("note[1]/number_obj-20"), 1, this->_currentTime);
    }
    
    void numberobj_29_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_29_value;
    }
    
    void numberobj_29_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_29_value_set(preset["value"]);
    }
    
    number cycle_tilde_09_ph_next(number freq, number reset) {
        {
            {
                if (reset >= 0.)
                    this->cycle_tilde_09_ph_currentPhase = reset;
            }
        }
    
        number pincr = freq * this->cycle_tilde_09_ph_conv;
    
        if (this->cycle_tilde_09_ph_currentPhase < 0.)
            this->cycle_tilde_09_ph_currentPhase = 1. + this->cycle_tilde_09_ph_currentPhase;
    
        if (this->cycle_tilde_09_ph_currentPhase > 1.)
            this->cycle_tilde_09_ph_currentPhase = this->cycle_tilde_09_ph_currentPhase - 1.;
    
        number tmp = this->cycle_tilde_09_ph_currentPhase;
        this->cycle_tilde_09_ph_currentPhase += pincr;
        return tmp;
    }
    
    void cycle_tilde_09_ph_reset() {
        this->cycle_tilde_09_ph_currentPhase = 0;
    }
    
    void cycle_tilde_09_ph_dspsetup() {
        this->cycle_tilde_09_ph_conv = (number)1 / this->sr;
    }
    
    void cycle_tilde_09_dspsetup(bool force) {
        if ((bool)(this->cycle_tilde_09_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->cycle_tilde_09_phasei = 0;
        this->cycle_tilde_09_f2i = (number)4294967296 / this->samplerate();
        this->cycle_tilde_09_wrap = (long)(this->cycle_tilde_09_buffer->getSize()) - 1;
        this->cycle_tilde_09_setupDone = true;
        this->cycle_tilde_09_ph_dspsetup();
    }
    
    void cycle_tilde_09_bufferUpdated() {
        this->cycle_tilde_09_wrap = (long)(this->cycle_tilde_09_buffer->getSize()) - 1;
    }
    
    void numberobj_30_init() {
        this->numberobj_30_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("note[1]/number_obj-3"), 1, this->_currentTime);
    }
    
    void numberobj_30_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_30_value;
    }
    
    void numberobj_30_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_30_value_set(preset["value"]);
    }
    
    void random_04_nz_reset() {
        xoshiro_reset(
            systemticks() + this->voice() + this->random(0, 10000),
            this->random_04_nz_state
        );
    }
    
    void random_04_nz_init() {
        this->random_04_nz_reset();
    }
    
    void random_04_nz_seed(number v) {
        xoshiro_reset(v, this->random_04_nz_state);
    }
    
    number random_04_nz_next() {
        return xoshiro_next(this->random_04_nz_state);
    }
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        mtof_tilde_02_midivalue = 0;
        mtof_tilde_02_base = 440;
        receive_04_output_number = 0;
        dspexpr_23_in1 = 0;
        dspexpr_23_in2 = 0;
        p_06_target = 0;
        dspexpr_24_in1 = 0;
        dspexpr_24_in2 = 1;
        p_07_target = 0;
        param_12_value = 1;
        ip_04_value = 0;
        ip_04_impulse = 0;
        param_13_value = 1;
        ip_05_value = 0;
        ip_05_impulse = 0;
        receive_05_output_number = 0;
        expr_10_in1 = 0;
        expr_10_in2 = 127;
        expr_10_out1 = 0;
        ip_06_value = 0;
        ip_06_impulse = 0;
        param_14_value = 1;
        numberobj_27_value = 0;
        numberobj_27_value_setter(numberobj_27_value);
        expr_11_in1 = 0;
        expr_11_in2 = 100;
        expr_11_out1 = 0;
        scale_10_inlow = -1;
        scale_10_inhigh = 1;
        scale_10_outlow = 1;
        scale_10_outhigh = 100;
        scale_10_power = 1;
        cycle_tilde_08_frequency = 0.001;
        cycle_tilde_08_phase_offset = 0;
        snapshot_03_interval = 20;
        snapshot_03_out = 0;
        numberobj_28_value = 0;
        numberobj_28_value_setter(numberobj_28_value);
        expr_12_in1 = 0;
        expr_12_in2 = 10000;
        expr_12_out1 = 0;
        random_03_limit = 100;
        random_03_limit_setter(random_03_limit);
        random_03_seed = 0;
        receive_06_output_number = 0;
        numberobj_29_value = 0;
        numberobj_29_value_setter(numberobj_29_value);
        expr_13_in1 = 0;
        expr_13_in2 = 100;
        expr_13_out1 = 0;
        scale_11_inlow = -1;
        scale_11_inhigh = 1;
        scale_11_outlow = 1;
        scale_11_outhigh = 500;
        scale_11_power = 1;
        snapshot_04_interval = 20;
        snapshot_04_out = 0;
        cycle_tilde_09_frequency = 0.001;
        cycle_tilde_09_phase_offset = 0;
        numberobj_30_value = 0;
        numberobj_30_value_setter(numberobj_30_value);
        expr_14_in1 = 0;
        expr_14_in2 = 10000;
        expr_14_out1 = 0;
        random_04_limit = 100;
        random_04_limit_setter(random_04_limit);
        random_04_seed = 0;
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        signals[0] = nullptr;
        signals[1] = nullptr;
        signals[2] = nullptr;
        signals[3] = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        mtof_tilde_02_innerMtoF_lastInValue = 0;
        mtof_tilde_02_innerMtoF_lastOutValue = 0;
        mtof_tilde_02_innerMtoF_lastTuning = 0;
        mtof_tilde_02_innerScala_lastValid = false;
        mtof_tilde_02_innerScala_lastNote = 0;
        mtof_tilde_02_innerScala_lastFreq = 0;
        mtof_tilde_02_innerScala_sclEntryCount = 0;
        mtof_tilde_02_innerScala_sclOctaveMul = 1;
        mtof_tilde_02_innerScala_kbmValid = { 0, 0, 0, 60, 69, 440 };
        mtof_tilde_02_innerScala_kbmMid = 60;
        mtof_tilde_02_innerScala_kbmRefNum = 69;
        mtof_tilde_02_innerScala_kbmRefFreq = 440;
        mtof_tilde_02_innerScala_kbmSize = 0;
        mtof_tilde_02_innerScala_kbmMin = 0;
        mtof_tilde_02_innerScala_kbmMax = 0;
        mtof_tilde_02_innerScala_kbmOctaveDegree = 12;
        mtof_tilde_02_innerScala_kbmMapSize = 0;
        mtof_tilde_02_innerScala_refFreq = 261.63;
        param_12_lastValue = 0;
        ip_04_lastIndex = 0;
        ip_04_lastValue = 0;
        ip_04_resetCount = 0;
        ip_04_sigbuf = nullptr;
        ip_04_setupDone = false;
        param_13_lastValue = 0;
        ip_05_lastIndex = 0;
        ip_05_lastValue = 0;
        ip_05_resetCount = 0;
        ip_05_sigbuf = nullptr;
        ip_05_setupDone = false;
        ip_06_lastIndex = 0;
        ip_06_lastValue = 0;
        ip_06_resetCount = 0;
        ip_06_sigbuf = nullptr;
        ip_06_setupDone = false;
        param_14_lastValue = 0;
        numberobj_27_currentFormat = 6;
        numberobj_27_lastValue = 0;
        cycle_tilde_08_wrap = 0;
        cycle_tilde_08_ph_currentPhase = 0;
        cycle_tilde_08_ph_conv = 0;
        cycle_tilde_08_setupDone = false;
        snapshot_03_calc = 0;
        snapshot_03_nextTime = 0;
        snapshot_03_count = 0;
        snapshot_03_lastValue = 0;
        numberobj_28_currentFormat = 6;
        numberobj_28_lastValue = 0;
        numberobj_29_currentFormat = 6;
        numberobj_29_lastValue = 0;
        snapshot_04_calc = 0;
        snapshot_04_nextTime = 0;
        snapshot_04_count = 0;
        snapshot_04_lastValue = 0;
        cycle_tilde_09_wrap = 0;
        cycle_tilde_09_ph_currentPhase = 0;
        cycle_tilde_09_ph_conv = 0;
        cycle_tilde_09_setupDone = false;
        numberobj_30_currentFormat = 6;
        numberobj_30_lastValue = 0;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 1;
        parameterOffset = 0;
    }
    
    // member variables
    
        number mtof_tilde_02_midivalue;
        list mtof_tilde_02_scale;
        list mtof_tilde_02_map;
        number mtof_tilde_02_base;
        number receive_04_output_number;
        list receive_04_output_list;
        number dspexpr_23_in1;
        number dspexpr_23_in2;
        number p_06_target;
        number dspexpr_24_in1;
        number dspexpr_24_in2;
        number p_07_target;
        number param_12_value;
        number ip_04_value;
        number ip_04_impulse;
        number param_13_value;
        number ip_05_value;
        number ip_05_impulse;
        number receive_05_output_number;
        list receive_05_output_list;
        number expr_10_in1;
        number expr_10_in2;
        number expr_10_out1;
        number ip_06_value;
        number ip_06_impulse;
        number param_14_value;
        number numberobj_27_value;
        number expr_11_in1;
        number expr_11_in2;
        number expr_11_out1;
        list scale_10_input;
        number scale_10_inlow;
        number scale_10_inhigh;
        number scale_10_outlow;
        number scale_10_outhigh;
        number scale_10_power;
        list scale_10_out;
        number cycle_tilde_08_frequency;
        number cycle_tilde_08_phase_offset;
        number snapshot_03_interval;
        number snapshot_03_out;
        number numberobj_28_value;
        number expr_12_in1;
        number expr_12_in2;
        number expr_12_out1;
        number random_03_limit;
        number random_03_seed;
        number receive_06_output_number;
        list receive_06_output_list;
        number numberobj_29_value;
        number expr_13_in1;
        number expr_13_in2;
        number expr_13_out1;
        list scale_11_input;
        number scale_11_inlow;
        number scale_11_inhigh;
        number scale_11_outlow;
        number scale_11_outhigh;
        number scale_11_power;
        list scale_11_out;
        number snapshot_04_interval;
        number snapshot_04_out;
        number cycle_tilde_09_frequency;
        number cycle_tilde_09_phase_offset;
        number numberobj_30_value;
        number expr_14_in1;
        number expr_14_in2;
        number expr_14_out1;
        number random_04_limit;
        number random_04_seed;
        MillisecondTime _currentTime;
        UInt64 audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        SampleValue * signals[4];
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        number mtof_tilde_02_innerMtoF_lastInValue;
        number mtof_tilde_02_innerMtoF_lastOutValue;
        number mtof_tilde_02_innerMtoF_lastTuning;
        Float64BufferRef mtof_tilde_02_innerMtoF_buffer;
        const Index mtof_tilde_02_innerScala_KBM_MAP_OFFSET = 7;
        bool mtof_tilde_02_innerScala_lastValid;
        number mtof_tilde_02_innerScala_lastNote;
        number mtof_tilde_02_innerScala_lastFreq;
        int mtof_tilde_02_innerScala_sclEntryCount;
        number mtof_tilde_02_innerScala_sclOctaveMul;
        list mtof_tilde_02_innerScala_sclExpMul;
        list mtof_tilde_02_innerScala_kbmValid;
        int mtof_tilde_02_innerScala_kbmMid;
        int mtof_tilde_02_innerScala_kbmRefNum;
        number mtof_tilde_02_innerScala_kbmRefFreq;
        int mtof_tilde_02_innerScala_kbmSize;
        int mtof_tilde_02_innerScala_kbmMin;
        int mtof_tilde_02_innerScala_kbmMax;
        int mtof_tilde_02_innerScala_kbmOctaveDegree;
        Index mtof_tilde_02_innerScala_kbmMapSize;
        number mtof_tilde_02_innerScala_refFreq;
        number param_12_lastValue;
        SampleIndex ip_04_lastIndex;
        number ip_04_lastValue;
        SampleIndex ip_04_resetCount;
        signal ip_04_sigbuf;
        bool ip_04_setupDone;
        number param_13_lastValue;
        SampleIndex ip_05_lastIndex;
        number ip_05_lastValue;
        SampleIndex ip_05_resetCount;
        signal ip_05_sigbuf;
        bool ip_05_setupDone;
        SampleIndex ip_06_lastIndex;
        number ip_06_lastValue;
        SampleIndex ip_06_resetCount;
        signal ip_06_sigbuf;
        bool ip_06_setupDone;
        number param_14_lastValue;
        Int numberobj_27_currentFormat;
        number numberobj_27_lastValue;
        Float64BufferRef cycle_tilde_08_buffer;
        long cycle_tilde_08_wrap;
        uint32_t cycle_tilde_08_phasei;
        SampleValue cycle_tilde_08_f2i;
        number cycle_tilde_08_ph_currentPhase;
        number cycle_tilde_08_ph_conv;
        bool cycle_tilde_08_setupDone;
        number snapshot_03_calc;
        number snapshot_03_nextTime;
        SampleIndex snapshot_03_count;
        number snapshot_03_lastValue;
        Int numberobj_28_currentFormat;
        number numberobj_28_lastValue;
        UInt random_03_nz_state[4] = { };
        Int numberobj_29_currentFormat;
        number numberobj_29_lastValue;
        number snapshot_04_calc;
        number snapshot_04_nextTime;
        SampleIndex snapshot_04_count;
        number snapshot_04_lastValue;
        Float64BufferRef cycle_tilde_09_buffer;
        long cycle_tilde_09_wrap;
        uint32_t cycle_tilde_09_phasei;
        SampleValue cycle_tilde_09_f2i;
        number cycle_tilde_09_ph_currentPhase;
        number cycle_tilde_09_ph_conv;
        bool cycle_tilde_09_setupDone;
        Int numberobj_30_currentFormat;
        number numberobj_30_lastValue;
        UInt random_04_nz_state[4] = { };
        number stackprotect_count;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
        RNBOSubpatcher_796* p_06;
        RNBOSubpatcher_797* p_07;
    
};

class RNBOSubpatcher_808 : public PatcherInterfaceImpl {
    
    friend class drone;
    
    public:
    
    class RNBOSubpatcher_798 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_808;
            friend class drone;
            
            public:
            
            RNBOSubpatcher_798()
            {
            }
            
            ~RNBOSubpatcher_798()
            {
            }
            
            virtual RNBOSubpatcher_808* getPatcher() const {
                return static_cast<RNBOSubpatcher_808 *>(_parentPatcher);
            }
            
            drone* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            number samplerate() const {
                return this->sr;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
                const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
                const SampleValue * in3 = (numInputs >= 3 && inputs[2] ? inputs[2] : this->zeroBuffer);
                this->dspexpr_26_perform(in1, in2, this->signals[0], n);
            
                this->cycle_tilde_11_perform(
                    this->signals[0],
                    this->cycle_tilde_11_phase_offset,
                    this->signals[1],
                    this->dummyBuffer,
                    n
                );
            
                this->dspexpr_28_perform(this->signals[0], in3, this->signals[2], n);
                this->dspexpr_27_perform(this->signals[1], this->signals[2], this->signals[0], n);
                this->dspexpr_25_perform(in1, this->signals[0], this->signals[2], n);
                this->cycle_tilde_10_perform(this->signals[2], this->cycle_tilde_10_phase_offset, out1, out2, n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 3; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->cycle_tilde_11_dspsetup(forceDSPSetup);
                this->cycle_tilde_10_dspsetup(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->updateTime(time);
            
                if (index == 0) {
                    this->cycle_tilde_10_buffer = new Float64Buffer(this->getPatcher()->getPatcher()->RNBODefaultSinus);
                    this->cycle_tilde_10_bufferUpdated();
                    this->cycle_tilde_11_buffer = new Float64Buffer(this->getPatcher()->getPatcher()->RNBODefaultSinus);
                    this->cycle_tilde_11_bufferUpdated();
                }
            }
            
            void initialize() {
                this->assign_defaults();
                this->setState();
                this->cycle_tilde_10_buffer = new Float64Buffer(this->getPatcher()->getPatcher()->RNBODefaultSinus);
                this->cycle_tilde_11_buffer = new Float64Buffer(this->getPatcher()->getPatcher()->RNBODefaultSinus);
            }
            
            protected:
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 3;
            }
            
            Index getNumOutputChannels() const {
                return 2;
            }
            
            void initializeObjects() {}
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {
                this->cycle_tilde_10_buffer->requestSize(16384, 1);
                this->cycle_tilde_10_buffer->setSampleRate(this->sr);
                this->cycle_tilde_11_buffer->requestSize(16384, 1);
                this->cycle_tilde_11_buffer->setSampleRate(this->sr);
                this->cycle_tilde_10_buffer = this->cycle_tilde_10_buffer->allocateIfNeeded();
                this->cycle_tilde_11_buffer = this->cycle_tilde_11_buffer->allocateIfNeeded();
            }
            
            void dspexpr_26_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void cycle_tilde_11_perform(
                const Sample * frequency,
                number phase_offset,
                SampleValue * out1,
                SampleValue * out2,
                Index n
            ) {
                RNBO_UNUSED(phase_offset);
                auto __cycle_tilde_11_f2i = this->cycle_tilde_11_f2i;
                auto __cycle_tilde_11_buffer = this->cycle_tilde_11_buffer;
                auto __cycle_tilde_11_phasei = this->cycle_tilde_11_phasei;
                Index i;
            
                for (i = 0; i < n; i++) {
                    {
                        uint32_t uint_phase;
            
                        {
                            {
                                uint_phase = __cycle_tilde_11_phasei;
                            }
                        }
            
                        uint32_t idx = (uint32_t)(uint32_rshift(uint_phase, 18));
                        number frac = ((BinOpInt)((BinOpInt)uint_phase & (BinOpInt)262143)) * 3.81471181759574e-6;
                        number y0 = __cycle_tilde_11_buffer[(Index)idx];
                        number y1 = __cycle_tilde_11_buffer[(Index)((BinOpInt)(idx + 1) & (BinOpInt)16383)];
                        number y = y0 + frac * (y1 - y0);
            
                        {
                            uint32_t pincr = (uint32_t)(uint32_trunc(frequency[(Index)i] * __cycle_tilde_11_f2i));
                            __cycle_tilde_11_phasei = uint32_add(__cycle_tilde_11_phasei, pincr);
                        }
            
                        out1[(Index)i] = y;
                        out2[(Index)i] = uint_phase * 0.232830643653869629e-9;
                        continue;
                    }
                }
            
                this->cycle_tilde_11_phasei = __cycle_tilde_11_phasei;
            }
            
            void dspexpr_28_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_27_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_25_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] + in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void cycle_tilde_10_perform(
                const Sample * frequency,
                number phase_offset,
                SampleValue * out1,
                SampleValue * out2,
                Index n
            ) {
                RNBO_UNUSED(phase_offset);
                auto __cycle_tilde_10_f2i = this->cycle_tilde_10_f2i;
                auto __cycle_tilde_10_buffer = this->cycle_tilde_10_buffer;
                auto __cycle_tilde_10_phasei = this->cycle_tilde_10_phasei;
                Index i;
            
                for (i = 0; i < n; i++) {
                    {
                        uint32_t uint_phase;
            
                        {
                            {
                                uint_phase = __cycle_tilde_10_phasei;
                            }
                        }
            
                        uint32_t idx = (uint32_t)(uint32_rshift(uint_phase, 18));
                        number frac = ((BinOpInt)((BinOpInt)uint_phase & (BinOpInt)262143)) * 3.81471181759574e-6;
                        number y0 = __cycle_tilde_10_buffer[(Index)idx];
                        number y1 = __cycle_tilde_10_buffer[(Index)((BinOpInt)(idx + 1) & (BinOpInt)16383)];
                        number y = y0 + frac * (y1 - y0);
            
                        {
                            uint32_t pincr = (uint32_t)(uint32_trunc(frequency[(Index)i] * __cycle_tilde_10_f2i));
                            __cycle_tilde_10_phasei = uint32_add(__cycle_tilde_10_phasei, pincr);
                        }
            
                        out1[(Index)i] = y;
                        out2[(Index)i] = uint_phase * 0.232830643653869629e-9;
                        continue;
                    }
                }
            
                this->cycle_tilde_10_phasei = __cycle_tilde_10_phasei;
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            number cycle_tilde_10_ph_next(number freq, number reset) {
                {
                    {
                        if (reset >= 0.)
                            this->cycle_tilde_10_ph_currentPhase = reset;
                    }
                }
            
                number pincr = freq * this->cycle_tilde_10_ph_conv;
            
                if (this->cycle_tilde_10_ph_currentPhase < 0.)
                    this->cycle_tilde_10_ph_currentPhase = 1. + this->cycle_tilde_10_ph_currentPhase;
            
                if (this->cycle_tilde_10_ph_currentPhase > 1.)
                    this->cycle_tilde_10_ph_currentPhase = this->cycle_tilde_10_ph_currentPhase - 1.;
            
                number tmp = this->cycle_tilde_10_ph_currentPhase;
                this->cycle_tilde_10_ph_currentPhase += pincr;
                return tmp;
            }
            
            void cycle_tilde_10_ph_reset() {
                this->cycle_tilde_10_ph_currentPhase = 0;
            }
            
            void cycle_tilde_10_ph_dspsetup() {
                this->cycle_tilde_10_ph_conv = (number)1 / this->sr;
            }
            
            void cycle_tilde_10_dspsetup(bool force) {
                if ((bool)(this->cycle_tilde_10_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->cycle_tilde_10_phasei = 0;
                this->cycle_tilde_10_f2i = (number)4294967296 / this->samplerate();
                this->cycle_tilde_10_wrap = (long)(this->cycle_tilde_10_buffer->getSize()) - 1;
                this->cycle_tilde_10_setupDone = true;
                this->cycle_tilde_10_ph_dspsetup();
            }
            
            void cycle_tilde_10_bufferUpdated() {
                this->cycle_tilde_10_wrap = (long)(this->cycle_tilde_10_buffer->getSize()) - 1;
            }
            
            number cycle_tilde_11_ph_next(number freq, number reset) {
                {
                    {
                        if (reset >= 0.)
                            this->cycle_tilde_11_ph_currentPhase = reset;
                    }
                }
            
                number pincr = freq * this->cycle_tilde_11_ph_conv;
            
                if (this->cycle_tilde_11_ph_currentPhase < 0.)
                    this->cycle_tilde_11_ph_currentPhase = 1. + this->cycle_tilde_11_ph_currentPhase;
            
                if (this->cycle_tilde_11_ph_currentPhase > 1.)
                    this->cycle_tilde_11_ph_currentPhase = this->cycle_tilde_11_ph_currentPhase - 1.;
            
                number tmp = this->cycle_tilde_11_ph_currentPhase;
                this->cycle_tilde_11_ph_currentPhase += pincr;
                return tmp;
            }
            
            void cycle_tilde_11_ph_reset() {
                this->cycle_tilde_11_ph_currentPhase = 0;
            }
            
            void cycle_tilde_11_ph_dspsetup() {
                this->cycle_tilde_11_ph_conv = (number)1 / this->sr;
            }
            
            void cycle_tilde_11_dspsetup(bool force) {
                if ((bool)(this->cycle_tilde_11_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->cycle_tilde_11_phasei = 0;
                this->cycle_tilde_11_f2i = (number)4294967296 / this->samplerate();
                this->cycle_tilde_11_wrap = (long)(this->cycle_tilde_11_buffer->getSize()) - 1;
                this->cycle_tilde_11_setupDone = true;
                this->cycle_tilde_11_ph_dspsetup();
            }
            
            void cycle_tilde_11_bufferUpdated() {
                this->cycle_tilde_11_wrap = (long)(this->cycle_tilde_11_buffer->getSize()) - 1;
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                cycle_tilde_10_frequency = 0;
                cycle_tilde_10_phase_offset = 0;
                dspexpr_25_in1 = 0;
                dspexpr_25_in2 = 0;
                dspexpr_26_in1 = 0;
                dspexpr_26_in2 = 0;
                cycle_tilde_11_frequency = 0;
                cycle_tilde_11_phase_offset = 0;
                dspexpr_27_in1 = 0;
                dspexpr_27_in2 = 0;
                dspexpr_28_in1 = 0;
                dspexpr_28_in2 = 0;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                signals[1] = nullptr;
                signals[2] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                cycle_tilde_10_wrap = 0;
                cycle_tilde_10_ph_currentPhase = 0;
                cycle_tilde_10_ph_conv = 0;
                cycle_tilde_10_setupDone = false;
                cycle_tilde_11_wrap = 0;
                cycle_tilde_11_ph_currentPhase = 0;
                cycle_tilde_11_ph_conv = 0;
                cycle_tilde_11_setupDone = false;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number cycle_tilde_10_frequency;
                number cycle_tilde_10_phase_offset;
                number dspexpr_25_in1;
                number dspexpr_25_in2;
                number dspexpr_26_in1;
                number dspexpr_26_in2;
                number cycle_tilde_11_frequency;
                number cycle_tilde_11_phase_offset;
                number dspexpr_27_in1;
                number dspexpr_27_in2;
                number dspexpr_28_in1;
                number dspexpr_28_in2;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[3];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                Float64BufferRef cycle_tilde_10_buffer;
                long cycle_tilde_10_wrap;
                uint32_t cycle_tilde_10_phasei;
                SampleValue cycle_tilde_10_f2i;
                number cycle_tilde_10_ph_currentPhase;
                number cycle_tilde_10_ph_conv;
                bool cycle_tilde_10_setupDone;
                Float64BufferRef cycle_tilde_11_buffer;
                long cycle_tilde_11_wrap;
                uint32_t cycle_tilde_11_phasei;
                SampleValue cycle_tilde_11_f2i;
                number cycle_tilde_11_ph_currentPhase;
                number cycle_tilde_11_ph_conv;
                bool cycle_tilde_11_setupDone;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_799 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_808;
            friend class drone;
            
            public:
            
            RNBOSubpatcher_799()
            {
            }
            
            ~RNBOSubpatcher_799()
            {
            }
            
            virtual RNBOSubpatcher_808* getPatcher() const {
                return static_cast<RNBOSubpatcher_808 *>(_parentPatcher);
            }
            
            drone* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            inline number safediv(number num, number denom) {
                return (denom == 0.0 ? 0.0 : num / denom);
            }
            
            number maximum(number x, number y) {
                return (x < y ? y : x);
            }
            
            number mstosamps(MillisecondTime ms) {
                return ms * this->sr * 0.001;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
                const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
            
                this->gen_03_perform(
                    in2,
                    in2,
                    this->gen_03_in3,
                    this->gen_03_in4,
                    this->gen_03_in5,
                    this->gen_03_in6,
                    this->gen_03_attack_lockout,
                    this->signals[0],
                    n
                );
            
                this->dspexpr_29_perform(in1, this->signals[0], out1, n);
                this->signalforwarder_04_perform(this->signals[0], out2, n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 1; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->gen_03_dspsetup(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& preset) {
                this->param_15_getPresetValue(getSubState(preset, "attack"));
                this->param_16_getPresetValue(getSubState(preset, "decay"));
                this->param_17_getPresetValue(getSubState(preset, "sustain"));
                this->param_18_getPresetValue(getSubState(preset, "release"));
            }
            
            void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
                this->updateTime(time);
            
                switch (index) {
                case 0:
                    {
                    this->param_15_value_set(v);
                    break;
                    }
                case 1:
                    {
                    this->param_16_value_set(v);
                    break;
                    }
                case 2:
                    {
                    this->param_17_value_set(v);
                    break;
                    }
                case 3:
                    {
                    this->param_18_value_set(v);
                    break;
                    }
                }
            }
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                case 0:
                    {
                    return this->param_15_value;
                    }
                case 1:
                    {
                    return this->param_16_value;
                    }
                case 2:
                    {
                    return this->param_17_value;
                    }
                case 3:
                    {
                    return this->param_18_value;
                    }
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 4;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                case 0:
                    {
                    return "attack";
                    }
                case 1:
                    {
                    return "decay";
                    }
                case 2:
                    {
                    return "sustain";
                    }
                case 3:
                    {
                    return "release";
                    }
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                case 0:
                    {
                    return "note[2]/env.adsr/attack";
                    }
                case 1:
                    {
                    return "note[2]/env.adsr/decay";
                    }
                case 2:
                    {
                    return "note[2]/env.adsr/sustain";
                    }
                case 3:
                    {
                    return "note[2]/env.adsr/release";
                    }
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
                {
                    switch (index) {
                    case 0:
                        {
                        info->type = ParameterTypeNumber;
                        info->initialValue = 30;
                        info->min = 0;
                        info->max = 5000;
                        info->exponent = 3;
                        info->steps = 0;
                        info->debug = false;
                        info->saveable = true;
                        info->transmittable = true;
                        info->initialized = true;
                        info->visible = true;
                        info->displayName = "";
                        info->unit = "";
                        info->ioType = IOTypeUndefined;
                        info->signalIndex = INVALID_INDEX;
                        break;
                        }
                    case 1:
                        {
                        info->type = ParameterTypeNumber;
                        info->initialValue = 200;
                        info->min = 1;
                        info->max = 5000;
                        info->exponent = 3;
                        info->steps = 0;
                        info->debug = false;
                        info->saveable = true;
                        info->transmittable = true;
                        info->initialized = true;
                        info->visible = true;
                        info->displayName = "";
                        info->unit = "";
                        info->ioType = IOTypeUndefined;
                        info->signalIndex = INVALID_INDEX;
                        break;
                        }
                    case 2:
                        {
                        info->type = ParameterTypeNumber;
                        info->initialValue = 0.5;
                        info->min = 0;
                        info->max = 1;
                        info->exponent = 0.8;
                        info->steps = 0;
                        info->debug = false;
                        info->saveable = true;
                        info->transmittable = true;
                        info->initialized = true;
                        info->visible = true;
                        info->displayName = "";
                        info->unit = "";
                        info->ioType = IOTypeUndefined;
                        info->signalIndex = INVALID_INDEX;
                        break;
                        }
                    case 3:
                        {
                        info->type = ParameterTypeNumber;
                        info->initialValue = 300;
                        info->min = 1;
                        info->max = 90000;
                        info->exponent = 5;
                        info->steps = 0;
                        info->debug = false;
                        info->saveable = true;
                        info->transmittable = true;
                        info->initialized = true;
                        info->visible = true;
                        info->displayName = "";
                        info->unit = "";
                        info->ioType = IOTypeUndefined;
                        info->signalIndex = INVALID_INDEX;
                        break;
                        }
                    }
                }
            }
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                case 2:
                    {
                    {
                        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                        ParameterValue normalizedValue = (value - 0) / (1 - 0);
            
                        {
                            if (normalizedValue != 0.0) {
                                normalizedValue = rnbo_exp(
                                    rnbo_log((normalizedValue <= 0.0000000001 ? 0.0000000001 : normalizedValue)) * 1. / (number)0.8
                                );
                            }
                        }
            
                        return normalizedValue;
                    }
                    }
                case 0:
                    {
                    {
                        value = (value < 0 ? 0 : (value > 5000 ? 5000 : value));
                        ParameterValue normalizedValue = (value - 0) / (5000 - 0);
            
                        {
                            if (normalizedValue != 0.0) {
                                normalizedValue = rnbo_exp(
                                    rnbo_log((normalizedValue <= 0.0000000001 ? 0.0000000001 : normalizedValue)) * 1. / (number)3
                                );
                            }
                        }
            
                        return normalizedValue;
                    }
                    }
                case 1:
                    {
                    {
                        value = (value < 1 ? 1 : (value > 5000 ? 5000 : value));
                        ParameterValue normalizedValue = (value - 1) / (5000 - 1);
            
                        {
                            if (normalizedValue != 0.0) {
                                normalizedValue = rnbo_exp(
                                    rnbo_log((normalizedValue <= 0.0000000001 ? 0.0000000001 : normalizedValue)) * 1. / (number)3
                                );
                            }
                        }
            
                        return normalizedValue;
                    }
                    }
                case 3:
                    {
                    {
                        value = (value < 1 ? 1 : (value > 90000 ? 90000 : value));
                        ParameterValue normalizedValue = (value - 1) / (90000 - 1);
            
                        {
                            if (normalizedValue != 0.0) {
                                normalizedValue = rnbo_exp(
                                    rnbo_log((normalizedValue <= 0.0000000001 ? 0.0000000001 : normalizedValue)) * 1. / (number)5
                                );
                            }
                        }
            
                        return normalizedValue;
                    }
                    }
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                case 2:
                    {
                    {
                        {
                            if (value == 0.0) {
                                return 0;
                            } else {
                                return 0 + rnbo_exp(rnbo_log((value <= 0.0000000001 ? 0.0000000001 : value)) * 0.8) * (1 - 0);
                            }
                        }
                    }
                    }
                case 0:
                    {
                    {
                        {
                            if (value == 0.0) {
                                return 0;
                            } else {
                                return 0 + rnbo_exp(rnbo_log((value <= 0.0000000001 ? 0.0000000001 : value)) * 3) * (5000 - 0);
                            }
                        }
                    }
                    }
                case 1:
                    {
                    {
                        {
                            if (value == 0.0) {
                                return 1;
                            } else {
                                return 1 + rnbo_exp(rnbo_log((value <= 0.0000000001 ? 0.0000000001 : value)) * 3) * (5000 - 1);
                            }
                        }
                    }
                    }
                case 3:
                    {
                    {
                        {
                            if (value == 0.0) {
                                return 1;
                            } else {
                                return 1 + rnbo_exp(rnbo_log((value <= 0.0000000001 ? 0.0000000001 : value)) * 5) * (90000 - 1);
                            }
                        }
                    }
                    }
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                case 0:
                    {
                    return this->param_15_value_constrain(value);
                    }
                case 1:
                    {
                    return this->param_16_value_constrain(value);
                    }
                case 2:
                    {
                    return this->param_17_value_constrain(value);
                    }
                case 3:
                    {
                    return this->param_18_value_constrain(value);
                    }
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            void param_15_value_set(number v) {
                v = this->param_15_value_constrain(v);
                this->param_15_value = v;
                this->sendParameter(0, false);
            
                if (this->param_15_value != this->param_15_lastValue) {
                    this->getEngine()->presetTouched();
                    this->param_15_lastValue = this->param_15_value;
                }
            
                this->gen_03_in3_set(v);
            }
            
            void param_16_value_set(number v) {
                v = this->param_16_value_constrain(v);
                this->param_16_value = v;
                this->sendParameter(1, false);
            
                if (this->param_16_value != this->param_16_lastValue) {
                    this->getEngine()->presetTouched();
                    this->param_16_lastValue = this->param_16_value;
                }
            
                this->gen_03_in4_set(v);
            }
            
            void param_17_value_set(number v) {
                v = this->param_17_value_constrain(v);
                this->param_17_value = v;
                this->sendParameter(2, false);
            
                if (this->param_17_value != this->param_17_lastValue) {
                    this->getEngine()->presetTouched();
                    this->param_17_lastValue = this->param_17_value;
                }
            
                this->gen_03_in5_set(v);
            }
            
            void param_18_value_set(number v) {
                v = this->param_18_value_constrain(v);
                this->param_18_value = v;
                this->sendParameter(3, false);
            
                if (this->param_18_value != this->param_18_lastValue) {
                    this->getEngine()->presetTouched();
                    this->param_18_lastValue = this->param_18_value;
                }
            
                this->gen_03_in6_set(v);
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 2;
            }
            
            Index getNumOutputChannels() const {
                return 2;
            }
            
            void initializeObjects() {
                this->gen_03_attack_has_ended_init();
                this->gen_03_sustain_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {
                this->updateTime(this->getEngine()->getCurrentTime());
            
                {
                    this->scheduleParamInit(0, 0);
                }
            
                {
                    this->scheduleParamInit(1, 0);
                }
            
                {
                    this->scheduleParamInit(2, 0);
                }
            
                {
                    this->scheduleParamInit(3, 0);
                }
            }
            
            void allocateDataRefs() {}
            
            number param_15_value_constrain(number v) const {
                v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));
                return v;
            }
            
            void gen_03_in3_set(number v) {
                this->gen_03_in3 = v;
            }
            
            number param_16_value_constrain(number v) const {
                v = (v > 5000 ? 5000 : (v < 1 ? 1 : v));
                return v;
            }
            
            void gen_03_in4_set(number v) {
                this->gen_03_in4 = v;
            }
            
            number param_17_value_constrain(number v) const {
                v = (v > 1 ? 1 : (v < 0 ? 0 : v));
                return v;
            }
            
            void gen_03_in5_set(number v) {
                this->gen_03_in5 = v;
            }
            
            number param_18_value_constrain(number v) const {
                v = (v > 90000 ? 90000 : (v < 1 ? 1 : v));
                return v;
            }
            
            void gen_03_in6_set(number v) {
                this->gen_03_in6 = v;
            }
            
            void gen_03_perform(
                const Sample * in1,
                const Sample * in2,
                number in3,
                number in4,
                number in5,
                number in6,
                number attack_lockout,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(attack_lockout);
                auto __gen_03_sustain_value = this->gen_03_sustain_value;
                auto __gen_03_attack_has_ended_value = this->gen_03_attack_has_ended_value;
                auto min_1_0 = this->maximum(in3, 0.1);
                auto min_2_1 = this->maximum(in4, 0.1);
                number clamp_3_2 = (in5 > 1 ? 1 : (in5 < 0 ? 0 : in5));
                auto min_4_3 = this->maximum(in6, 0.1);
                number attack_iter_interval_8 = this->mstosamps(min_1_0) * 0.33333333333333;
                number release_iter_interval_9 = this->mstosamps(min_4_3) * 0.33333333333333;
                number decay_iter_interval_10 = this->mstosamps(min_2_1) * 0.33333333333333;
                number sustain_smoothing_12 = 1 - ((this->mstosamps(20) == 0. ? 0. : (number)1 / this->mstosamps(20)));
                Index i;
            
                for (i = 0; i < n; i++) {
                    number trigger_5 = this->gen_03_delta_4_next(in2[(Index)i] > 0) > 0;
                    number is_released_6 = in1[(Index)i] == 0;
                    number is_attacking_7 = ((bool)(trigger_5) || (bool)(!(bool)(__gen_03_attack_has_ended_value))) && ((bool)(!(bool)(is_released_6)) || 0);
                    number decay_iter_interval_5_11 = !(bool)(is_released_6) * decay_iter_interval_10 + is_released_6 * release_iter_interval_9;
                    __gen_03_sustain_value = clamp_3_2 + sustain_smoothing_12 * (__gen_03_sustain_value - clamp_3_2);
                    number ad_target_13 = (is_attacking_7 > 0 ? 1.0523956964913 : -0.052395696491256);
                    number asr_target_14 = ((bool)(!(bool)(is_released_6)) || (bool)(is_attacking_7) ? 1.0523956964913 : -0.052395696491256);
                    number ad_16 = this->gen_03_slide_15_next(ad_target_13, attack_iter_interval_8, decay_iter_interval_5_11);
                    number ad_6_17 = (ad_16 > 1 ? 1 : (ad_16 < 0 ? 0 : ad_16));
                    number asr_19 = this->gen_03_slide_18_next(asr_target_14, attack_iter_interval_8, release_iter_interval_9);
                    number asr_7_20 = (asr_19 > 1 ? 1 : (asr_19 < 0 ? 0 : asr_19));
                    __gen_03_attack_has_ended_value = (bool)(!(bool)(is_attacking_7)) || ad_6_17 >= 1;
                    number expr_8_21 = ad_6_17 + __gen_03_sustain_value * (asr_7_20 - ad_6_17);
                    out1[(Index)i] = expr_8_21;
                }
            
                this->gen_03_attack_has_ended_value = __gen_03_attack_has_ended_value;
                this->gen_03_sustain_value = __gen_03_sustain_value;
            }
            
            void dspexpr_29_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void signalforwarder_04_perform(const SampleValue * input, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            number gen_03_attack_has_ended_getvalue() {
                return this->gen_03_attack_has_ended_value;
            }
            
            void gen_03_attack_has_ended_setvalue(number val) {
                this->gen_03_attack_has_ended_value = val;
            }
            
            void gen_03_attack_has_ended_reset() {
                this->gen_03_attack_has_ended_value = 0;
            }
            
            void gen_03_attack_has_ended_init() {
                this->gen_03_attack_has_ended_value = 0;
            }
            
            number gen_03_sustain_getvalue() {
                return this->gen_03_sustain_value;
            }
            
            void gen_03_sustain_setvalue(number val) {
                this->gen_03_sustain_value = val;
            }
            
            void gen_03_sustain_reset() {
                this->gen_03_sustain_value = 0;
            }
            
            void gen_03_sustain_init() {
                this->gen_03_sustain_value = 0.5;
            }
            
            number gen_03_delta_4_next(number x) {
                number temp = (number)(x - this->gen_03_delta_4_prev);
                this->gen_03_delta_4_prev = x;
                return temp;
            }
            
            void gen_03_delta_4_dspsetup() {
                this->gen_03_delta_4_reset();
            }
            
            void gen_03_delta_4_reset() {
                this->gen_03_delta_4_prev = 0;
            }
            
            number gen_03_slide_15_next(number x, number up, number down) {
                number temp = x - this->gen_03_slide_15_prev;
                auto iup = this->safediv(1., this->maximum(1., rnbo_abs(up)));
                auto idown = this->safediv(1., this->maximum(1., rnbo_abs(down)));
                this->gen_03_slide_15_prev = this->gen_03_slide_15_prev + ((x > this->gen_03_slide_15_prev ? iup : idown)) * temp;
                return this->gen_03_slide_15_prev;
            }
            
            void gen_03_slide_15_reset() {
                this->gen_03_slide_15_prev = 0;
            }
            
            number gen_03_slide_18_next(number x, number up, number down) {
                number temp = x - this->gen_03_slide_18_prev;
                auto iup = this->safediv(1., this->maximum(1., rnbo_abs(up)));
                auto idown = this->safediv(1., this->maximum(1., rnbo_abs(down)));
                this->gen_03_slide_18_prev = this->gen_03_slide_18_prev + ((x > this->gen_03_slide_18_prev ? iup : idown)) * temp;
                return this->gen_03_slide_18_prev;
            }
            
            void gen_03_slide_18_reset() {
                this->gen_03_slide_18_prev = 0;
            }
            
            void gen_03_dspsetup(bool force) {
                if ((bool)(this->gen_03_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->gen_03_setupDone = true;
                this->gen_03_delta_4_dspsetup();
            }
            
            void param_15_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->param_15_value;
            }
            
            void param_15_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->param_15_value_set(preset["value"]);
            }
            
            void param_16_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->param_16_value;
            }
            
            void param_16_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->param_16_value_set(preset["value"]);
            }
            
            void param_17_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->param_17_value;
            }
            
            void param_17_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->param_17_value_set(preset["value"]);
            }
            
            void param_18_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->param_18_value;
            }
            
            void param_18_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->param_18_value_set(preset["value"]);
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                dspexpr_29_in1 = 0;
                dspexpr_29_in2 = 0;
                gen_03_in1 = 0;
                gen_03_in2 = 0;
                gen_03_in3 = 0;
                gen_03_in4 = 0;
                gen_03_in5 = 0;
                gen_03_in6 = 0;
                gen_03_attack_lockout = 0;
                param_15_value = 30;
                param_16_value = 200;
                param_17_value = 0.5;
                param_18_value = 300;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                gen_03_attack_has_ended_value = 0;
                gen_03_sustain_value = 0;
                gen_03_delta_4_prev = 0;
                gen_03_slide_15_prev = 0;
                gen_03_slide_18_prev = 0;
                gen_03_setupDone = false;
                param_15_lastValue = 0;
                param_16_lastValue = 0;
                param_17_lastValue = 0;
                param_18_lastValue = 0;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number dspexpr_29_in1;
                number dspexpr_29_in2;
                number gen_03_in1;
                number gen_03_in2;
                number gen_03_in3;
                number gen_03_in4;
                number gen_03_in5;
                number gen_03_in6;
                number gen_03_attack_lockout;
                number param_15_value;
                number param_16_value;
                number param_17_value;
                number param_18_value;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[1];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                number gen_03_attack_has_ended_value;
                number gen_03_sustain_value;
                number gen_03_delta_4_prev;
                number gen_03_slide_15_prev;
                number gen_03_slide_18_prev;
                bool gen_03_setupDone;
                number param_15_lastValue;
                number param_16_lastValue;
                number param_17_lastValue;
                number param_18_lastValue;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    RNBOSubpatcher_808()
    {
    }
    
    ~RNBOSubpatcher_808()
    {
        delete this->p_08;
        delete this->p_09;
    }
    
    virtual drone* getPatcher() const {
        return static_cast<drone *>(_parentPatcher);
    }
    
    drone* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
        getEngine()->flushClockEvents(this, -1508480176, false);
        getEngine()->flushClockEvents(this, -871642103, false);
        getEngine()->flushClockEvents(this, 1646922831, false);
    }
    
    inline number linearinterp(number frac, number x, number y) {
        return x + (y - x) * frac;
    }
    
    inline number safediv(number num, number denom) {
        return (denom == 0.0 ? 0.0 : num / denom);
    }
    
    number safepow(number base, number exponent) {
        return fixnan(rnbo_pow(base, exponent));
    }
    
    number scale(
        number x,
        number lowin,
        number hiin,
        number lowout,
        number highout,
        number pow
    ) {
        auto inscale = this->safediv(1., hiin - lowin);
        number outdiff = highout - lowout;
        number value = (x - lowin) * inscale;
    
        if (pow != 1) {
            if (value > 0)
                value = this->safepow(value, pow);
            else
                value = -this->safepow(-value, pow);
        }
    
        value = value * outdiff + lowout;
        return value;
    }
    
    number samplerate() const {
        return this->sr;
    }
    
    Index voice() {
        return this->_voiceIndex;
    }
    
    number random(number low, number high) {
        number range = high - low;
        return globalrandom() * range + low;
    }
    
    Index getNumMidiInputPorts() const {
        return 0;
    }
    
    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        const SampleValue * const* inputs,
        Index numInputs,
        SampleValue * const* outputs,
        Index numOutputs,
        Index n
    ) {
        RNBO_UNUSED(numInputs);
        RNBO_UNUSED(inputs);
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
        this->mtof_tilde_03_perform(this->mtof_tilde_03_midivalue, this->signals[0], n);
        this->dspexpr_31_perform(this->signals[0], this->dspexpr_31_in2, this->signals[1], n);
        this->ip_07_perform(this->signals[0], n);
        this->ip_08_perform(this->signals[2], n);
    
        this->p_08_perform(
            this->signals[1],
            this->signals[0],
            this->signals[2],
            this->signals[3],
            this->dummyBuffer,
            n
        );
    
        this->ip_09_perform(this->signals[2], n);
        this->p_09_perform(this->signals[3], this->signals[2], this->signals[0], this->dummyBuffer, n);
        this->dspexpr_30_perform(this->signals[0], this->dspexpr_30_in2, out1, n);
    
        this->cycle_tilde_12_perform(
            this->cycle_tilde_12_frequency,
            this->cycle_tilde_12_phase_offset,
            this->signals[0],
            this->dummyBuffer,
            n
        );
    
        this->snapshot_05_perform(this->signals[0], n);
    
        this->cycle_tilde_13_perform(
            this->cycle_tilde_13_frequency,
            this->cycle_tilde_13_phase_offset,
            this->signals[0],
            this->dummyBuffer,
            n
        );
    
        this->snapshot_06_perform(this->signals[0], n);
        this->stackprotect_perform(n);
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            Index i;
    
            for (i = 0; i < 4; i++) {
                this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
            }
    
            this->ip_07_sigbuf = resizeSignal(this->ip_07_sigbuf, this->maxvs, maxBlockSize);
            this->ip_08_sigbuf = resizeSignal(this->ip_08_sigbuf, this->maxvs, maxBlockSize);
            this->ip_09_sigbuf = resizeSignal(this->ip_09_sigbuf, this->maxvs, maxBlockSize);
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        this->ip_07_dspsetup(forceDSPSetup);
        this->ip_08_dspsetup(forceDSPSetup);
        this->ip_09_dspsetup(forceDSPSetup);
        this->cycle_tilde_12_dspsetup(forceDSPSetup);
        this->cycle_tilde_13_dspsetup(forceDSPSetup);
        this->p_08->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_09->prepareToProcess(sampleRate, maxBlockSize, force);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            {
            this->setProbingIndex(-1);
            break;
            }
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    void onSampleRateChanged(double ) {}
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {
        this->p_08 = new RNBOSubpatcher_798();
        this->p_08->setEngineAndPatcher(this->getEngine(), this);
        this->p_08->initialize();
        this->p_08->setParameterOffset(this->getParameterOffset(this->p_08));
        this->p_09 = new RNBOSubpatcher_799();
        this->p_09->setEngineAndPatcher(this->getEngine(), this);
        this->p_09->initialize();
        this->p_09->setParameterOffset(this->getParameterOffset(this->p_09));
    }
    
    void getPreset(PatcherStateInterface& preset) {
        this->param_19_getPresetValue(getSubState(preset, "ratio"));
        this->param_20_getPresetValue(getSubState(preset, "index"));
        this->param_21_getPresetValue(getSubState(preset, "lfo"));
        this->p_08->getPreset(getSubState(getSubState(preset, "__sps"), "osc.fm[4]"));
        this->p_09->getPreset(getSubState(getSubState(preset, "__sps"), "env.adsr"));
    }
    
    void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
        this->updateTime(time);
    
        switch (index) {
        case 0:
            {
            this->param_19_value_set(v);
            break;
            }
        case 1:
            {
            this->param_20_value_set(v);
            break;
            }
        case 2:
            {
            this->param_21_value_set(v);
            break;
            }
        default:
            {
            index -= 3;
    
            if (index < this->p_08->getNumParameters())
                this->p_08->setParameterValue(index, v, time);
    
            index -= this->p_08->getNumParameters();
    
            if (index < this->p_09->getNumParameters())
                this->p_09->setParameterValue(index, v, time);
    
            break;
            }
        }
    }
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
        this->setParameterValue(index, this->getParameterValue(index), time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        case 0:
            {
            return this->param_19_value;
            }
        case 1:
            {
            return this->param_20_value;
            }
        case 2:
            {
            return this->param_21_value;
            }
        default:
            {
            index -= 3;
    
            if (index < this->p_08->getNumParameters())
                return this->p_08->getParameterValue(index);
    
            index -= this->p_08->getNumParameters();
    
            if (index < this->p_09->getNumParameters())
                return this->p_09->getParameterValue(index);
    
            return 0;
            }
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 0;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 0;
    }
    
    ParameterIndex getNumParameters() const {
        return 3 + this->p_08->getNumParameters() + this->p_09->getNumParameters();
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        case 0:
            {
            return "ratio";
            }
        case 1:
            {
            return "index";
            }
        case 2:
            {
            return "lfo";
            }
        default:
            {
            index -= 3;
    
            if (index < this->p_08->getNumParameters())
                return this->p_08->getParameterName(index);
    
            index -= this->p_08->getNumParameters();
    
            if (index < this->p_09->getNumParameters())
                return this->p_09->getParameterName(index);
    
            return "bogus";
            }
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        case 0:
            {
            return "note[2]/ratio";
            }
        case 1:
            {
            return "note[2]/index";
            }
        case 2:
            {
            return "note[2]/lfo";
            }
        default:
            {
            index -= 3;
    
            if (index < this->p_08->getNumParameters())
                return this->p_08->getParameterId(index);
    
            index -= this->p_08->getNumParameters();
    
            if (index < this->p_09->getNumParameters())
                return this->p_09->getParameterId(index);
    
            return "bogus";
            }
        }
    }
    
    void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
        {
            switch (index) {
            case 0:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 1;
                info->min = 1;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            case 1:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 1;
                info->min = 1;
                info->max = 20;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            case 2:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 1;
                info->min = 1;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            default:
                {
                index -= 3;
    
                if (index < this->p_08->getNumParameters())
                    this->p_08->getParameterInfo(index, info);
    
                index -= this->p_08->getNumParameters();
    
                if (index < this->p_09->getNumParameters())
                    this->p_09->getParameterInfo(index, info);
    
                break;
                }
            }
        }
    }
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
        if (subpatcher == this->p_08)
            return 3;
    
        if (subpatcher == this->p_09)
            return 3 + this->p_08->getNumParameters();
    
        return 0;
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        case 1:
            {
            {
                value = (value < 1 ? 1 : (value > 20 ? 20 : value));
                ParameterValue normalizedValue = (value - 1) / (20 - 1);
                return normalizedValue;
            }
            }
        case 0:
        case 2:
            {
            {
                value = (value < 1 ? 1 : (value > 100 ? 100 : value));
                ParameterValue normalizedValue = (value - 1) / (100 - 1);
                return normalizedValue;
            }
            }
        default:
            {
            index -= 3;
    
            if (index < this->p_08->getNumParameters())
                return this->p_08->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_08->getNumParameters();
    
            if (index < this->p_09->getNumParameters())
                return this->p_09->convertToNormalizedParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        case 1:
            {
            {
                {
                    return 1 + value * (20 - 1);
                }
            }
            }
        case 0:
        case 2:
            {
            {
                {
                    return 1 + value * (100 - 1);
                }
            }
            }
        default:
            {
            index -= 3;
    
            if (index < this->p_08->getNumParameters())
                return this->p_08->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_08->getNumParameters();
    
            if (index < this->p_09->getNumParameters())
                return this->p_09->convertFromNormalizedParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        case 0:
            {
            return this->param_19_value_constrain(value);
            }
        case 1:
            {
            return this->param_20_value_constrain(value);
            }
        case 2:
            {
            return this->param_21_value_constrain(value);
            }
        default:
            {
            index -= 3;
    
            if (index < this->p_08->getNumParameters())
                return this->p_08->constrainParameterValue(index, value);
    
            index -= this->p_08->getNumParameters();
    
            if (index < this->p_09->getNumParameters())
                return this->p_09->constrainParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
        RNBO_UNUSED(hasValue);
        this->updateTime(time);
    
        switch (index) {
        case -1508480176:
            {
            this->snapshot_05_out_set(value);
            break;
            }
        case -871642103:
            {
            this->loadbang_03_startupbang_bang();
            break;
            }
        case 1646922831:
            {
            this->snapshot_06_out_set(value);
            break;
            }
        }
    }
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("valin"):
            {
            if (TAG("note[2]/number_obj-76") == objectId)
                this->numberobj_31_valin_set(payload);
    
            if (TAG("note[2]/number_obj-12") == objectId)
                this->numberobj_32_valin_set(payload);
    
            if (TAG("note[2]/number_obj-20") == objectId)
                this->numberobj_33_valin_set(payload);
    
            if (TAG("note[2]/number_obj-3") == objectId)
                this->numberobj_34_valin_set(payload);
    
            break;
            }
        case TAG("format"):
            {
            if (TAG("note[2]/number_obj-76") == objectId)
                this->numberobj_31_format_set(payload);
    
            if (TAG("note[2]/number_obj-12") == objectId)
                this->numberobj_32_format_set(payload);
    
            if (TAG("note[2]/number_obj-20") == objectId)
                this->numberobj_33_format_set(payload);
    
            if (TAG("note[2]/number_obj-3") == objectId)
                this->numberobj_34_format_set(payload);
    
            break;
            }
        }
    
        this->p_08->processNumMessage(tag, objectId, time, payload);
        this->p_09->processNumMessage(tag, objectId, time, payload);
    }
    
    void processListMessage(
        MessageTag tag,
        MessageTag objectId,
        MillisecondTime time,
        const list& payload
    ) {
        RNBO_UNUSED(objectId);
        this->updateTime(time);
        this->p_08->processListMessage(tag, objectId, time, payload);
        this->p_09->processListMessage(tag, objectId, time, payload);
    }
    
    void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("startupbang"):
            {
            if (TAG("note[2]/loadbang_obj-10") == objectId)
                this->loadbang_03_startupbang_bang();
    
            break;
            }
        case TAG("bangin"):
            {
            if (TAG("note[2]/button_obj-9") == objectId)
                this->button_03_bangin_bang();
    
            break;
            }
        }
    
        this->p_08->processBangMessage(tag, objectId, time);
        this->p_09->processBangMessage(tag, objectId, time);
    }
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
        case TAG("valout"):
            {
            return "valout";
            }
        case TAG("note[2]/number_obj-76"):
            {
            return "note[2]/number_obj-76";
            }
        case TAG("setup"):
            {
            return "setup";
            }
        case TAG("note[2]/number_obj-12"):
            {
            return "note[2]/number_obj-12";
            }
        case TAG("bangout"):
            {
            return "bangout";
            }
        case TAG("note[2]/button_obj-9"):
            {
            return "note[2]/button_obj-9";
            }
        case TAG("note[2]/number_obj-20"):
            {
            return "note[2]/number_obj-20";
            }
        case TAG("note[2]/number_obj-3"):
            {
            return "note[2]/number_obj-3";
            }
        case TAG("valin"):
            {
            return "valin";
            }
        case TAG("format"):
            {
            return "format";
            }
        case TAG("startupbang"):
            {
            return "startupbang";
            }
        case TAG("note[2]/loadbang_obj-10"):
            {
            return "note[2]/loadbang_obj-10";
            }
        case TAG("bangin"):
            {
            return "bangin";
            }
        }
    
        auto subpatchResult_0 = this->p_08->resolveTag(tag);
    
        if (subpatchResult_0)
            return subpatchResult_0;
    
        auto subpatchResult_1 = this->p_09->resolveTag(tag);
    
        if (subpatchResult_1)
            return subpatchResult_1;
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        default:
            {
            return nullptr;
            }
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 0;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
        this->updateTime(time);
    
        if (index == 1) {
            this->mtof_tilde_03_innerMtoF_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultMtofLookupTable256);
        }
    
        if (index == 0) {
            this->cycle_tilde_12_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultSinus);
            this->cycle_tilde_12_bufferUpdated();
            this->cycle_tilde_13_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultSinus);
            this->cycle_tilde_13_bufferUpdated();
        }
    
        this->p_08->processDataViewUpdate(index, time);
        this->p_09->processDataViewUpdate(index, time);
    }
    
    void initialize() {
        this->assign_defaults();
        this->setState();
        this->mtof_tilde_03_innerMtoF_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultMtofLookupTable256);
        this->cycle_tilde_12_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultSinus);
        this->cycle_tilde_13_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultSinus);
    }
    
    protected:
    
    void param_19_value_set(number v) {
        v = this->param_19_value_constrain(v);
        this->param_19_value = v;
        this->sendParameter(0, false);
    
        if (this->param_19_value != this->param_19_lastValue) {
            this->getEngine()->presetTouched();
            this->param_19_lastValue = this->param_19_value;
        }
    
        this->ip_07_value_set(v);
    }
    
    void param_20_value_set(number v) {
        v = this->param_20_value_constrain(v);
        this->param_20_value = v;
        this->sendParameter(1, false);
    
        if (this->param_20_value != this->param_20_lastValue) {
            this->getEngine()->presetTouched();
            this->param_20_lastValue = this->param_20_value;
        }
    
        this->ip_08_value_set(v);
    }
    
    void param_21_value_set(number v) {
        v = this->param_21_value_constrain(v);
        this->param_21_value = v;
        this->sendParameter(2, false);
    
        if (this->param_21_value != this->param_21_lastValue) {
            this->getEngine()->presetTouched();
            this->param_21_lastValue = this->param_21_value;
        }
    
        this->cycle_tilde_12_frequency_set(v);
    }
    
    void eventinlet_11_out1_bang_bang() {}
    
    void eventinlet_11_out1_number_set(number v) {
        this->dspexpr_31_in2_set(v);
    }
    
    void numberobj_31_valin_set(number v) {
        this->numberobj_31_value_set(v);
    }
    
    void numberobj_31_format_set(number v) {
        this->numberobj_31_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void snapshot_05_out_set(number v) {
        this->snapshot_05_out = v;
    
        {
            list converted = {v};
            this->scale_12_input_set(converted);
        }
    }
    
    void loadbang_03_startupbang_bang() {
        this->loadbang_03_output_bang();
    }
    
    void numberobj_32_valin_set(number v) {
        this->numberobj_32_value_set(v);
    }
    
    void numberobj_32_format_set(number v) {
        this->numberobj_32_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void button_03_bangin_bang() {
        this->button_03_bangval_bang();
    }
    
    void numberobj_33_valin_set(number v) {
        this->numberobj_33_value_set(v);
    }
    
    void numberobj_33_format_set(number v) {
        this->numberobj_33_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void snapshot_06_out_set(number v) {
        this->snapshot_06_out = v;
    
        {
            list converted = {v};
            this->scale_13_input_set(converted);
        }
    }
    
    void numberobj_34_valin_set(number v) {
        this->numberobj_34_value_set(v);
    }
    
    void numberobj_34_format_set(number v) {
        this->numberobj_34_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 0;
    }
    
    Index getNumOutputChannels() const {
        return 1;
    }
    
    void initializeObjects() {
        this->mtof_tilde_03_innerScala_init();
        this->mtof_tilde_03_init();
        this->ip_07_init();
        this->ip_08_init();
        this->ip_09_init();
        this->numberobj_31_init();
        this->numberobj_32_init();
        this->random_05_nz_init();
        this->numberobj_33_init();
        this->numberobj_34_init();
        this->random_06_nz_init();
        this->p_08->initializeObjects();
        this->p_09->initializeObjects();
    }
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {
        this->updateTime(this->getEngine()->getCurrentTime());
        this->p_08->startup();
        this->p_09->startup();
        this->getEngine()->scheduleClockEvent(this, -871642103, 0 + this->_currentTime);;
    
        {
            this->scheduleParamInit(0, 0);
        }
    
        {
            this->scheduleParamInit(1, 0);
        }
    
        {
            this->scheduleParamInit(2, 0);
        }
    }
    
    void allocateDataRefs() {
        this->p_08->allocateDataRefs();
        this->p_09->allocateDataRefs();
        this->mtof_tilde_03_innerMtoF_buffer->requestSize(65536, 1);
        this->mtof_tilde_03_innerMtoF_buffer->setSampleRate(this->sr);
        this->cycle_tilde_12_buffer->requestSize(16384, 1);
        this->cycle_tilde_12_buffer->setSampleRate(this->sr);
        this->cycle_tilde_13_buffer->requestSize(16384, 1);
        this->cycle_tilde_13_buffer->setSampleRate(this->sr);
        this->mtof_tilde_03_innerMtoF_buffer = this->mtof_tilde_03_innerMtoF_buffer->allocateIfNeeded();
        this->cycle_tilde_12_buffer = this->cycle_tilde_12_buffer->allocateIfNeeded();
        this->cycle_tilde_13_buffer = this->cycle_tilde_13_buffer->allocateIfNeeded();
    }
    
    void cycle_tilde_13_frequency_set(number v) {
        this->cycle_tilde_13_frequency = v;
    }
    
    void numberobj_34_output_set(number v) {
        this->cycle_tilde_13_frequency_set(v);
    }
    
    void numberobj_34_value_set(number v) {
        this->numberobj_34_value_setter(v);
        v = this->numberobj_34_value;
        number localvalue = v;
    
        if (this->numberobj_34_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("note[2]/number_obj-3"), localvalue, this->_currentTime);
        this->numberobj_34_output_set(localvalue);
    }
    
    void expr_19_out1_set(number v) {
        this->expr_19_out1 = v;
        this->numberobj_34_value_set(this->expr_19_out1);
    }
    
    void expr_19_in1_set(number in1) {
        this->expr_19_in1 = in1;
    
        this->expr_19_out1_set(
            (this->expr_19_in2 == 0 ? 0 : (this->expr_19_in2 == 0. ? 0. : this->expr_19_in1 / this->expr_19_in2))
        );//#map:note[2]//_obj-4:1
    }
    
    void random_06_result_set(number v) {
        this->expr_19_in1_set(v);
    }
    
    void random_06_trigger_bang() {
        this->random_06_result_set(rnbo_abs(this->random_06_nz_next()) * this->random_06_limit);
    }
    
    void cycle_tilde_12_frequency_set(number v) {
        this->cycle_tilde_12_frequency = v;
    }
    
    void numberobj_32_output_set(number v) {
        this->cycle_tilde_12_frequency_set(v);
    }
    
    void numberobj_32_value_set(number v) {
        this->numberobj_32_value_setter(v);
        v = this->numberobj_32_value;
        number localvalue = v;
    
        if (this->numberobj_32_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("note[2]/number_obj-12"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_32_output_set(localvalue);
    }
    
    void expr_17_out1_set(number v) {
        this->expr_17_out1 = v;
        this->numberobj_32_value_set(this->expr_17_out1);
    }
    
    void expr_17_in1_set(number in1) {
        this->expr_17_in1 = in1;
    
        this->expr_17_out1_set(
            (this->expr_17_in2 == 0 ? 0 : (this->expr_17_in2 == 0. ? 0. : this->expr_17_in1 / this->expr_17_in2))
        );//#map:note[2]//_obj-7:1
    }
    
    void random_05_result_set(number v) {
        this->expr_17_in1_set(v);
    }
    
    void random_05_trigger_bang() {
        this->random_05_result_set(rnbo_abs(this->random_05_nz_next()) * this->random_05_limit);
    }
    
    void button_03_output_bang() {
        this->random_06_trigger_bang();
        this->random_05_trigger_bang();
    }
    
    void button_03_bangval_bang() {
        this->getEngine()->sendBangMessage(TAG("bangout"), TAG("note[2]/button_obj-9"), this->_currentTime);;
        this->button_03_output_bang();
    }
    
    void receive_09_output_bang_bang() {
        this->button_03_bangval_bang();
    }
    
    void ip_09_value_set(number v) {
        this->ip_09_value = v;
        this->ip_09_fillSigBuf();
        this->ip_09_lastValue = v;
    }
    
    void expr_15_out1_set(number v) {
        this->expr_15_out1 = v;
        this->ip_09_value_set(this->expr_15_out1);
    }
    
    void expr_15_in1_set(number in1) {
        this->expr_15_in1 = in1;
    
        this->expr_15_out1_set(
            (this->expr_15_in2 == 0 ? 0 : (this->expr_15_in2 == 0. ? 0. : this->expr_15_in1 / this->expr_15_in2))
        );//#map:note[2]//_obj-28:1
    }
    
    void expr_15_in2_set(number v) {
        this->expr_15_in2 = v;
    }
    
    void receive_08_output_list_set(const list& v) {
        this->receive_08_output_list = jsCreateListCopy(v);
    
        {
            if (v->length > 1)
                this->expr_15_in2_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->expr_15_in1_set(converted);
        }
    }
    
    void mtof_tilde_03_midivalue_set(number v) {
        this->mtof_tilde_03_midivalue = v;
    }
    
    void receive_07_output_number_set(number v) {
        this->receive_07_output_number = v;
        this->mtof_tilde_03_midivalue_set(v);
    }
    
    void dspexpr_31_in2_set(number v) {
        this->dspexpr_31_in2 = v;
    }
    
    void eventinlet_11_out1_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->dspexpr_31_in2_set(converted);
        }
    }
    
    number param_19_value_constrain(number v) const {
        v = (v > 100 ? 100 : (v < 1 ? 1 : v));
        return v;
    }
    
    void ip_07_value_set(number v) {
        this->ip_07_value = v;
        this->ip_07_fillSigBuf();
        this->ip_07_lastValue = v;
    }
    
    number param_20_value_constrain(number v) const {
        v = (v > 20 ? 20 : (v < 1 ? 1 : v));
        return v;
    }
    
    void ip_08_value_set(number v) {
        this->ip_08_value = v;
        this->ip_08_fillSigBuf();
        this->ip_08_lastValue = v;
    }
    
    number param_21_value_constrain(number v) const {
        v = (v > 100 ? 100 : (v < 1 ? 1 : v));
        return v;
    }
    
    void dspexpr_30_in2_set(number v) {
        this->dspexpr_30_in2 = v;
    }
    
    void numberobj_31_output_set(number v) {
        this->dspexpr_30_in2_set(v);
    }
    
    void numberobj_31_value_set(number v) {
        this->numberobj_31_value_setter(v);
        v = this->numberobj_31_value;
        number localvalue = v;
    
        if (this->numberobj_31_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("note[2]/number_obj-76"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_31_output_set(localvalue);
    }
    
    void expr_16_out1_set(number v) {
        this->expr_16_out1 = v;
        this->numberobj_31_value_set(this->expr_16_out1);
    }
    
    void expr_16_in1_set(number in1) {
        this->expr_16_in1 = in1;
    
        this->expr_16_out1_set(
            (this->expr_16_in2 == 0 ? 0 : (this->expr_16_in2 == 0. ? 0. : this->expr_16_in1 / this->expr_16_in2))
        );//#map:note[2]//_obj-73:1
    }
    
    void expr_16_in2_set(number v) {
        this->expr_16_in2 = v;
    }
    
    void scale_12_out_set(const list& v) {
        this->scale_12_out = jsCreateListCopy(v);
    
        {
            if (v->length > 1)
                this->expr_16_in2_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->expr_16_in1_set(converted);
        }
    }
    
    void scale_12_input_set(const list& v) {
        this->scale_12_input = jsCreateListCopy(v);
        list tmp = {};
    
        for (Index i = 0; i < v->length; i++) {
            tmp->push(this->scale(
                v[(Index)i],
                this->scale_12_inlow,
                this->scale_12_inhigh,
                this->scale_12_outlow,
                this->scale_12_outhigh,
                this->scale_12_power
            ));
        }
    
        this->scale_12_out_set(tmp);
    }
    
    void loadbang_03_output_bang() {
        this->button_03_bangval_bang();
    }
    
    void numberobj_33_output_set(number v) {
        this->param_20_value_set(v);
    }
    
    void numberobj_33_value_set(number v) {
        this->numberobj_33_value_setter(v);
        v = this->numberobj_33_value;
        number localvalue = v;
    
        if (this->numberobj_33_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("note[2]/number_obj-20"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_33_output_set(localvalue);
    }
    
    void expr_18_out1_set(number v) {
        this->expr_18_out1 = v;
        this->numberobj_33_value_set(this->expr_18_out1);
    }
    
    void expr_18_in1_set(number in1) {
        this->expr_18_in1 = in1;
    
        this->expr_18_out1_set(
            (this->expr_18_in2 == 0 ? 0 : (this->expr_18_in2 == 0. ? 0. : this->expr_18_in1 / this->expr_18_in2))
        );//#map:note[2]//_obj-13:1
    }
    
    void expr_18_in2_set(number v) {
        this->expr_18_in2 = v;
    }
    
    void scale_13_out_set(const list& v) {
        this->scale_13_out = jsCreateListCopy(v);
    
        {
            if (v->length > 1)
                this->expr_18_in2_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->expr_18_in1_set(converted);
        }
    }
    
    void scale_13_input_set(const list& v) {
        this->scale_13_input = jsCreateListCopy(v);
        list tmp = {};
    
        for (Index i = 0; i < v->length; i++) {
            tmp->push(this->scale(
                v[(Index)i],
                this->scale_13_inlow,
                this->scale_13_inhigh,
                this->scale_13_outlow,
                this->scale_13_outhigh,
                this->scale_13_power
            ));
        }
    
        this->scale_13_out_set(tmp);
    }
    
    void mtof_tilde_03_perform(number midivalue, SampleValue * out, Index n) {
        auto __mtof_tilde_03_base = this->mtof_tilde_03_base;
    
        for (Index i = 0; i < n; i++) {
            out[(Index)i] = this->mtof_tilde_03_innerMtoF_next(midivalue, __mtof_tilde_03_base);
        }
    }
    
    void dspexpr_31_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2;//#map:_###_obj_###_:1
        }
    }
    
    void ip_07_perform(SampleValue * out, Index n) {
        auto __ip_07_lastValue = this->ip_07_lastValue;
        auto __ip_07_lastIndex = this->ip_07_lastIndex;
    
        for (Index i = 0; i < n; i++) {
            out[(Index)i] = ((SampleIndex)(i) >= __ip_07_lastIndex ? __ip_07_lastValue : this->ip_07_sigbuf[(Index)i]);
        }
    
        __ip_07_lastIndex = 0;
        this->ip_07_lastIndex = __ip_07_lastIndex;
    }
    
    void ip_08_perform(SampleValue * out, Index n) {
        auto __ip_08_lastValue = this->ip_08_lastValue;
        auto __ip_08_lastIndex = this->ip_08_lastIndex;
    
        for (Index i = 0; i < n; i++) {
            out[(Index)i] = ((SampleIndex)(i) >= __ip_08_lastIndex ? __ip_08_lastValue : this->ip_08_sigbuf[(Index)i]);
        }
    
        __ip_08_lastIndex = 0;
        this->ip_08_lastIndex = __ip_08_lastIndex;
    }
    
    void p_08_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        const SampleValue * in3,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        ConstSampleArray<3> ins = {in1, in2, in3};
        SampleArray<2> outs = {out1, out2};
        this->p_08->process(ins, 3, outs, 2, n);
    }
    
    void ip_09_perform(SampleValue * out, Index n) {
        auto __ip_09_lastValue = this->ip_09_lastValue;
        auto __ip_09_lastIndex = this->ip_09_lastIndex;
    
        for (Index i = 0; i < n; i++) {
            out[(Index)i] = ((SampleIndex)(i) >= __ip_09_lastIndex ? __ip_09_lastValue : this->ip_09_sigbuf[(Index)i]);
        }
    
        __ip_09_lastIndex = 0;
        this->ip_09_lastIndex = __ip_09_lastIndex;
    }
    
    void p_09_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        // subpatcher: env.adsr
        ConstSampleArray<2> ins = {in1, in2};
    
        SampleArray<2> outs = {out1, out2};
        this->p_09->process(ins, 2, outs, 2, n);
    }
    
    void dspexpr_30_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2;//#map:_###_obj_###_:1
        }
    }
    
    void cycle_tilde_12_perform(
        number frequency,
        number phase_offset,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        RNBO_UNUSED(phase_offset);
        auto __cycle_tilde_12_f2i = this->cycle_tilde_12_f2i;
        auto __cycle_tilde_12_buffer = this->cycle_tilde_12_buffer;
        auto __cycle_tilde_12_phasei = this->cycle_tilde_12_phasei;
        Index i;
    
        for (i = 0; i < n; i++) {
            {
                uint32_t uint_phase;
    
                {
                    {
                        uint_phase = __cycle_tilde_12_phasei;
                    }
                }
    
                uint32_t idx = (uint32_t)(uint32_rshift(uint_phase, 18));
                number frac = ((BinOpInt)((BinOpInt)uint_phase & (BinOpInt)262143)) * 3.81471181759574e-6;
                number y0 = __cycle_tilde_12_buffer[(Index)idx];
                number y1 = __cycle_tilde_12_buffer[(Index)((BinOpInt)(idx + 1) & (BinOpInt)16383)];
                number y = y0 + frac * (y1 - y0);
    
                {
                    uint32_t pincr = (uint32_t)(uint32_trunc(frequency * __cycle_tilde_12_f2i));
                    __cycle_tilde_12_phasei = uint32_add(__cycle_tilde_12_phasei, pincr);
                }
    
                out1[(Index)i] = y;
                out2[(Index)i] = uint_phase * 0.232830643653869629e-9;
                continue;
            }
        }
    
        this->cycle_tilde_12_phasei = __cycle_tilde_12_phasei;
    }
    
    void snapshot_05_perform(const SampleValue * input_signal, Index n) {
        auto __snapshot_05_lastValue = this->snapshot_05_lastValue;
        auto __snapshot_05_calc = this->snapshot_05_calc;
        auto __snapshot_05_count = this->snapshot_05_count;
        auto __snapshot_05_nextTime = this->snapshot_05_nextTime;
        auto __snapshot_05_interval = this->snapshot_05_interval;
        number timeInSamples = this->msToSamps(__snapshot_05_interval, this->sr);
    
        if (__snapshot_05_interval > 0) {
            for (Index i = 0; i < n; i++) {
                if (__snapshot_05_nextTime <= __snapshot_05_count + (SampleIndex)(i)) {
                    {
                        __snapshot_05_calc = input_signal[(Index)i];
                    }
    
                    this->getEngine()->scheduleClockEventWithValue(
                        this,
                        -1508480176,
                        this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                        __snapshot_05_calc
                    );;
    
                    __snapshot_05_calc = 0;
                    __snapshot_05_nextTime += timeInSamples;
                }
            }
    
            __snapshot_05_count += this->vs;
        }
    
        __snapshot_05_lastValue = input_signal[(Index)(n - 1)];
        this->snapshot_05_nextTime = __snapshot_05_nextTime;
        this->snapshot_05_count = __snapshot_05_count;
        this->snapshot_05_calc = __snapshot_05_calc;
        this->snapshot_05_lastValue = __snapshot_05_lastValue;
    }
    
    void cycle_tilde_13_perform(
        number frequency,
        number phase_offset,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        RNBO_UNUSED(phase_offset);
        auto __cycle_tilde_13_f2i = this->cycle_tilde_13_f2i;
        auto __cycle_tilde_13_buffer = this->cycle_tilde_13_buffer;
        auto __cycle_tilde_13_phasei = this->cycle_tilde_13_phasei;
        Index i;
    
        for (i = 0; i < n; i++) {
            {
                uint32_t uint_phase;
    
                {
                    {
                        uint_phase = __cycle_tilde_13_phasei;
                    }
                }
    
                uint32_t idx = (uint32_t)(uint32_rshift(uint_phase, 18));
                number frac = ((BinOpInt)((BinOpInt)uint_phase & (BinOpInt)262143)) * 3.81471181759574e-6;
                number y0 = __cycle_tilde_13_buffer[(Index)idx];
                number y1 = __cycle_tilde_13_buffer[(Index)((BinOpInt)(idx + 1) & (BinOpInt)16383)];
                number y = y0 + frac * (y1 - y0);
    
                {
                    uint32_t pincr = (uint32_t)(uint32_trunc(frequency * __cycle_tilde_13_f2i));
                    __cycle_tilde_13_phasei = uint32_add(__cycle_tilde_13_phasei, pincr);
                }
    
                out1[(Index)i] = y;
                out2[(Index)i] = uint_phase * 0.232830643653869629e-9;
                continue;
            }
        }
    
        this->cycle_tilde_13_phasei = __cycle_tilde_13_phasei;
    }
    
    void snapshot_06_perform(const SampleValue * input_signal, Index n) {
        auto __snapshot_06_lastValue = this->snapshot_06_lastValue;
        auto __snapshot_06_calc = this->snapshot_06_calc;
        auto __snapshot_06_count = this->snapshot_06_count;
        auto __snapshot_06_nextTime = this->snapshot_06_nextTime;
        auto __snapshot_06_interval = this->snapshot_06_interval;
        number timeInSamples = this->msToSamps(__snapshot_06_interval, this->sr);
    
        if (__snapshot_06_interval > 0) {
            for (Index i = 0; i < n; i++) {
                if (__snapshot_06_nextTime <= __snapshot_06_count + (SampleIndex)(i)) {
                    {
                        __snapshot_06_calc = input_signal[(Index)i];
                    }
    
                    this->getEngine()->scheduleClockEventWithValue(
                        this,
                        1646922831,
                        this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                        __snapshot_06_calc
                    );;
    
                    __snapshot_06_calc = 0;
                    __snapshot_06_nextTime += timeInSamples;
                }
            }
    
            __snapshot_06_count += this->vs;
        }
    
        __snapshot_06_lastValue = input_signal[(Index)(n - 1)];
        this->snapshot_06_nextTime = __snapshot_06_nextTime;
        this->snapshot_06_count = __snapshot_06_count;
        this->snapshot_06_calc = __snapshot_06_calc;
        this->snapshot_06_lastValue = __snapshot_06_lastValue;
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    void numberobj_31_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_31_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_31_value = localvalue;
    }
    
    void numberobj_32_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_32_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_32_value = localvalue;
    }
    
    void random_05_limit_setter(number v) {
        if (v >= 0)
            this->random_05_limit = v;
    }
    
    void numberobj_33_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_33_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_33_value = localvalue;
    }
    
    void numberobj_34_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_34_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_34_value = localvalue;
    }
    
    void random_06_limit_setter(number v) {
        if (v >= 0)
            this->random_06_limit = v;
    }
    
    number mtof_tilde_03_innerMtoF_next(number midivalue, number tuning) {
        if (midivalue == this->mtof_tilde_03_innerMtoF_lastInValue && tuning == this->mtof_tilde_03_innerMtoF_lastTuning)
            return this->mtof_tilde_03_innerMtoF_lastOutValue;
    
        this->mtof_tilde_03_innerMtoF_lastInValue = midivalue;
        this->mtof_tilde_03_innerMtoF_lastTuning = tuning;
        number result = 0;
    
        {
            result = rnbo_exp(.057762265 * (midivalue - 69.0));
        }
    
        this->mtof_tilde_03_innerMtoF_lastOutValue = tuning * result;
        return this->mtof_tilde_03_innerMtoF_lastOutValue;
    }
    
    void mtof_tilde_03_innerMtoF_reset() {
        this->mtof_tilde_03_innerMtoF_lastInValue = 0;
        this->mtof_tilde_03_innerMtoF_lastOutValue = 0;
        this->mtof_tilde_03_innerMtoF_lastTuning = 0;
    }
    
    void mtof_tilde_03_innerScala_mid(int v) {
        this->mtof_tilde_03_innerScala_kbmMid = v;
        this->mtof_tilde_03_innerScala_updateRefFreq();
    }
    
    void mtof_tilde_03_innerScala_ref(int v) {
        this->mtof_tilde_03_innerScala_kbmRefNum = v;
        this->mtof_tilde_03_innerScala_updateRefFreq();
    }
    
    void mtof_tilde_03_innerScala_base(number v) {
        this->mtof_tilde_03_innerScala_kbmRefFreq = v;
        this->mtof_tilde_03_innerScala_updateRefFreq();
    }
    
    void mtof_tilde_03_innerScala_init() {
        list sclValid = {
            12,
            100,
            0,
            200,
            0,
            300,
            0,
            400,
            0,
            500,
            0,
            600,
            0,
            700,
            0,
            800,
            0,
            900,
            0,
            1000,
            0,
            1100,
            0,
            2,
            1
        };
    
        this->mtof_tilde_03_innerScala_updateScale(sclValid);
    }
    
    void mtof_tilde_03_innerScala_update(list scale, list map) {
        if (scale->length > 0) {
            this->mtof_tilde_03_innerScala_updateScale(scale);
        }
    
        if (map->length > 0) {
            this->mtof_tilde_03_innerScala_updateMap(map);
        }
    }
    
    number mtof_tilde_03_innerScala_mtof(number note) {
        if ((bool)(this->mtof_tilde_03_innerScala_lastValid) && this->mtof_tilde_03_innerScala_lastNote == note) {
            return this->mtof_tilde_03_innerScala_lastFreq;
        }
    
        array<int, 2> degoct = this->mtof_tilde_03_innerScala_applyKBM(note);
        number out = 0;
    
        if (degoct[1] > 0) {
            out = this->mtof_tilde_03_innerScala_applySCL(degoct[0], fract(note), this->mtof_tilde_03_innerScala_refFreq);
        }
    
        this->mtof_tilde_03_innerScala_updateLast(note, out);
        return out;
    }
    
    number mtof_tilde_03_innerScala_ftom(number hz) {
        if (hz <= 0.0) {
            return 0.0;
        }
    
        if ((bool)(this->mtof_tilde_03_innerScala_lastValid) && this->mtof_tilde_03_innerScala_lastFreq == hz) {
            return this->mtof_tilde_03_innerScala_lastNote;
        }
    
        array<number, 2> df = this->mtof_tilde_03_innerScala_hztodeg(hz);
        int degree = (int)(df[0]);
        number frac = df[1];
        number out = 0;
    
        if (this->mtof_tilde_03_innerScala_kbmSize == 0) {
            out = this->mtof_tilde_03_innerScala_kbmMid + degree;
        } else {
            array<int, 2> octdeg = this->mtof_tilde_03_innerScala_octdegree(degree, this->mtof_tilde_03_innerScala_kbmOctaveDegree);
            number oct = (number)(octdeg[0]);
            int index = (int)(octdeg[1]);
            Index entry = 0;
    
            for (Index i = 0; i < this->mtof_tilde_03_innerScala_kbmMapSize; i++) {
                if (index == this->mtof_tilde_03_innerScala_kbmValid[(Index)(i + this->mtof_tilde_03_innerScala_KBM_MAP_OFFSET)]) {
                    entry = i;
                    break;
                }
            }
    
            out = oct * this->mtof_tilde_03_innerScala_kbmSize + entry + this->mtof_tilde_03_innerScala_kbmMid;
        }
    
        out = out + frac;
        this->mtof_tilde_03_innerScala_updateLast(out, hz);
        return this->mtof_tilde_03_innerScala_lastNote;
    }
    
    int mtof_tilde_03_innerScala_updateScale(list scl) {
        if (scl->length < 1) {
            return 0;
        }
    
        number sclDataEntries = scl[0] * 2 + 1;
    
        if (sclDataEntries <= scl->length) {
            this->mtof_tilde_03_innerScala_lastValid = false;
            this->mtof_tilde_03_innerScala_sclExpMul = {};
            number last = 1;
    
            for (Index i = 1; i < sclDataEntries; i += 2) {
                const number c = (const number)(scl[(Index)(i + 0)]);
                const number d = (const number)(scl[(Index)(i + 1)]);
    
                if (d <= 0) {
                    last = c / (number)1200;
                } else {
                    last = rnbo_log2(c / d);
                }
    
                this->mtof_tilde_03_innerScala_sclExpMul->push(last);
            }
    
            this->mtof_tilde_03_innerScala_sclOctaveMul = last;
            this->mtof_tilde_03_innerScala_sclEntryCount = (int)(this->mtof_tilde_03_innerScala_sclExpMul->length);
    
            if (scl->length >= sclDataEntries + 3) {
                this->mtof_tilde_03_innerScala_kbmMid = (int)(scl[(Index)(sclDataEntries + 2)]);
                this->mtof_tilde_03_innerScala_kbmRefNum = (int)(scl[(Index)(sclDataEntries + 1)]);
                this->mtof_tilde_03_innerScala_kbmRefFreq = scl[(Index)(sclDataEntries + 0)];
                this->mtof_tilde_03_innerScala_kbmSize = (int)(0);
            }
    
            this->mtof_tilde_03_innerScala_updateRefFreq();
            return 1;
        }
    
        return 0;
    }
    
    int mtof_tilde_03_innerScala_updateMap(list kbm) {
        if (kbm->length == 1 && kbm[0] == 0.0) {
            kbm = {0.0, 0.0, 0.0, 60.0, 69.0, 440.0};
        }
    
        if (kbm->length >= 6 && kbm[0] >= 0.0) {
            this->mtof_tilde_03_innerScala_lastValid = false;
            Index size = (Index)(kbm[0]);
            int octave = 12;
    
            if (kbm->length > 6) {
                octave = (int)(kbm[6]);
            }
    
            if (size > 0 && kbm->length < this->mtof_tilde_03_innerScala_KBM_MAP_OFFSET) {
                return 0;
            }
    
            this->mtof_tilde_03_innerScala_kbmSize = (int)(size);
            this->mtof_tilde_03_innerScala_kbmMin = (int)(kbm[1]);
            this->mtof_tilde_03_innerScala_kbmMax = (int)(kbm[2]);
            this->mtof_tilde_03_innerScala_kbmMid = (int)(kbm[3]);
            this->mtof_tilde_03_innerScala_kbmRefNum = (int)(kbm[4]);
            this->mtof_tilde_03_innerScala_kbmRefFreq = kbm[5];
            this->mtof_tilde_03_innerScala_kbmOctaveDegree = octave;
            this->mtof_tilde_03_innerScala_kbmValid = kbm;
            this->mtof_tilde_03_innerScala_kbmMapSize = (kbm->length - this->mtof_tilde_03_innerScala_KBM_MAP_OFFSET > kbm->length ? kbm->length : (kbm->length - this->mtof_tilde_03_innerScala_KBM_MAP_OFFSET < 0 ? 0 : kbm->length - this->mtof_tilde_03_innerScala_KBM_MAP_OFFSET));
            this->mtof_tilde_03_innerScala_updateRefFreq();
            return 1;
        }
    
        return 0;
    }
    
    void mtof_tilde_03_innerScala_updateLast(number note, number freq) {
        this->mtof_tilde_03_innerScala_lastValid = true;
        this->mtof_tilde_03_innerScala_lastNote = note;
        this->mtof_tilde_03_innerScala_lastFreq = freq;
    }
    
    array<number, 2> mtof_tilde_03_innerScala_hztodeg(number hz) {
        number hza = rnbo_abs(hz);
    
        number octave = rnbo_floor(
            rnbo_log2(hza / this->mtof_tilde_03_innerScala_refFreq) / this->mtof_tilde_03_innerScala_sclOctaveMul
        );
    
        int i = 0;
        number frac = 0;
        number n = 0;
    
        for (; i < this->mtof_tilde_03_innerScala_sclEntryCount; i++) {
            number c = this->mtof_tilde_03_innerScala_applySCLOctIndex(octave, i + 0, 0.0, this->mtof_tilde_03_innerScala_refFreq);
            n = this->mtof_tilde_03_innerScala_applySCLOctIndex(octave, i + 1, 0.0, this->mtof_tilde_03_innerScala_refFreq);
    
            if (c <= hza && hza < n) {
                if (c != hza) {
                    frac = rnbo_log2(hza / c) / rnbo_log2(n / c);
                }
    
                break;
            }
        }
    
        if (i == this->mtof_tilde_03_innerScala_sclEntryCount && n != hza) {
            number c = n;
            n = this->mtof_tilde_03_innerScala_applySCLOctIndex(octave + 1, 0, 0.0, this->mtof_tilde_03_innerScala_refFreq);
            frac = rnbo_log2(hza / c) / rnbo_log2(n / c);
        }
    
        number deg = i + octave * this->mtof_tilde_03_innerScala_sclEntryCount;
    
        {
            deg = rnbo_fround((deg + frac) * 1 / (number)1) * 1;
            frac = 0.0;
        }
    
        return {deg, frac};
    }
    
    array<int, 2> mtof_tilde_03_innerScala_octdegree(int degree, int count) {
        int octave = 0;
        int index = 0;
    
        if (degree < 0) {
            octave = -(1 + (-1 - degree) / count);
            index = -degree % count;
    
            if (index > 0) {
                index = count - index;
            }
        } else {
            octave = degree / count;
            index = degree % count;
        }
    
        return {octave, index};
    }
    
    array<int, 2> mtof_tilde_03_innerScala_applyKBM(number note) {
        if ((this->mtof_tilde_03_innerScala_kbmMin == this->mtof_tilde_03_innerScala_kbmMax && this->mtof_tilde_03_innerScala_kbmMax == 0) || (note >= this->mtof_tilde_03_innerScala_kbmMin && note <= this->mtof_tilde_03_innerScala_kbmMax)) {
            int degree = (int)(rnbo_floor(note - this->mtof_tilde_03_innerScala_kbmMid));
    
            if (this->mtof_tilde_03_innerScala_kbmSize == 0) {
                return {degree, 1};
            }
    
            array<int, 2> octdeg = this->mtof_tilde_03_innerScala_octdegree(degree, this->mtof_tilde_03_innerScala_kbmSize);
            int octave = (int)(octdeg[0]);
            Index index = (Index)(octdeg[1]);
    
            if (this->mtof_tilde_03_innerScala_kbmMapSize > index) {
                degree = (int)(this->mtof_tilde_03_innerScala_kbmValid[(Index)(this->mtof_tilde_03_innerScala_KBM_MAP_OFFSET + index)]);
    
                if (degree >= 0) {
                    return {degree + octave * this->mtof_tilde_03_innerScala_kbmOctaveDegree, 1};
                }
            }
        }
    
        return {-1, 0};
    }
    
    number mtof_tilde_03_innerScala_applySCL(int degree, number frac, number refFreq) {
        array<int, 2> octdeg = this->mtof_tilde_03_innerScala_octdegree(degree, this->mtof_tilde_03_innerScala_sclEntryCount);
        return this->mtof_tilde_03_innerScala_applySCLOctIndex(octdeg[0], octdeg[1], frac, refFreq);
    }
    
    number mtof_tilde_03_innerScala_applySCLOctIndex(number octave, int index, number frac, number refFreq) {
        number p = 0;
    
        if (index > 0) {
            p = this->mtof_tilde_03_innerScala_sclExpMul[(Index)(index - 1)];
        }
    
        if (frac > 0) {
            p = this->linearinterp(frac, p, this->mtof_tilde_03_innerScala_sclExpMul[(Index)index]);
        } else if (frac < 0) {
            p = this->linearinterp(-frac, this->mtof_tilde_03_innerScala_sclExpMul[(Index)index], p);
        }
    
        return refFreq * rnbo_pow(2, p + octave * this->mtof_tilde_03_innerScala_sclOctaveMul);
    }
    
    void mtof_tilde_03_innerScala_updateRefFreq() {
        this->mtof_tilde_03_innerScala_lastValid = false;
        int refOffset = (int)(this->mtof_tilde_03_innerScala_kbmRefNum - this->mtof_tilde_03_innerScala_kbmMid);
    
        if (refOffset == 0) {
            this->mtof_tilde_03_innerScala_refFreq = this->mtof_tilde_03_innerScala_kbmRefFreq;
        } else {
            int base = (int)(this->mtof_tilde_03_innerScala_kbmSize);
    
            if (base < 1) {
                base = this->mtof_tilde_03_innerScala_sclEntryCount;
            }
    
            array<int, 2> octdeg = this->mtof_tilde_03_innerScala_octdegree(refOffset, base);
            number oct = (number)(octdeg[0]);
            int index = (int)(octdeg[1]);
    
            if (base > 0) {
                oct = oct + rnbo_floor(index / base);
                index = index % base;
            }
    
            if (index >= 0 && index < this->mtof_tilde_03_innerScala_kbmSize) {
                if (index < this->mtof_tilde_03_innerScala_kbmMapSize) {
                    index = (int)(this->mtof_tilde_03_innerScala_kbmValid[(Index)((Index)(index) + this->mtof_tilde_03_innerScala_KBM_MAP_OFFSET)]);
                } else {
                    index = -1;
                }
            }
    
            if (index < 0 || index > this->mtof_tilde_03_innerScala_sclExpMul->length)
                {} else {
                number p = 0;
    
                if (index > 0) {
                    p = this->mtof_tilde_03_innerScala_sclExpMul[(Index)(index - 1)];
                }
    
                this->mtof_tilde_03_innerScala_refFreq = this->mtof_tilde_03_innerScala_kbmRefFreq / rnbo_pow(2, p + oct * this->mtof_tilde_03_innerScala_sclOctaveMul);
            }
        }
    }
    
    void mtof_tilde_03_innerScala_reset() {
        this->mtof_tilde_03_innerScala_lastValid = false;
        this->mtof_tilde_03_innerScala_lastNote = 0;
        this->mtof_tilde_03_innerScala_lastFreq = 0;
        this->mtof_tilde_03_innerScala_sclEntryCount = 0;
        this->mtof_tilde_03_innerScala_sclOctaveMul = 1;
        this->mtof_tilde_03_innerScala_sclExpMul = {};
        this->mtof_tilde_03_innerScala_kbmValid = {0, 0, 0, 60, 69, 440};
        this->mtof_tilde_03_innerScala_kbmMid = 60;
        this->mtof_tilde_03_innerScala_kbmRefNum = 69;
        this->mtof_tilde_03_innerScala_kbmRefFreq = 440;
        this->mtof_tilde_03_innerScala_kbmSize = 0;
        this->mtof_tilde_03_innerScala_kbmMin = 0;
        this->mtof_tilde_03_innerScala_kbmMax = 0;
        this->mtof_tilde_03_innerScala_kbmOctaveDegree = 12;
        this->mtof_tilde_03_innerScala_kbmMapSize = 0;
        this->mtof_tilde_03_innerScala_refFreq = 261.63;
    }
    
    void mtof_tilde_03_init() {
        this->mtof_tilde_03_innerScala_update(this->mtof_tilde_03_scale, this->mtof_tilde_03_map);
    }
    
    void param_19_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_19_value;
    }
    
    void param_19_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_19_value_set(preset["value"]);
    }
    
    void ip_07_init() {
        this->ip_07_lastValue = this->ip_07_value;
    }
    
    void ip_07_fillSigBuf() {
        if ((bool)(this->ip_07_sigbuf)) {
            SampleIndex k = (SampleIndex)(this->sampleOffsetIntoNextAudioBuffer);
    
            if (k >= (SampleIndex)(this->vs))
                k = (SampleIndex)(this->vs) - 1;
    
            for (SampleIndex i = (SampleIndex)(this->ip_07_lastIndex); i < k; i++) {
                if (this->ip_07_resetCount > 0) {
                    this->ip_07_sigbuf[(Index)i] = 1;
                    this->ip_07_resetCount--;
                } else {
                    this->ip_07_sigbuf[(Index)i] = this->ip_07_lastValue;
                }
            }
    
            this->ip_07_lastIndex = k;
        }
    }
    
    void ip_07_dspsetup(bool force) {
        if ((bool)(this->ip_07_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->ip_07_lastIndex = 0;
        this->ip_07_setupDone = true;
    }
    
    void param_20_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_20_value;
    }
    
    void param_20_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_20_value_set(preset["value"]);
    }
    
    void ip_08_init() {
        this->ip_08_lastValue = this->ip_08_value;
    }
    
    void ip_08_fillSigBuf() {
        if ((bool)(this->ip_08_sigbuf)) {
            SampleIndex k = (SampleIndex)(this->sampleOffsetIntoNextAudioBuffer);
    
            if (k >= (SampleIndex)(this->vs))
                k = (SampleIndex)(this->vs) - 1;
    
            for (SampleIndex i = (SampleIndex)(this->ip_08_lastIndex); i < k; i++) {
                if (this->ip_08_resetCount > 0) {
                    this->ip_08_sigbuf[(Index)i] = 1;
                    this->ip_08_resetCount--;
                } else {
                    this->ip_08_sigbuf[(Index)i] = this->ip_08_lastValue;
                }
            }
    
            this->ip_08_lastIndex = k;
        }
    }
    
    void ip_08_dspsetup(bool force) {
        if ((bool)(this->ip_08_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->ip_08_lastIndex = 0;
        this->ip_08_setupDone = true;
    }
    
    void ip_09_init() {
        this->ip_09_lastValue = this->ip_09_value;
    }
    
    void ip_09_fillSigBuf() {
        if ((bool)(this->ip_09_sigbuf)) {
            SampleIndex k = (SampleIndex)(this->sampleOffsetIntoNextAudioBuffer);
    
            if (k >= (SampleIndex)(this->vs))
                k = (SampleIndex)(this->vs) - 1;
    
            for (SampleIndex i = (SampleIndex)(this->ip_09_lastIndex); i < k; i++) {
                if (this->ip_09_resetCount > 0) {
                    this->ip_09_sigbuf[(Index)i] = 1;
                    this->ip_09_resetCount--;
                } else {
                    this->ip_09_sigbuf[(Index)i] = this->ip_09_lastValue;
                }
            }
    
            this->ip_09_lastIndex = k;
        }
    }
    
    void ip_09_dspsetup(bool force) {
        if ((bool)(this->ip_09_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->ip_09_lastIndex = 0;
        this->ip_09_setupDone = true;
    }
    
    void param_21_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_21_value;
    }
    
    void param_21_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_21_value_set(preset["value"]);
    }
    
    void numberobj_31_init() {
        this->numberobj_31_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("note[2]/number_obj-76"), 1, this->_currentTime);
    }
    
    void numberobj_31_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_31_value;
    }
    
    void numberobj_31_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_31_value_set(preset["value"]);
    }
    
    number cycle_tilde_12_ph_next(number freq, number reset) {
        {
            {
                if (reset >= 0.)
                    this->cycle_tilde_12_ph_currentPhase = reset;
            }
        }
    
        number pincr = freq * this->cycle_tilde_12_ph_conv;
    
        if (this->cycle_tilde_12_ph_currentPhase < 0.)
            this->cycle_tilde_12_ph_currentPhase = 1. + this->cycle_tilde_12_ph_currentPhase;
    
        if (this->cycle_tilde_12_ph_currentPhase > 1.)
            this->cycle_tilde_12_ph_currentPhase = this->cycle_tilde_12_ph_currentPhase - 1.;
    
        number tmp = this->cycle_tilde_12_ph_currentPhase;
        this->cycle_tilde_12_ph_currentPhase += pincr;
        return tmp;
    }
    
    void cycle_tilde_12_ph_reset() {
        this->cycle_tilde_12_ph_currentPhase = 0;
    }
    
    void cycle_tilde_12_ph_dspsetup() {
        this->cycle_tilde_12_ph_conv = (number)1 / this->sr;
    }
    
    void cycle_tilde_12_dspsetup(bool force) {
        if ((bool)(this->cycle_tilde_12_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->cycle_tilde_12_phasei = 0;
        this->cycle_tilde_12_f2i = (number)4294967296 / this->samplerate();
        this->cycle_tilde_12_wrap = (long)(this->cycle_tilde_12_buffer->getSize()) - 1;
        this->cycle_tilde_12_setupDone = true;
        this->cycle_tilde_12_ph_dspsetup();
    }
    
    void cycle_tilde_12_bufferUpdated() {
        this->cycle_tilde_12_wrap = (long)(this->cycle_tilde_12_buffer->getSize()) - 1;
    }
    
    void numberobj_32_init() {
        this->numberobj_32_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("note[2]/number_obj-12"), 1, this->_currentTime);
    }
    
    void numberobj_32_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_32_value;
    }
    
    void numberobj_32_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_32_value_set(preset["value"]);
    }
    
    void random_05_nz_reset() {
        xoshiro_reset(
            systemticks() + this->voice() + this->random(0, 10000),
            this->random_05_nz_state
        );
    }
    
    void random_05_nz_init() {
        this->random_05_nz_reset();
    }
    
    void random_05_nz_seed(number v) {
        xoshiro_reset(v, this->random_05_nz_state);
    }
    
    number random_05_nz_next() {
        return xoshiro_next(this->random_05_nz_state);
    }
    
    void numberobj_33_init() {
        this->numberobj_33_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("note[2]/number_obj-20"), 1, this->_currentTime);
    }
    
    void numberobj_33_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_33_value;
    }
    
    void numberobj_33_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_33_value_set(preset["value"]);
    }
    
    number cycle_tilde_13_ph_next(number freq, number reset) {
        {
            {
                if (reset >= 0.)
                    this->cycle_tilde_13_ph_currentPhase = reset;
            }
        }
    
        number pincr = freq * this->cycle_tilde_13_ph_conv;
    
        if (this->cycle_tilde_13_ph_currentPhase < 0.)
            this->cycle_tilde_13_ph_currentPhase = 1. + this->cycle_tilde_13_ph_currentPhase;
    
        if (this->cycle_tilde_13_ph_currentPhase > 1.)
            this->cycle_tilde_13_ph_currentPhase = this->cycle_tilde_13_ph_currentPhase - 1.;
    
        number tmp = this->cycle_tilde_13_ph_currentPhase;
        this->cycle_tilde_13_ph_currentPhase += pincr;
        return tmp;
    }
    
    void cycle_tilde_13_ph_reset() {
        this->cycle_tilde_13_ph_currentPhase = 0;
    }
    
    void cycle_tilde_13_ph_dspsetup() {
        this->cycle_tilde_13_ph_conv = (number)1 / this->sr;
    }
    
    void cycle_tilde_13_dspsetup(bool force) {
        if ((bool)(this->cycle_tilde_13_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->cycle_tilde_13_phasei = 0;
        this->cycle_tilde_13_f2i = (number)4294967296 / this->samplerate();
        this->cycle_tilde_13_wrap = (long)(this->cycle_tilde_13_buffer->getSize()) - 1;
        this->cycle_tilde_13_setupDone = true;
        this->cycle_tilde_13_ph_dspsetup();
    }
    
    void cycle_tilde_13_bufferUpdated() {
        this->cycle_tilde_13_wrap = (long)(this->cycle_tilde_13_buffer->getSize()) - 1;
    }
    
    void numberobj_34_init() {
        this->numberobj_34_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("note[2]/number_obj-3"), 1, this->_currentTime);
    }
    
    void numberobj_34_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_34_value;
    }
    
    void numberobj_34_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_34_value_set(preset["value"]);
    }
    
    void random_06_nz_reset() {
        xoshiro_reset(
            systemticks() + this->voice() + this->random(0, 10000),
            this->random_06_nz_state
        );
    }
    
    void random_06_nz_init() {
        this->random_06_nz_reset();
    }
    
    void random_06_nz_seed(number v) {
        xoshiro_reset(v, this->random_06_nz_state);
    }
    
    number random_06_nz_next() {
        return xoshiro_next(this->random_06_nz_state);
    }
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        mtof_tilde_03_midivalue = 0;
        mtof_tilde_03_base = 440;
        receive_07_output_number = 0;
        dspexpr_30_in1 = 0;
        dspexpr_30_in2 = 0;
        p_08_target = 0;
        dspexpr_31_in1 = 0;
        dspexpr_31_in2 = 1;
        p_09_target = 0;
        param_19_value = 1;
        ip_07_value = 0;
        ip_07_impulse = 0;
        param_20_value = 1;
        ip_08_value = 0;
        ip_08_impulse = 0;
        receive_08_output_number = 0;
        expr_15_in1 = 0;
        expr_15_in2 = 127;
        expr_15_out1 = 0;
        ip_09_value = 0;
        ip_09_impulse = 0;
        param_21_value = 1;
        numberobj_31_value = 0;
        numberobj_31_value_setter(numberobj_31_value);
        expr_16_in1 = 0;
        expr_16_in2 = 100;
        expr_16_out1 = 0;
        scale_12_inlow = -1;
        scale_12_inhigh = 1;
        scale_12_outlow = 1;
        scale_12_outhigh = 100;
        scale_12_power = 1;
        cycle_tilde_12_frequency = 0.001;
        cycle_tilde_12_phase_offset = 0;
        snapshot_05_interval = 20;
        snapshot_05_out = 0;
        numberobj_32_value = 0;
        numberobj_32_value_setter(numberobj_32_value);
        expr_17_in1 = 0;
        expr_17_in2 = 10000;
        expr_17_out1 = 0;
        random_05_limit = 100;
        random_05_limit_setter(random_05_limit);
        random_05_seed = 0;
        receive_09_output_number = 0;
        numberobj_33_value = 0;
        numberobj_33_value_setter(numberobj_33_value);
        expr_18_in1 = 0;
        expr_18_in2 = 100;
        expr_18_out1 = 0;
        scale_13_inlow = -1;
        scale_13_inhigh = 1;
        scale_13_outlow = 1;
        scale_13_outhigh = 500;
        scale_13_power = 1;
        snapshot_06_interval = 20;
        snapshot_06_out = 0;
        cycle_tilde_13_frequency = 0.001;
        cycle_tilde_13_phase_offset = 0;
        numberobj_34_value = 0;
        numberobj_34_value_setter(numberobj_34_value);
        expr_19_in1 = 0;
        expr_19_in2 = 10000;
        expr_19_out1 = 0;
        random_06_limit = 100;
        random_06_limit_setter(random_06_limit);
        random_06_seed = 0;
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        signals[0] = nullptr;
        signals[1] = nullptr;
        signals[2] = nullptr;
        signals[3] = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        mtof_tilde_03_innerMtoF_lastInValue = 0;
        mtof_tilde_03_innerMtoF_lastOutValue = 0;
        mtof_tilde_03_innerMtoF_lastTuning = 0;
        mtof_tilde_03_innerScala_lastValid = false;
        mtof_tilde_03_innerScala_lastNote = 0;
        mtof_tilde_03_innerScala_lastFreq = 0;
        mtof_tilde_03_innerScala_sclEntryCount = 0;
        mtof_tilde_03_innerScala_sclOctaveMul = 1;
        mtof_tilde_03_innerScala_kbmValid = { 0, 0, 0, 60, 69, 440 };
        mtof_tilde_03_innerScala_kbmMid = 60;
        mtof_tilde_03_innerScala_kbmRefNum = 69;
        mtof_tilde_03_innerScala_kbmRefFreq = 440;
        mtof_tilde_03_innerScala_kbmSize = 0;
        mtof_tilde_03_innerScala_kbmMin = 0;
        mtof_tilde_03_innerScala_kbmMax = 0;
        mtof_tilde_03_innerScala_kbmOctaveDegree = 12;
        mtof_tilde_03_innerScala_kbmMapSize = 0;
        mtof_tilde_03_innerScala_refFreq = 261.63;
        param_19_lastValue = 0;
        ip_07_lastIndex = 0;
        ip_07_lastValue = 0;
        ip_07_resetCount = 0;
        ip_07_sigbuf = nullptr;
        ip_07_setupDone = false;
        param_20_lastValue = 0;
        ip_08_lastIndex = 0;
        ip_08_lastValue = 0;
        ip_08_resetCount = 0;
        ip_08_sigbuf = nullptr;
        ip_08_setupDone = false;
        ip_09_lastIndex = 0;
        ip_09_lastValue = 0;
        ip_09_resetCount = 0;
        ip_09_sigbuf = nullptr;
        ip_09_setupDone = false;
        param_21_lastValue = 0;
        numberobj_31_currentFormat = 6;
        numberobj_31_lastValue = 0;
        cycle_tilde_12_wrap = 0;
        cycle_tilde_12_ph_currentPhase = 0;
        cycle_tilde_12_ph_conv = 0;
        cycle_tilde_12_setupDone = false;
        snapshot_05_calc = 0;
        snapshot_05_nextTime = 0;
        snapshot_05_count = 0;
        snapshot_05_lastValue = 0;
        numberobj_32_currentFormat = 6;
        numberobj_32_lastValue = 0;
        numberobj_33_currentFormat = 6;
        numberobj_33_lastValue = 0;
        snapshot_06_calc = 0;
        snapshot_06_nextTime = 0;
        snapshot_06_count = 0;
        snapshot_06_lastValue = 0;
        cycle_tilde_13_wrap = 0;
        cycle_tilde_13_ph_currentPhase = 0;
        cycle_tilde_13_ph_conv = 0;
        cycle_tilde_13_setupDone = false;
        numberobj_34_currentFormat = 6;
        numberobj_34_lastValue = 0;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 1;
        parameterOffset = 0;
    }
    
    // member variables
    
        number mtof_tilde_03_midivalue;
        list mtof_tilde_03_scale;
        list mtof_tilde_03_map;
        number mtof_tilde_03_base;
        number receive_07_output_number;
        list receive_07_output_list;
        number dspexpr_30_in1;
        number dspexpr_30_in2;
        number p_08_target;
        number dspexpr_31_in1;
        number dspexpr_31_in2;
        number p_09_target;
        number param_19_value;
        number ip_07_value;
        number ip_07_impulse;
        number param_20_value;
        number ip_08_value;
        number ip_08_impulse;
        number receive_08_output_number;
        list receive_08_output_list;
        number expr_15_in1;
        number expr_15_in2;
        number expr_15_out1;
        number ip_09_value;
        number ip_09_impulse;
        number param_21_value;
        number numberobj_31_value;
        number expr_16_in1;
        number expr_16_in2;
        number expr_16_out1;
        list scale_12_input;
        number scale_12_inlow;
        number scale_12_inhigh;
        number scale_12_outlow;
        number scale_12_outhigh;
        number scale_12_power;
        list scale_12_out;
        number cycle_tilde_12_frequency;
        number cycle_tilde_12_phase_offset;
        number snapshot_05_interval;
        number snapshot_05_out;
        number numberobj_32_value;
        number expr_17_in1;
        number expr_17_in2;
        number expr_17_out1;
        number random_05_limit;
        number random_05_seed;
        number receive_09_output_number;
        list receive_09_output_list;
        number numberobj_33_value;
        number expr_18_in1;
        number expr_18_in2;
        number expr_18_out1;
        list scale_13_input;
        number scale_13_inlow;
        number scale_13_inhigh;
        number scale_13_outlow;
        number scale_13_outhigh;
        number scale_13_power;
        list scale_13_out;
        number snapshot_06_interval;
        number snapshot_06_out;
        number cycle_tilde_13_frequency;
        number cycle_tilde_13_phase_offset;
        number numberobj_34_value;
        number expr_19_in1;
        number expr_19_in2;
        number expr_19_out1;
        number random_06_limit;
        number random_06_seed;
        MillisecondTime _currentTime;
        UInt64 audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        SampleValue * signals[4];
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        number mtof_tilde_03_innerMtoF_lastInValue;
        number mtof_tilde_03_innerMtoF_lastOutValue;
        number mtof_tilde_03_innerMtoF_lastTuning;
        Float64BufferRef mtof_tilde_03_innerMtoF_buffer;
        const Index mtof_tilde_03_innerScala_KBM_MAP_OFFSET = 7;
        bool mtof_tilde_03_innerScala_lastValid;
        number mtof_tilde_03_innerScala_lastNote;
        number mtof_tilde_03_innerScala_lastFreq;
        int mtof_tilde_03_innerScala_sclEntryCount;
        number mtof_tilde_03_innerScala_sclOctaveMul;
        list mtof_tilde_03_innerScala_sclExpMul;
        list mtof_tilde_03_innerScala_kbmValid;
        int mtof_tilde_03_innerScala_kbmMid;
        int mtof_tilde_03_innerScala_kbmRefNum;
        number mtof_tilde_03_innerScala_kbmRefFreq;
        int mtof_tilde_03_innerScala_kbmSize;
        int mtof_tilde_03_innerScala_kbmMin;
        int mtof_tilde_03_innerScala_kbmMax;
        int mtof_tilde_03_innerScala_kbmOctaveDegree;
        Index mtof_tilde_03_innerScala_kbmMapSize;
        number mtof_tilde_03_innerScala_refFreq;
        number param_19_lastValue;
        SampleIndex ip_07_lastIndex;
        number ip_07_lastValue;
        SampleIndex ip_07_resetCount;
        signal ip_07_sigbuf;
        bool ip_07_setupDone;
        number param_20_lastValue;
        SampleIndex ip_08_lastIndex;
        number ip_08_lastValue;
        SampleIndex ip_08_resetCount;
        signal ip_08_sigbuf;
        bool ip_08_setupDone;
        SampleIndex ip_09_lastIndex;
        number ip_09_lastValue;
        SampleIndex ip_09_resetCount;
        signal ip_09_sigbuf;
        bool ip_09_setupDone;
        number param_21_lastValue;
        Int numberobj_31_currentFormat;
        number numberobj_31_lastValue;
        Float64BufferRef cycle_tilde_12_buffer;
        long cycle_tilde_12_wrap;
        uint32_t cycle_tilde_12_phasei;
        SampleValue cycle_tilde_12_f2i;
        number cycle_tilde_12_ph_currentPhase;
        number cycle_tilde_12_ph_conv;
        bool cycle_tilde_12_setupDone;
        number snapshot_05_calc;
        number snapshot_05_nextTime;
        SampleIndex snapshot_05_count;
        number snapshot_05_lastValue;
        Int numberobj_32_currentFormat;
        number numberobj_32_lastValue;
        UInt random_05_nz_state[4] = { };
        Int numberobj_33_currentFormat;
        number numberobj_33_lastValue;
        number snapshot_06_calc;
        number snapshot_06_nextTime;
        SampleIndex snapshot_06_count;
        number snapshot_06_lastValue;
        Float64BufferRef cycle_tilde_13_buffer;
        long cycle_tilde_13_wrap;
        uint32_t cycle_tilde_13_phasei;
        SampleValue cycle_tilde_13_f2i;
        number cycle_tilde_13_ph_currentPhase;
        number cycle_tilde_13_ph_conv;
        bool cycle_tilde_13_setupDone;
        Int numberobj_34_currentFormat;
        number numberobj_34_lastValue;
        UInt random_06_nz_state[4] = { };
        number stackprotect_count;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
        RNBOSubpatcher_798* p_08;
        RNBOSubpatcher_799* p_09;
    
};

class RNBOSubpatcher_809 : public PatcherInterfaceImpl {
    
    friend class drone;
    
    public:
    
    class RNBOSubpatcher_800 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_809;
            friend class drone;
            
            public:
            
            RNBOSubpatcher_800()
            {
            }
            
            ~RNBOSubpatcher_800()
            {
            }
            
            virtual RNBOSubpatcher_809* getPatcher() const {
                return static_cast<RNBOSubpatcher_809 *>(_parentPatcher);
            }
            
            drone* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            number samplerate() const {
                return this->sr;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
                const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
                const SampleValue * in3 = (numInputs >= 3 && inputs[2] ? inputs[2] : this->zeroBuffer);
                this->dspexpr_33_perform(in1, in2, this->signals[0], n);
            
                this->cycle_tilde_15_perform(
                    this->signals[0],
                    this->cycle_tilde_15_phase_offset,
                    this->signals[1],
                    this->dummyBuffer,
                    n
                );
            
                this->dspexpr_35_perform(this->signals[0], in3, this->signals[2], n);
                this->dspexpr_34_perform(this->signals[1], this->signals[2], this->signals[0], n);
                this->dspexpr_32_perform(in1, this->signals[0], this->signals[2], n);
                this->cycle_tilde_14_perform(this->signals[2], this->cycle_tilde_14_phase_offset, out1, out2, n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 3; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->cycle_tilde_15_dspsetup(forceDSPSetup);
                this->cycle_tilde_14_dspsetup(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->updateTime(time);
            
                if (index == 0) {
                    this->cycle_tilde_14_buffer = new Float64Buffer(this->getPatcher()->getPatcher()->RNBODefaultSinus);
                    this->cycle_tilde_14_bufferUpdated();
                    this->cycle_tilde_15_buffer = new Float64Buffer(this->getPatcher()->getPatcher()->RNBODefaultSinus);
                    this->cycle_tilde_15_bufferUpdated();
                }
            }
            
            void initialize() {
                this->assign_defaults();
                this->setState();
                this->cycle_tilde_14_buffer = new Float64Buffer(this->getPatcher()->getPatcher()->RNBODefaultSinus);
                this->cycle_tilde_15_buffer = new Float64Buffer(this->getPatcher()->getPatcher()->RNBODefaultSinus);
            }
            
            protected:
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 3;
            }
            
            Index getNumOutputChannels() const {
                return 2;
            }
            
            void initializeObjects() {}
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {
                this->cycle_tilde_14_buffer->requestSize(16384, 1);
                this->cycle_tilde_14_buffer->setSampleRate(this->sr);
                this->cycle_tilde_15_buffer->requestSize(16384, 1);
                this->cycle_tilde_15_buffer->setSampleRate(this->sr);
                this->cycle_tilde_14_buffer = this->cycle_tilde_14_buffer->allocateIfNeeded();
                this->cycle_tilde_15_buffer = this->cycle_tilde_15_buffer->allocateIfNeeded();
            }
            
            void dspexpr_33_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void cycle_tilde_15_perform(
                const Sample * frequency,
                number phase_offset,
                SampleValue * out1,
                SampleValue * out2,
                Index n
            ) {
                RNBO_UNUSED(phase_offset);
                auto __cycle_tilde_15_f2i = this->cycle_tilde_15_f2i;
                auto __cycle_tilde_15_buffer = this->cycle_tilde_15_buffer;
                auto __cycle_tilde_15_phasei = this->cycle_tilde_15_phasei;
                Index i;
            
                for (i = 0; i < n; i++) {
                    {
                        uint32_t uint_phase;
            
                        {
                            {
                                uint_phase = __cycle_tilde_15_phasei;
                            }
                        }
            
                        uint32_t idx = (uint32_t)(uint32_rshift(uint_phase, 18));
                        number frac = ((BinOpInt)((BinOpInt)uint_phase & (BinOpInt)262143)) * 3.81471181759574e-6;
                        number y0 = __cycle_tilde_15_buffer[(Index)idx];
                        number y1 = __cycle_tilde_15_buffer[(Index)((BinOpInt)(idx + 1) & (BinOpInt)16383)];
                        number y = y0 + frac * (y1 - y0);
            
                        {
                            uint32_t pincr = (uint32_t)(uint32_trunc(frequency[(Index)i] * __cycle_tilde_15_f2i));
                            __cycle_tilde_15_phasei = uint32_add(__cycle_tilde_15_phasei, pincr);
                        }
            
                        out1[(Index)i] = y;
                        out2[(Index)i] = uint_phase * 0.232830643653869629e-9;
                        continue;
                    }
                }
            
                this->cycle_tilde_15_phasei = __cycle_tilde_15_phasei;
            }
            
            void dspexpr_35_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_34_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_32_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] + in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void cycle_tilde_14_perform(
                const Sample * frequency,
                number phase_offset,
                SampleValue * out1,
                SampleValue * out2,
                Index n
            ) {
                RNBO_UNUSED(phase_offset);
                auto __cycle_tilde_14_f2i = this->cycle_tilde_14_f2i;
                auto __cycle_tilde_14_buffer = this->cycle_tilde_14_buffer;
                auto __cycle_tilde_14_phasei = this->cycle_tilde_14_phasei;
                Index i;
            
                for (i = 0; i < n; i++) {
                    {
                        uint32_t uint_phase;
            
                        {
                            {
                                uint_phase = __cycle_tilde_14_phasei;
                            }
                        }
            
                        uint32_t idx = (uint32_t)(uint32_rshift(uint_phase, 18));
                        number frac = ((BinOpInt)((BinOpInt)uint_phase & (BinOpInt)262143)) * 3.81471181759574e-6;
                        number y0 = __cycle_tilde_14_buffer[(Index)idx];
                        number y1 = __cycle_tilde_14_buffer[(Index)((BinOpInt)(idx + 1) & (BinOpInt)16383)];
                        number y = y0 + frac * (y1 - y0);
            
                        {
                            uint32_t pincr = (uint32_t)(uint32_trunc(frequency[(Index)i] * __cycle_tilde_14_f2i));
                            __cycle_tilde_14_phasei = uint32_add(__cycle_tilde_14_phasei, pincr);
                        }
            
                        out1[(Index)i] = y;
                        out2[(Index)i] = uint_phase * 0.232830643653869629e-9;
                        continue;
                    }
                }
            
                this->cycle_tilde_14_phasei = __cycle_tilde_14_phasei;
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            number cycle_tilde_14_ph_next(number freq, number reset) {
                {
                    {
                        if (reset >= 0.)
                            this->cycle_tilde_14_ph_currentPhase = reset;
                    }
                }
            
                number pincr = freq * this->cycle_tilde_14_ph_conv;
            
                if (this->cycle_tilde_14_ph_currentPhase < 0.)
                    this->cycle_tilde_14_ph_currentPhase = 1. + this->cycle_tilde_14_ph_currentPhase;
            
                if (this->cycle_tilde_14_ph_currentPhase > 1.)
                    this->cycle_tilde_14_ph_currentPhase = this->cycle_tilde_14_ph_currentPhase - 1.;
            
                number tmp = this->cycle_tilde_14_ph_currentPhase;
                this->cycle_tilde_14_ph_currentPhase += pincr;
                return tmp;
            }
            
            void cycle_tilde_14_ph_reset() {
                this->cycle_tilde_14_ph_currentPhase = 0;
            }
            
            void cycle_tilde_14_ph_dspsetup() {
                this->cycle_tilde_14_ph_conv = (number)1 / this->sr;
            }
            
            void cycle_tilde_14_dspsetup(bool force) {
                if ((bool)(this->cycle_tilde_14_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->cycle_tilde_14_phasei = 0;
                this->cycle_tilde_14_f2i = (number)4294967296 / this->samplerate();
                this->cycle_tilde_14_wrap = (long)(this->cycle_tilde_14_buffer->getSize()) - 1;
                this->cycle_tilde_14_setupDone = true;
                this->cycle_tilde_14_ph_dspsetup();
            }
            
            void cycle_tilde_14_bufferUpdated() {
                this->cycle_tilde_14_wrap = (long)(this->cycle_tilde_14_buffer->getSize()) - 1;
            }
            
            number cycle_tilde_15_ph_next(number freq, number reset) {
                {
                    {
                        if (reset >= 0.)
                            this->cycle_tilde_15_ph_currentPhase = reset;
                    }
                }
            
                number pincr = freq * this->cycle_tilde_15_ph_conv;
            
                if (this->cycle_tilde_15_ph_currentPhase < 0.)
                    this->cycle_tilde_15_ph_currentPhase = 1. + this->cycle_tilde_15_ph_currentPhase;
            
                if (this->cycle_tilde_15_ph_currentPhase > 1.)
                    this->cycle_tilde_15_ph_currentPhase = this->cycle_tilde_15_ph_currentPhase - 1.;
            
                number tmp = this->cycle_tilde_15_ph_currentPhase;
                this->cycle_tilde_15_ph_currentPhase += pincr;
                return tmp;
            }
            
            void cycle_tilde_15_ph_reset() {
                this->cycle_tilde_15_ph_currentPhase = 0;
            }
            
            void cycle_tilde_15_ph_dspsetup() {
                this->cycle_tilde_15_ph_conv = (number)1 / this->sr;
            }
            
            void cycle_tilde_15_dspsetup(bool force) {
                if ((bool)(this->cycle_tilde_15_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->cycle_tilde_15_phasei = 0;
                this->cycle_tilde_15_f2i = (number)4294967296 / this->samplerate();
                this->cycle_tilde_15_wrap = (long)(this->cycle_tilde_15_buffer->getSize()) - 1;
                this->cycle_tilde_15_setupDone = true;
                this->cycle_tilde_15_ph_dspsetup();
            }
            
            void cycle_tilde_15_bufferUpdated() {
                this->cycle_tilde_15_wrap = (long)(this->cycle_tilde_15_buffer->getSize()) - 1;
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                cycle_tilde_14_frequency = 0;
                cycle_tilde_14_phase_offset = 0;
                dspexpr_32_in1 = 0;
                dspexpr_32_in2 = 0;
                dspexpr_33_in1 = 0;
                dspexpr_33_in2 = 0;
                cycle_tilde_15_frequency = 0;
                cycle_tilde_15_phase_offset = 0;
                dspexpr_34_in1 = 0;
                dspexpr_34_in2 = 0;
                dspexpr_35_in1 = 0;
                dspexpr_35_in2 = 0;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                signals[1] = nullptr;
                signals[2] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                cycle_tilde_14_wrap = 0;
                cycle_tilde_14_ph_currentPhase = 0;
                cycle_tilde_14_ph_conv = 0;
                cycle_tilde_14_setupDone = false;
                cycle_tilde_15_wrap = 0;
                cycle_tilde_15_ph_currentPhase = 0;
                cycle_tilde_15_ph_conv = 0;
                cycle_tilde_15_setupDone = false;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number cycle_tilde_14_frequency;
                number cycle_tilde_14_phase_offset;
                number dspexpr_32_in1;
                number dspexpr_32_in2;
                number dspexpr_33_in1;
                number dspexpr_33_in2;
                number cycle_tilde_15_frequency;
                number cycle_tilde_15_phase_offset;
                number dspexpr_34_in1;
                number dspexpr_34_in2;
                number dspexpr_35_in1;
                number dspexpr_35_in2;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[3];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                Float64BufferRef cycle_tilde_14_buffer;
                long cycle_tilde_14_wrap;
                uint32_t cycle_tilde_14_phasei;
                SampleValue cycle_tilde_14_f2i;
                number cycle_tilde_14_ph_currentPhase;
                number cycle_tilde_14_ph_conv;
                bool cycle_tilde_14_setupDone;
                Float64BufferRef cycle_tilde_15_buffer;
                long cycle_tilde_15_wrap;
                uint32_t cycle_tilde_15_phasei;
                SampleValue cycle_tilde_15_f2i;
                number cycle_tilde_15_ph_currentPhase;
                number cycle_tilde_15_ph_conv;
                bool cycle_tilde_15_setupDone;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_801 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_809;
            friend class drone;
            
            public:
            
            RNBOSubpatcher_801()
            {
            }
            
            ~RNBOSubpatcher_801()
            {
            }
            
            virtual RNBOSubpatcher_809* getPatcher() const {
                return static_cast<RNBOSubpatcher_809 *>(_parentPatcher);
            }
            
            drone* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            inline number safediv(number num, number denom) {
                return (denom == 0.0 ? 0.0 : num / denom);
            }
            
            number maximum(number x, number y) {
                return (x < y ? y : x);
            }
            
            number mstosamps(MillisecondTime ms) {
                return ms * this->sr * 0.001;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
                const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
            
                this->gen_04_perform(
                    in2,
                    in2,
                    this->gen_04_in3,
                    this->gen_04_in4,
                    this->gen_04_in5,
                    this->gen_04_in6,
                    this->gen_04_attack_lockout,
                    this->signals[0],
                    n
                );
            
                this->dspexpr_36_perform(in1, this->signals[0], out1, n);
                this->signalforwarder_05_perform(this->signals[0], out2, n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 1; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->gen_04_dspsetup(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& preset) {
                this->param_22_getPresetValue(getSubState(preset, "attack"));
                this->param_23_getPresetValue(getSubState(preset, "decay"));
                this->param_24_getPresetValue(getSubState(preset, "sustain"));
                this->param_25_getPresetValue(getSubState(preset, "release"));
            }
            
            void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
                this->updateTime(time);
            
                switch (index) {
                case 0:
                    {
                    this->param_22_value_set(v);
                    break;
                    }
                case 1:
                    {
                    this->param_23_value_set(v);
                    break;
                    }
                case 2:
                    {
                    this->param_24_value_set(v);
                    break;
                    }
                case 3:
                    {
                    this->param_25_value_set(v);
                    break;
                    }
                }
            }
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                case 0:
                    {
                    return this->param_22_value;
                    }
                case 1:
                    {
                    return this->param_23_value;
                    }
                case 2:
                    {
                    return this->param_24_value;
                    }
                case 3:
                    {
                    return this->param_25_value;
                    }
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 4;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                case 0:
                    {
                    return "attack";
                    }
                case 1:
                    {
                    return "decay";
                    }
                case 2:
                    {
                    return "sustain";
                    }
                case 3:
                    {
                    return "release";
                    }
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                case 0:
                    {
                    return "note[3]/env.adsr/attack";
                    }
                case 1:
                    {
                    return "note[3]/env.adsr/decay";
                    }
                case 2:
                    {
                    return "note[3]/env.adsr/sustain";
                    }
                case 3:
                    {
                    return "note[3]/env.adsr/release";
                    }
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
                {
                    switch (index) {
                    case 0:
                        {
                        info->type = ParameterTypeNumber;
                        info->initialValue = 30;
                        info->min = 0;
                        info->max = 5000;
                        info->exponent = 3;
                        info->steps = 0;
                        info->debug = false;
                        info->saveable = true;
                        info->transmittable = true;
                        info->initialized = true;
                        info->visible = true;
                        info->displayName = "";
                        info->unit = "";
                        info->ioType = IOTypeUndefined;
                        info->signalIndex = INVALID_INDEX;
                        break;
                        }
                    case 1:
                        {
                        info->type = ParameterTypeNumber;
                        info->initialValue = 200;
                        info->min = 1;
                        info->max = 5000;
                        info->exponent = 3;
                        info->steps = 0;
                        info->debug = false;
                        info->saveable = true;
                        info->transmittable = true;
                        info->initialized = true;
                        info->visible = true;
                        info->displayName = "";
                        info->unit = "";
                        info->ioType = IOTypeUndefined;
                        info->signalIndex = INVALID_INDEX;
                        break;
                        }
                    case 2:
                        {
                        info->type = ParameterTypeNumber;
                        info->initialValue = 0.5;
                        info->min = 0;
                        info->max = 1;
                        info->exponent = 0.8;
                        info->steps = 0;
                        info->debug = false;
                        info->saveable = true;
                        info->transmittable = true;
                        info->initialized = true;
                        info->visible = true;
                        info->displayName = "";
                        info->unit = "";
                        info->ioType = IOTypeUndefined;
                        info->signalIndex = INVALID_INDEX;
                        break;
                        }
                    case 3:
                        {
                        info->type = ParameterTypeNumber;
                        info->initialValue = 300;
                        info->min = 1;
                        info->max = 90000;
                        info->exponent = 5;
                        info->steps = 0;
                        info->debug = false;
                        info->saveable = true;
                        info->transmittable = true;
                        info->initialized = true;
                        info->visible = true;
                        info->displayName = "";
                        info->unit = "";
                        info->ioType = IOTypeUndefined;
                        info->signalIndex = INVALID_INDEX;
                        break;
                        }
                    }
                }
            }
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                case 2:
                    {
                    {
                        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                        ParameterValue normalizedValue = (value - 0) / (1 - 0);
            
                        {
                            if (normalizedValue != 0.0) {
                                normalizedValue = rnbo_exp(
                                    rnbo_log((normalizedValue <= 0.0000000001 ? 0.0000000001 : normalizedValue)) * 1. / (number)0.8
                                );
                            }
                        }
            
                        return normalizedValue;
                    }
                    }
                case 0:
                    {
                    {
                        value = (value < 0 ? 0 : (value > 5000 ? 5000 : value));
                        ParameterValue normalizedValue = (value - 0) / (5000 - 0);
            
                        {
                            if (normalizedValue != 0.0) {
                                normalizedValue = rnbo_exp(
                                    rnbo_log((normalizedValue <= 0.0000000001 ? 0.0000000001 : normalizedValue)) * 1. / (number)3
                                );
                            }
                        }
            
                        return normalizedValue;
                    }
                    }
                case 1:
                    {
                    {
                        value = (value < 1 ? 1 : (value > 5000 ? 5000 : value));
                        ParameterValue normalizedValue = (value - 1) / (5000 - 1);
            
                        {
                            if (normalizedValue != 0.0) {
                                normalizedValue = rnbo_exp(
                                    rnbo_log((normalizedValue <= 0.0000000001 ? 0.0000000001 : normalizedValue)) * 1. / (number)3
                                );
                            }
                        }
            
                        return normalizedValue;
                    }
                    }
                case 3:
                    {
                    {
                        value = (value < 1 ? 1 : (value > 90000 ? 90000 : value));
                        ParameterValue normalizedValue = (value - 1) / (90000 - 1);
            
                        {
                            if (normalizedValue != 0.0) {
                                normalizedValue = rnbo_exp(
                                    rnbo_log((normalizedValue <= 0.0000000001 ? 0.0000000001 : normalizedValue)) * 1. / (number)5
                                );
                            }
                        }
            
                        return normalizedValue;
                    }
                    }
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                case 2:
                    {
                    {
                        {
                            if (value == 0.0) {
                                return 0;
                            } else {
                                return 0 + rnbo_exp(rnbo_log((value <= 0.0000000001 ? 0.0000000001 : value)) * 0.8) * (1 - 0);
                            }
                        }
                    }
                    }
                case 0:
                    {
                    {
                        {
                            if (value == 0.0) {
                                return 0;
                            } else {
                                return 0 + rnbo_exp(rnbo_log((value <= 0.0000000001 ? 0.0000000001 : value)) * 3) * (5000 - 0);
                            }
                        }
                    }
                    }
                case 1:
                    {
                    {
                        {
                            if (value == 0.0) {
                                return 1;
                            } else {
                                return 1 + rnbo_exp(rnbo_log((value <= 0.0000000001 ? 0.0000000001 : value)) * 3) * (5000 - 1);
                            }
                        }
                    }
                    }
                case 3:
                    {
                    {
                        {
                            if (value == 0.0) {
                                return 1;
                            } else {
                                return 1 + rnbo_exp(rnbo_log((value <= 0.0000000001 ? 0.0000000001 : value)) * 5) * (90000 - 1);
                            }
                        }
                    }
                    }
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                case 0:
                    {
                    return this->param_22_value_constrain(value);
                    }
                case 1:
                    {
                    return this->param_23_value_constrain(value);
                    }
                case 2:
                    {
                    return this->param_24_value_constrain(value);
                    }
                case 3:
                    {
                    return this->param_25_value_constrain(value);
                    }
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            void param_22_value_set(number v) {
                v = this->param_22_value_constrain(v);
                this->param_22_value = v;
                this->sendParameter(0, false);
            
                if (this->param_22_value != this->param_22_lastValue) {
                    this->getEngine()->presetTouched();
                    this->param_22_lastValue = this->param_22_value;
                }
            
                this->gen_04_in3_set(v);
            }
            
            void param_23_value_set(number v) {
                v = this->param_23_value_constrain(v);
                this->param_23_value = v;
                this->sendParameter(1, false);
            
                if (this->param_23_value != this->param_23_lastValue) {
                    this->getEngine()->presetTouched();
                    this->param_23_lastValue = this->param_23_value;
                }
            
                this->gen_04_in4_set(v);
            }
            
            void param_24_value_set(number v) {
                v = this->param_24_value_constrain(v);
                this->param_24_value = v;
                this->sendParameter(2, false);
            
                if (this->param_24_value != this->param_24_lastValue) {
                    this->getEngine()->presetTouched();
                    this->param_24_lastValue = this->param_24_value;
                }
            
                this->gen_04_in5_set(v);
            }
            
            void param_25_value_set(number v) {
                v = this->param_25_value_constrain(v);
                this->param_25_value = v;
                this->sendParameter(3, false);
            
                if (this->param_25_value != this->param_25_lastValue) {
                    this->getEngine()->presetTouched();
                    this->param_25_lastValue = this->param_25_value;
                }
            
                this->gen_04_in6_set(v);
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 2;
            }
            
            Index getNumOutputChannels() const {
                return 2;
            }
            
            void initializeObjects() {
                this->gen_04_attack_has_ended_init();
                this->gen_04_sustain_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {
                this->updateTime(this->getEngine()->getCurrentTime());
            
                {
                    this->scheduleParamInit(0, 0);
                }
            
                {
                    this->scheduleParamInit(1, 0);
                }
            
                {
                    this->scheduleParamInit(2, 0);
                }
            
                {
                    this->scheduleParamInit(3, 0);
                }
            }
            
            void allocateDataRefs() {}
            
            number param_22_value_constrain(number v) const {
                v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));
                return v;
            }
            
            void gen_04_in3_set(number v) {
                this->gen_04_in3 = v;
            }
            
            number param_23_value_constrain(number v) const {
                v = (v > 5000 ? 5000 : (v < 1 ? 1 : v));
                return v;
            }
            
            void gen_04_in4_set(number v) {
                this->gen_04_in4 = v;
            }
            
            number param_24_value_constrain(number v) const {
                v = (v > 1 ? 1 : (v < 0 ? 0 : v));
                return v;
            }
            
            void gen_04_in5_set(number v) {
                this->gen_04_in5 = v;
            }
            
            number param_25_value_constrain(number v) const {
                v = (v > 90000 ? 90000 : (v < 1 ? 1 : v));
                return v;
            }
            
            void gen_04_in6_set(number v) {
                this->gen_04_in6 = v;
            }
            
            void gen_04_perform(
                const Sample * in1,
                const Sample * in2,
                number in3,
                number in4,
                number in5,
                number in6,
                number attack_lockout,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(attack_lockout);
                auto __gen_04_sustain_value = this->gen_04_sustain_value;
                auto __gen_04_attack_has_ended_value = this->gen_04_attack_has_ended_value;
                auto min_1_0 = this->maximum(in3, 0.1);
                auto min_2_1 = this->maximum(in4, 0.1);
                number clamp_3_2 = (in5 > 1 ? 1 : (in5 < 0 ? 0 : in5));
                auto min_4_3 = this->maximum(in6, 0.1);
                number attack_iter_interval_8 = this->mstosamps(min_1_0) * 0.33333333333333;
                number release_iter_interval_9 = this->mstosamps(min_4_3) * 0.33333333333333;
                number decay_iter_interval_10 = this->mstosamps(min_2_1) * 0.33333333333333;
                number sustain_smoothing_12 = 1 - ((this->mstosamps(20) == 0. ? 0. : (number)1 / this->mstosamps(20)));
                Index i;
            
                for (i = 0; i < n; i++) {
                    number trigger_5 = this->gen_04_delta_4_next(in2[(Index)i] > 0) > 0;
                    number is_released_6 = in1[(Index)i] == 0;
                    number is_attacking_7 = ((bool)(trigger_5) || (bool)(!(bool)(__gen_04_attack_has_ended_value))) && ((bool)(!(bool)(is_released_6)) || 0);
                    number decay_iter_interval_5_11 = !(bool)(is_released_6) * decay_iter_interval_10 + is_released_6 * release_iter_interval_9;
                    __gen_04_sustain_value = clamp_3_2 + sustain_smoothing_12 * (__gen_04_sustain_value - clamp_3_2);
                    number ad_target_13 = (is_attacking_7 > 0 ? 1.0523956964913 : -0.052395696491256);
                    number asr_target_14 = ((bool)(!(bool)(is_released_6)) || (bool)(is_attacking_7) ? 1.0523956964913 : -0.052395696491256);
                    number ad_16 = this->gen_04_slide_15_next(ad_target_13, attack_iter_interval_8, decay_iter_interval_5_11);
                    number ad_6_17 = (ad_16 > 1 ? 1 : (ad_16 < 0 ? 0 : ad_16));
                    number asr_19 = this->gen_04_slide_18_next(asr_target_14, attack_iter_interval_8, release_iter_interval_9);
                    number asr_7_20 = (asr_19 > 1 ? 1 : (asr_19 < 0 ? 0 : asr_19));
                    __gen_04_attack_has_ended_value = (bool)(!(bool)(is_attacking_7)) || ad_6_17 >= 1;
                    number expr_8_21 = ad_6_17 + __gen_04_sustain_value * (asr_7_20 - ad_6_17);
                    out1[(Index)i] = expr_8_21;
                }
            
                this->gen_04_attack_has_ended_value = __gen_04_attack_has_ended_value;
                this->gen_04_sustain_value = __gen_04_sustain_value;
            }
            
            void dspexpr_36_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void signalforwarder_05_perform(const SampleValue * input, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            number gen_04_attack_has_ended_getvalue() {
                return this->gen_04_attack_has_ended_value;
            }
            
            void gen_04_attack_has_ended_setvalue(number val) {
                this->gen_04_attack_has_ended_value = val;
            }
            
            void gen_04_attack_has_ended_reset() {
                this->gen_04_attack_has_ended_value = 0;
            }
            
            void gen_04_attack_has_ended_init() {
                this->gen_04_attack_has_ended_value = 0;
            }
            
            number gen_04_sustain_getvalue() {
                return this->gen_04_sustain_value;
            }
            
            void gen_04_sustain_setvalue(number val) {
                this->gen_04_sustain_value = val;
            }
            
            void gen_04_sustain_reset() {
                this->gen_04_sustain_value = 0;
            }
            
            void gen_04_sustain_init() {
                this->gen_04_sustain_value = 0.5;
            }
            
            number gen_04_delta_4_next(number x) {
                number temp = (number)(x - this->gen_04_delta_4_prev);
                this->gen_04_delta_4_prev = x;
                return temp;
            }
            
            void gen_04_delta_4_dspsetup() {
                this->gen_04_delta_4_reset();
            }
            
            void gen_04_delta_4_reset() {
                this->gen_04_delta_4_prev = 0;
            }
            
            number gen_04_slide_15_next(number x, number up, number down) {
                number temp = x - this->gen_04_slide_15_prev;
                auto iup = this->safediv(1., this->maximum(1., rnbo_abs(up)));
                auto idown = this->safediv(1., this->maximum(1., rnbo_abs(down)));
                this->gen_04_slide_15_prev = this->gen_04_slide_15_prev + ((x > this->gen_04_slide_15_prev ? iup : idown)) * temp;
                return this->gen_04_slide_15_prev;
            }
            
            void gen_04_slide_15_reset() {
                this->gen_04_slide_15_prev = 0;
            }
            
            number gen_04_slide_18_next(number x, number up, number down) {
                number temp = x - this->gen_04_slide_18_prev;
                auto iup = this->safediv(1., this->maximum(1., rnbo_abs(up)));
                auto idown = this->safediv(1., this->maximum(1., rnbo_abs(down)));
                this->gen_04_slide_18_prev = this->gen_04_slide_18_prev + ((x > this->gen_04_slide_18_prev ? iup : idown)) * temp;
                return this->gen_04_slide_18_prev;
            }
            
            void gen_04_slide_18_reset() {
                this->gen_04_slide_18_prev = 0;
            }
            
            void gen_04_dspsetup(bool force) {
                if ((bool)(this->gen_04_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->gen_04_setupDone = true;
                this->gen_04_delta_4_dspsetup();
            }
            
            void param_22_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->param_22_value;
            }
            
            void param_22_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->param_22_value_set(preset["value"]);
            }
            
            void param_23_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->param_23_value;
            }
            
            void param_23_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->param_23_value_set(preset["value"]);
            }
            
            void param_24_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->param_24_value;
            }
            
            void param_24_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->param_24_value_set(preset["value"]);
            }
            
            void param_25_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->param_25_value;
            }
            
            void param_25_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->param_25_value_set(preset["value"]);
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                dspexpr_36_in1 = 0;
                dspexpr_36_in2 = 0;
                gen_04_in1 = 0;
                gen_04_in2 = 0;
                gen_04_in3 = 0;
                gen_04_in4 = 0;
                gen_04_in5 = 0;
                gen_04_in6 = 0;
                gen_04_attack_lockout = 0;
                param_22_value = 30;
                param_23_value = 200;
                param_24_value = 0.5;
                param_25_value = 300;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                gen_04_attack_has_ended_value = 0;
                gen_04_sustain_value = 0;
                gen_04_delta_4_prev = 0;
                gen_04_slide_15_prev = 0;
                gen_04_slide_18_prev = 0;
                gen_04_setupDone = false;
                param_22_lastValue = 0;
                param_23_lastValue = 0;
                param_24_lastValue = 0;
                param_25_lastValue = 0;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number dspexpr_36_in1;
                number dspexpr_36_in2;
                number gen_04_in1;
                number gen_04_in2;
                number gen_04_in3;
                number gen_04_in4;
                number gen_04_in5;
                number gen_04_in6;
                number gen_04_attack_lockout;
                number param_22_value;
                number param_23_value;
                number param_24_value;
                number param_25_value;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[1];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                number gen_04_attack_has_ended_value;
                number gen_04_sustain_value;
                number gen_04_delta_4_prev;
                number gen_04_slide_15_prev;
                number gen_04_slide_18_prev;
                bool gen_04_setupDone;
                number param_22_lastValue;
                number param_23_lastValue;
                number param_24_lastValue;
                number param_25_lastValue;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    RNBOSubpatcher_809()
    {
    }
    
    ~RNBOSubpatcher_809()
    {
        delete this->p_10;
        delete this->p_11;
    }
    
    virtual drone* getPatcher() const {
        return static_cast<drone *>(_parentPatcher);
    }
    
    drone* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
        getEngine()->flushClockEvents(this, -1508480176, false);
        getEngine()->flushClockEvents(this, -871642103, false);
        getEngine()->flushClockEvents(this, 1646922831, false);
    }
    
    inline number linearinterp(number frac, number x, number y) {
        return x + (y - x) * frac;
    }
    
    inline number safediv(number num, number denom) {
        return (denom == 0.0 ? 0.0 : num / denom);
    }
    
    number safepow(number base, number exponent) {
        return fixnan(rnbo_pow(base, exponent));
    }
    
    number scale(
        number x,
        number lowin,
        number hiin,
        number lowout,
        number highout,
        number pow
    ) {
        auto inscale = this->safediv(1., hiin - lowin);
        number outdiff = highout - lowout;
        number value = (x - lowin) * inscale;
    
        if (pow != 1) {
            if (value > 0)
                value = this->safepow(value, pow);
            else
                value = -this->safepow(-value, pow);
        }
    
        value = value * outdiff + lowout;
        return value;
    }
    
    number samplerate() const {
        return this->sr;
    }
    
    Index voice() {
        return this->_voiceIndex;
    }
    
    number random(number low, number high) {
        number range = high - low;
        return globalrandom() * range + low;
    }
    
    Index getNumMidiInputPorts() const {
        return 0;
    }
    
    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        const SampleValue * const* inputs,
        Index numInputs,
        SampleValue * const* outputs,
        Index numOutputs,
        Index n
    ) {
        RNBO_UNUSED(numInputs);
        RNBO_UNUSED(inputs);
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
        this->mtof_tilde_04_perform(this->mtof_tilde_04_midivalue, this->signals[0], n);
        this->dspexpr_38_perform(this->signals[0], this->dspexpr_38_in2, this->signals[1], n);
        this->ip_10_perform(this->signals[0], n);
        this->ip_11_perform(this->signals[2], n);
    
        this->p_10_perform(
            this->signals[1],
            this->signals[0],
            this->signals[2],
            this->signals[3],
            this->dummyBuffer,
            n
        );
    
        this->ip_12_perform(this->signals[2], n);
        this->p_11_perform(this->signals[3], this->signals[2], this->signals[0], this->dummyBuffer, n);
        this->dspexpr_37_perform(this->signals[0], this->dspexpr_37_in2, out1, n);
    
        this->cycle_tilde_16_perform(
            this->cycle_tilde_16_frequency,
            this->cycle_tilde_16_phase_offset,
            this->signals[0],
            this->dummyBuffer,
            n
        );
    
        this->snapshot_07_perform(this->signals[0], n);
    
        this->cycle_tilde_17_perform(
            this->cycle_tilde_17_frequency,
            this->cycle_tilde_17_phase_offset,
            this->signals[0],
            this->dummyBuffer,
            n
        );
    
        this->snapshot_08_perform(this->signals[0], n);
        this->stackprotect_perform(n);
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            Index i;
    
            for (i = 0; i < 4; i++) {
                this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
            }
    
            this->ip_10_sigbuf = resizeSignal(this->ip_10_sigbuf, this->maxvs, maxBlockSize);
            this->ip_11_sigbuf = resizeSignal(this->ip_11_sigbuf, this->maxvs, maxBlockSize);
            this->ip_12_sigbuf = resizeSignal(this->ip_12_sigbuf, this->maxvs, maxBlockSize);
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        this->ip_10_dspsetup(forceDSPSetup);
        this->ip_11_dspsetup(forceDSPSetup);
        this->ip_12_dspsetup(forceDSPSetup);
        this->cycle_tilde_16_dspsetup(forceDSPSetup);
        this->cycle_tilde_17_dspsetup(forceDSPSetup);
        this->p_10->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_11->prepareToProcess(sampleRate, maxBlockSize, force);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            {
            this->setProbingIndex(-1);
            break;
            }
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    void onSampleRateChanged(double ) {}
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {
        this->p_10 = new RNBOSubpatcher_800();
        this->p_10->setEngineAndPatcher(this->getEngine(), this);
        this->p_10->initialize();
        this->p_10->setParameterOffset(this->getParameterOffset(this->p_10));
        this->p_11 = new RNBOSubpatcher_801();
        this->p_11->setEngineAndPatcher(this->getEngine(), this);
        this->p_11->initialize();
        this->p_11->setParameterOffset(this->getParameterOffset(this->p_11));
    }
    
    void getPreset(PatcherStateInterface& preset) {
        this->param_26_getPresetValue(getSubState(preset, "ratio"));
        this->param_27_getPresetValue(getSubState(preset, "index"));
        this->param_28_getPresetValue(getSubState(preset, "lfo"));
        this->p_10->getPreset(getSubState(getSubState(preset, "__sps"), "osc.fm[4]"));
        this->p_11->getPreset(getSubState(getSubState(preset, "__sps"), "env.adsr"));
    }
    
    void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
        this->updateTime(time);
    
        switch (index) {
        case 0:
            {
            this->param_26_value_set(v);
            break;
            }
        case 1:
            {
            this->param_27_value_set(v);
            break;
            }
        case 2:
            {
            this->param_28_value_set(v);
            break;
            }
        default:
            {
            index -= 3;
    
            if (index < this->p_10->getNumParameters())
                this->p_10->setParameterValue(index, v, time);
    
            index -= this->p_10->getNumParameters();
    
            if (index < this->p_11->getNumParameters())
                this->p_11->setParameterValue(index, v, time);
    
            break;
            }
        }
    }
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
        this->setParameterValue(index, this->getParameterValue(index), time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        case 0:
            {
            return this->param_26_value;
            }
        case 1:
            {
            return this->param_27_value;
            }
        case 2:
            {
            return this->param_28_value;
            }
        default:
            {
            index -= 3;
    
            if (index < this->p_10->getNumParameters())
                return this->p_10->getParameterValue(index);
    
            index -= this->p_10->getNumParameters();
    
            if (index < this->p_11->getNumParameters())
                return this->p_11->getParameterValue(index);
    
            return 0;
            }
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 0;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 0;
    }
    
    ParameterIndex getNumParameters() const {
        return 3 + this->p_10->getNumParameters() + this->p_11->getNumParameters();
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        case 0:
            {
            return "ratio";
            }
        case 1:
            {
            return "index";
            }
        case 2:
            {
            return "lfo";
            }
        default:
            {
            index -= 3;
    
            if (index < this->p_10->getNumParameters())
                return this->p_10->getParameterName(index);
    
            index -= this->p_10->getNumParameters();
    
            if (index < this->p_11->getNumParameters())
                return this->p_11->getParameterName(index);
    
            return "bogus";
            }
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        case 0:
            {
            return "note[3]/ratio";
            }
        case 1:
            {
            return "note[3]/index";
            }
        case 2:
            {
            return "note[3]/lfo";
            }
        default:
            {
            index -= 3;
    
            if (index < this->p_10->getNumParameters())
                return this->p_10->getParameterId(index);
    
            index -= this->p_10->getNumParameters();
    
            if (index < this->p_11->getNumParameters())
                return this->p_11->getParameterId(index);
    
            return "bogus";
            }
        }
    }
    
    void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
        {
            switch (index) {
            case 0:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 1;
                info->min = 1;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            case 1:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 1;
                info->min = 1;
                info->max = 20;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            case 2:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 1;
                info->min = 1;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            default:
                {
                index -= 3;
    
                if (index < this->p_10->getNumParameters())
                    this->p_10->getParameterInfo(index, info);
    
                index -= this->p_10->getNumParameters();
    
                if (index < this->p_11->getNumParameters())
                    this->p_11->getParameterInfo(index, info);
    
                break;
                }
            }
        }
    }
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
        if (subpatcher == this->p_10)
            return 3;
    
        if (subpatcher == this->p_11)
            return 3 + this->p_10->getNumParameters();
    
        return 0;
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        case 1:
            {
            {
                value = (value < 1 ? 1 : (value > 20 ? 20 : value));
                ParameterValue normalizedValue = (value - 1) / (20 - 1);
                return normalizedValue;
            }
            }
        case 0:
        case 2:
            {
            {
                value = (value < 1 ? 1 : (value > 100 ? 100 : value));
                ParameterValue normalizedValue = (value - 1) / (100 - 1);
                return normalizedValue;
            }
            }
        default:
            {
            index -= 3;
    
            if (index < this->p_10->getNumParameters())
                return this->p_10->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_10->getNumParameters();
    
            if (index < this->p_11->getNumParameters())
                return this->p_11->convertToNormalizedParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        case 1:
            {
            {
                {
                    return 1 + value * (20 - 1);
                }
            }
            }
        case 0:
        case 2:
            {
            {
                {
                    return 1 + value * (100 - 1);
                }
            }
            }
        default:
            {
            index -= 3;
    
            if (index < this->p_10->getNumParameters())
                return this->p_10->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_10->getNumParameters();
    
            if (index < this->p_11->getNumParameters())
                return this->p_11->convertFromNormalizedParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        case 0:
            {
            return this->param_26_value_constrain(value);
            }
        case 1:
            {
            return this->param_27_value_constrain(value);
            }
        case 2:
            {
            return this->param_28_value_constrain(value);
            }
        default:
            {
            index -= 3;
    
            if (index < this->p_10->getNumParameters())
                return this->p_10->constrainParameterValue(index, value);
    
            index -= this->p_10->getNumParameters();
    
            if (index < this->p_11->getNumParameters())
                return this->p_11->constrainParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
        RNBO_UNUSED(hasValue);
        this->updateTime(time);
    
        switch (index) {
        case -1508480176:
            {
            this->snapshot_07_out_set(value);
            break;
            }
        case -871642103:
            {
            this->loadbang_04_startupbang_bang();
            break;
            }
        case 1646922831:
            {
            this->snapshot_08_out_set(value);
            break;
            }
        }
    }
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("valin"):
            {
            if (TAG("note[3]/number_obj-76") == objectId)
                this->numberobj_35_valin_set(payload);
    
            if (TAG("note[3]/number_obj-12") == objectId)
                this->numberobj_36_valin_set(payload);
    
            if (TAG("note[3]/number_obj-20") == objectId)
                this->numberobj_37_valin_set(payload);
    
            if (TAG("note[3]/number_obj-3") == objectId)
                this->numberobj_38_valin_set(payload);
    
            break;
            }
        case TAG("format"):
            {
            if (TAG("note[3]/number_obj-76") == objectId)
                this->numberobj_35_format_set(payload);
    
            if (TAG("note[3]/number_obj-12") == objectId)
                this->numberobj_36_format_set(payload);
    
            if (TAG("note[3]/number_obj-20") == objectId)
                this->numberobj_37_format_set(payload);
    
            if (TAG("note[3]/number_obj-3") == objectId)
                this->numberobj_38_format_set(payload);
    
            break;
            }
        }
    
        this->p_10->processNumMessage(tag, objectId, time, payload);
        this->p_11->processNumMessage(tag, objectId, time, payload);
    }
    
    void processListMessage(
        MessageTag tag,
        MessageTag objectId,
        MillisecondTime time,
        const list& payload
    ) {
        RNBO_UNUSED(objectId);
        this->updateTime(time);
        this->p_10->processListMessage(tag, objectId, time, payload);
        this->p_11->processListMessage(tag, objectId, time, payload);
    }
    
    void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("startupbang"):
            {
            if (TAG("note[3]/loadbang_obj-10") == objectId)
                this->loadbang_04_startupbang_bang();
    
            break;
            }
        case TAG("bangin"):
            {
            if (TAG("note[3]/button_obj-9") == objectId)
                this->button_04_bangin_bang();
    
            break;
            }
        }
    
        this->p_10->processBangMessage(tag, objectId, time);
        this->p_11->processBangMessage(tag, objectId, time);
    }
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
        case TAG("valout"):
            {
            return "valout";
            }
        case TAG("note[3]/number_obj-76"):
            {
            return "note[3]/number_obj-76";
            }
        case TAG("setup"):
            {
            return "setup";
            }
        case TAG("note[3]/number_obj-12"):
            {
            return "note[3]/number_obj-12";
            }
        case TAG("bangout"):
            {
            return "bangout";
            }
        case TAG("note[3]/button_obj-9"):
            {
            return "note[3]/button_obj-9";
            }
        case TAG("note[3]/number_obj-20"):
            {
            return "note[3]/number_obj-20";
            }
        case TAG("note[3]/number_obj-3"):
            {
            return "note[3]/number_obj-3";
            }
        case TAG("valin"):
            {
            return "valin";
            }
        case TAG("format"):
            {
            return "format";
            }
        case TAG("startupbang"):
            {
            return "startupbang";
            }
        case TAG("note[3]/loadbang_obj-10"):
            {
            return "note[3]/loadbang_obj-10";
            }
        case TAG("bangin"):
            {
            return "bangin";
            }
        }
    
        auto subpatchResult_0 = this->p_10->resolveTag(tag);
    
        if (subpatchResult_0)
            return subpatchResult_0;
    
        auto subpatchResult_1 = this->p_11->resolveTag(tag);
    
        if (subpatchResult_1)
            return subpatchResult_1;
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        default:
            {
            return nullptr;
            }
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 0;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
        this->updateTime(time);
    
        if (index == 1) {
            this->mtof_tilde_04_innerMtoF_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultMtofLookupTable256);
        }
    
        if (index == 0) {
            this->cycle_tilde_16_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultSinus);
            this->cycle_tilde_16_bufferUpdated();
            this->cycle_tilde_17_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultSinus);
            this->cycle_tilde_17_bufferUpdated();
        }
    
        this->p_10->processDataViewUpdate(index, time);
        this->p_11->processDataViewUpdate(index, time);
    }
    
    void initialize() {
        this->assign_defaults();
        this->setState();
        this->mtof_tilde_04_innerMtoF_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultMtofLookupTable256);
        this->cycle_tilde_16_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultSinus);
        this->cycle_tilde_17_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultSinus);
    }
    
    protected:
    
    void param_26_value_set(number v) {
        v = this->param_26_value_constrain(v);
        this->param_26_value = v;
        this->sendParameter(0, false);
    
        if (this->param_26_value != this->param_26_lastValue) {
            this->getEngine()->presetTouched();
            this->param_26_lastValue = this->param_26_value;
        }
    
        this->ip_10_value_set(v);
    }
    
    void param_27_value_set(number v) {
        v = this->param_27_value_constrain(v);
        this->param_27_value = v;
        this->sendParameter(1, false);
    
        if (this->param_27_value != this->param_27_lastValue) {
            this->getEngine()->presetTouched();
            this->param_27_lastValue = this->param_27_value;
        }
    
        this->ip_11_value_set(v);
    }
    
    void param_28_value_set(number v) {
        v = this->param_28_value_constrain(v);
        this->param_28_value = v;
        this->sendParameter(2, false);
    
        if (this->param_28_value != this->param_28_lastValue) {
            this->getEngine()->presetTouched();
            this->param_28_lastValue = this->param_28_value;
        }
    
        this->cycle_tilde_16_frequency_set(v);
    }
    
    void eventinlet_12_out1_bang_bang() {}
    
    void eventinlet_12_out1_number_set(number v) {
        this->dspexpr_38_in2_set(v);
    }
    
    void numberobj_35_valin_set(number v) {
        this->numberobj_35_value_set(v);
    }
    
    void numberobj_35_format_set(number v) {
        this->numberobj_35_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void snapshot_07_out_set(number v) {
        this->snapshot_07_out = v;
    
        {
            list converted = {v};
            this->scale_14_input_set(converted);
        }
    }
    
    void loadbang_04_startupbang_bang() {
        this->loadbang_04_output_bang();
    }
    
    void numberobj_36_valin_set(number v) {
        this->numberobj_36_value_set(v);
    }
    
    void numberobj_36_format_set(number v) {
        this->numberobj_36_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void button_04_bangin_bang() {
        this->button_04_bangval_bang();
    }
    
    void numberobj_37_valin_set(number v) {
        this->numberobj_37_value_set(v);
    }
    
    void numberobj_37_format_set(number v) {
        this->numberobj_37_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void snapshot_08_out_set(number v) {
        this->snapshot_08_out = v;
    
        {
            list converted = {v};
            this->scale_15_input_set(converted);
        }
    }
    
    void numberobj_38_valin_set(number v) {
        this->numberobj_38_value_set(v);
    }
    
    void numberobj_38_format_set(number v) {
        this->numberobj_38_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 0;
    }
    
    Index getNumOutputChannels() const {
        return 1;
    }
    
    void initializeObjects() {
        this->mtof_tilde_04_innerScala_init();
        this->mtof_tilde_04_init();
        this->ip_10_init();
        this->ip_11_init();
        this->ip_12_init();
        this->numberobj_35_init();
        this->numberobj_36_init();
        this->random_07_nz_init();
        this->numberobj_37_init();
        this->numberobj_38_init();
        this->random_08_nz_init();
        this->p_10->initializeObjects();
        this->p_11->initializeObjects();
    }
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {
        this->updateTime(this->getEngine()->getCurrentTime());
        this->p_10->startup();
        this->p_11->startup();
        this->getEngine()->scheduleClockEvent(this, -871642103, 0 + this->_currentTime);;
    
        {
            this->scheduleParamInit(0, 0);
        }
    
        {
            this->scheduleParamInit(1, 0);
        }
    
        {
            this->scheduleParamInit(2, 0);
        }
    }
    
    void allocateDataRefs() {
        this->p_10->allocateDataRefs();
        this->p_11->allocateDataRefs();
        this->mtof_tilde_04_innerMtoF_buffer->requestSize(65536, 1);
        this->mtof_tilde_04_innerMtoF_buffer->setSampleRate(this->sr);
        this->cycle_tilde_16_buffer->requestSize(16384, 1);
        this->cycle_tilde_16_buffer->setSampleRate(this->sr);
        this->cycle_tilde_17_buffer->requestSize(16384, 1);
        this->cycle_tilde_17_buffer->setSampleRate(this->sr);
        this->mtof_tilde_04_innerMtoF_buffer = this->mtof_tilde_04_innerMtoF_buffer->allocateIfNeeded();
        this->cycle_tilde_16_buffer = this->cycle_tilde_16_buffer->allocateIfNeeded();
        this->cycle_tilde_17_buffer = this->cycle_tilde_17_buffer->allocateIfNeeded();
    }
    
    void cycle_tilde_17_frequency_set(number v) {
        this->cycle_tilde_17_frequency = v;
    }
    
    void numberobj_38_output_set(number v) {
        this->cycle_tilde_17_frequency_set(v);
    }
    
    void numberobj_38_value_set(number v) {
        this->numberobj_38_value_setter(v);
        v = this->numberobj_38_value;
        number localvalue = v;
    
        if (this->numberobj_38_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("note[3]/number_obj-3"), localvalue, this->_currentTime);
        this->numberobj_38_output_set(localvalue);
    }
    
    void expr_24_out1_set(number v) {
        this->expr_24_out1 = v;
        this->numberobj_38_value_set(this->expr_24_out1);
    }
    
    void expr_24_in1_set(number in1) {
        this->expr_24_in1 = in1;
    
        this->expr_24_out1_set(
            (this->expr_24_in2 == 0 ? 0 : (this->expr_24_in2 == 0. ? 0. : this->expr_24_in1 / this->expr_24_in2))
        );//#map:note[3]//_obj-4:1
    }
    
    void random_08_result_set(number v) {
        this->expr_24_in1_set(v);
    }
    
    void random_08_trigger_bang() {
        this->random_08_result_set(rnbo_abs(this->random_08_nz_next()) * this->random_08_limit);
    }
    
    void cycle_tilde_16_frequency_set(number v) {
        this->cycle_tilde_16_frequency = v;
    }
    
    void numberobj_36_output_set(number v) {
        this->cycle_tilde_16_frequency_set(v);
    }
    
    void numberobj_36_value_set(number v) {
        this->numberobj_36_value_setter(v);
        v = this->numberobj_36_value;
        number localvalue = v;
    
        if (this->numberobj_36_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("note[3]/number_obj-12"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_36_output_set(localvalue);
    }
    
    void expr_22_out1_set(number v) {
        this->expr_22_out1 = v;
        this->numberobj_36_value_set(this->expr_22_out1);
    }
    
    void expr_22_in1_set(number in1) {
        this->expr_22_in1 = in1;
    
        this->expr_22_out1_set(
            (this->expr_22_in2 == 0 ? 0 : (this->expr_22_in2 == 0. ? 0. : this->expr_22_in1 / this->expr_22_in2))
        );//#map:note[3]//_obj-7:1
    }
    
    void random_07_result_set(number v) {
        this->expr_22_in1_set(v);
    }
    
    void random_07_trigger_bang() {
        this->random_07_result_set(rnbo_abs(this->random_07_nz_next()) * this->random_07_limit);
    }
    
    void button_04_output_bang() {
        this->random_08_trigger_bang();
        this->random_07_trigger_bang();
    }
    
    void button_04_bangval_bang() {
        this->getEngine()->sendBangMessage(TAG("bangout"), TAG("note[3]/button_obj-9"), this->_currentTime);;
        this->button_04_output_bang();
    }
    
    void receive_12_output_bang_bang() {
        this->button_04_bangval_bang();
    }
    
    void ip_12_value_set(number v) {
        this->ip_12_value = v;
        this->ip_12_fillSigBuf();
        this->ip_12_lastValue = v;
    }
    
    void expr_20_out1_set(number v) {
        this->expr_20_out1 = v;
        this->ip_12_value_set(this->expr_20_out1);
    }
    
    void expr_20_in1_set(number in1) {
        this->expr_20_in1 = in1;
    
        this->expr_20_out1_set(
            (this->expr_20_in2 == 0 ? 0 : (this->expr_20_in2 == 0. ? 0. : this->expr_20_in1 / this->expr_20_in2))
        );//#map:note[3]//_obj-28:1
    }
    
    void expr_20_in2_set(number v) {
        this->expr_20_in2 = v;
    }
    
    void receive_11_output_list_set(const list& v) {
        this->receive_11_output_list = jsCreateListCopy(v);
    
        {
            if (v->length > 1)
                this->expr_20_in2_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->expr_20_in1_set(converted);
        }
    }
    
    void mtof_tilde_04_midivalue_set(number v) {
        this->mtof_tilde_04_midivalue = v;
    }
    
    void receive_10_output_number_set(number v) {
        this->receive_10_output_number = v;
        this->mtof_tilde_04_midivalue_set(v);
    }
    
    void dspexpr_38_in2_set(number v) {
        this->dspexpr_38_in2 = v;
    }
    
    void eventinlet_12_out1_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->dspexpr_38_in2_set(converted);
        }
    }
    
    number param_26_value_constrain(number v) const {
        v = (v > 100 ? 100 : (v < 1 ? 1 : v));
        return v;
    }
    
    void ip_10_value_set(number v) {
        this->ip_10_value = v;
        this->ip_10_fillSigBuf();
        this->ip_10_lastValue = v;
    }
    
    number param_27_value_constrain(number v) const {
        v = (v > 20 ? 20 : (v < 1 ? 1 : v));
        return v;
    }
    
    void ip_11_value_set(number v) {
        this->ip_11_value = v;
        this->ip_11_fillSigBuf();
        this->ip_11_lastValue = v;
    }
    
    number param_28_value_constrain(number v) const {
        v = (v > 100 ? 100 : (v < 1 ? 1 : v));
        return v;
    }
    
    void dspexpr_37_in2_set(number v) {
        this->dspexpr_37_in2 = v;
    }
    
    void numberobj_35_output_set(number v) {
        this->dspexpr_37_in2_set(v);
    }
    
    void numberobj_35_value_set(number v) {
        this->numberobj_35_value_setter(v);
        v = this->numberobj_35_value;
        number localvalue = v;
    
        if (this->numberobj_35_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("note[3]/number_obj-76"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_35_output_set(localvalue);
    }
    
    void expr_21_out1_set(number v) {
        this->expr_21_out1 = v;
        this->numberobj_35_value_set(this->expr_21_out1);
    }
    
    void expr_21_in1_set(number in1) {
        this->expr_21_in1 = in1;
    
        this->expr_21_out1_set(
            (this->expr_21_in2 == 0 ? 0 : (this->expr_21_in2 == 0. ? 0. : this->expr_21_in1 / this->expr_21_in2))
        );//#map:note[3]//_obj-73:1
    }
    
    void expr_21_in2_set(number v) {
        this->expr_21_in2 = v;
    }
    
    void scale_14_out_set(const list& v) {
        this->scale_14_out = jsCreateListCopy(v);
    
        {
            if (v->length > 1)
                this->expr_21_in2_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->expr_21_in1_set(converted);
        }
    }
    
    void scale_14_input_set(const list& v) {
        this->scale_14_input = jsCreateListCopy(v);
        list tmp = {};
    
        for (Index i = 0; i < v->length; i++) {
            tmp->push(this->scale(
                v[(Index)i],
                this->scale_14_inlow,
                this->scale_14_inhigh,
                this->scale_14_outlow,
                this->scale_14_outhigh,
                this->scale_14_power
            ));
        }
    
        this->scale_14_out_set(tmp);
    }
    
    void loadbang_04_output_bang() {
        this->button_04_bangval_bang();
    }
    
    void numberobj_37_output_set(number v) {
        this->param_27_value_set(v);
    }
    
    void numberobj_37_value_set(number v) {
        this->numberobj_37_value_setter(v);
        v = this->numberobj_37_value;
        number localvalue = v;
    
        if (this->numberobj_37_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("note[3]/number_obj-20"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_37_output_set(localvalue);
    }
    
    void expr_23_out1_set(number v) {
        this->expr_23_out1 = v;
        this->numberobj_37_value_set(this->expr_23_out1);
    }
    
    void expr_23_in1_set(number in1) {
        this->expr_23_in1 = in1;
    
        this->expr_23_out1_set(
            (this->expr_23_in2 == 0 ? 0 : (this->expr_23_in2 == 0. ? 0. : this->expr_23_in1 / this->expr_23_in2))
        );//#map:note[3]//_obj-13:1
    }
    
    void expr_23_in2_set(number v) {
        this->expr_23_in2 = v;
    }
    
    void scale_15_out_set(const list& v) {
        this->scale_15_out = jsCreateListCopy(v);
    
        {
            if (v->length > 1)
                this->expr_23_in2_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->expr_23_in1_set(converted);
        }
    }
    
    void scale_15_input_set(const list& v) {
        this->scale_15_input = jsCreateListCopy(v);
        list tmp = {};
    
        for (Index i = 0; i < v->length; i++) {
            tmp->push(this->scale(
                v[(Index)i],
                this->scale_15_inlow,
                this->scale_15_inhigh,
                this->scale_15_outlow,
                this->scale_15_outhigh,
                this->scale_15_power
            ));
        }
    
        this->scale_15_out_set(tmp);
    }
    
    void mtof_tilde_04_perform(number midivalue, SampleValue * out, Index n) {
        auto __mtof_tilde_04_base = this->mtof_tilde_04_base;
    
        for (Index i = 0; i < n; i++) {
            out[(Index)i] = this->mtof_tilde_04_innerMtoF_next(midivalue, __mtof_tilde_04_base);
        }
    }
    
    void dspexpr_38_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2;//#map:_###_obj_###_:1
        }
    }
    
    void ip_10_perform(SampleValue * out, Index n) {
        auto __ip_10_lastValue = this->ip_10_lastValue;
        auto __ip_10_lastIndex = this->ip_10_lastIndex;
    
        for (Index i = 0; i < n; i++) {
            out[(Index)i] = ((SampleIndex)(i) >= __ip_10_lastIndex ? __ip_10_lastValue : this->ip_10_sigbuf[(Index)i]);
        }
    
        __ip_10_lastIndex = 0;
        this->ip_10_lastIndex = __ip_10_lastIndex;
    }
    
    void ip_11_perform(SampleValue * out, Index n) {
        auto __ip_11_lastValue = this->ip_11_lastValue;
        auto __ip_11_lastIndex = this->ip_11_lastIndex;
    
        for (Index i = 0; i < n; i++) {
            out[(Index)i] = ((SampleIndex)(i) >= __ip_11_lastIndex ? __ip_11_lastValue : this->ip_11_sigbuf[(Index)i]);
        }
    
        __ip_11_lastIndex = 0;
        this->ip_11_lastIndex = __ip_11_lastIndex;
    }
    
    void p_10_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        const SampleValue * in3,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        ConstSampleArray<3> ins = {in1, in2, in3};
        SampleArray<2> outs = {out1, out2};
        this->p_10->process(ins, 3, outs, 2, n);
    }
    
    void ip_12_perform(SampleValue * out, Index n) {
        auto __ip_12_lastValue = this->ip_12_lastValue;
        auto __ip_12_lastIndex = this->ip_12_lastIndex;
    
        for (Index i = 0; i < n; i++) {
            out[(Index)i] = ((SampleIndex)(i) >= __ip_12_lastIndex ? __ip_12_lastValue : this->ip_12_sigbuf[(Index)i]);
        }
    
        __ip_12_lastIndex = 0;
        this->ip_12_lastIndex = __ip_12_lastIndex;
    }
    
    void p_11_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        // subpatcher: env.adsr
        ConstSampleArray<2> ins = {in1, in2};
    
        SampleArray<2> outs = {out1, out2};
        this->p_11->process(ins, 2, outs, 2, n);
    }
    
    void dspexpr_37_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2;//#map:_###_obj_###_:1
        }
    }
    
    void cycle_tilde_16_perform(
        number frequency,
        number phase_offset,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        RNBO_UNUSED(phase_offset);
        auto __cycle_tilde_16_f2i = this->cycle_tilde_16_f2i;
        auto __cycle_tilde_16_buffer = this->cycle_tilde_16_buffer;
        auto __cycle_tilde_16_phasei = this->cycle_tilde_16_phasei;
        Index i;
    
        for (i = 0; i < n; i++) {
            {
                uint32_t uint_phase;
    
                {
                    {
                        uint_phase = __cycle_tilde_16_phasei;
                    }
                }
    
                uint32_t idx = (uint32_t)(uint32_rshift(uint_phase, 18));
                number frac = ((BinOpInt)((BinOpInt)uint_phase & (BinOpInt)262143)) * 3.81471181759574e-6;
                number y0 = __cycle_tilde_16_buffer[(Index)idx];
                number y1 = __cycle_tilde_16_buffer[(Index)((BinOpInt)(idx + 1) & (BinOpInt)16383)];
                number y = y0 + frac * (y1 - y0);
    
                {
                    uint32_t pincr = (uint32_t)(uint32_trunc(frequency * __cycle_tilde_16_f2i));
                    __cycle_tilde_16_phasei = uint32_add(__cycle_tilde_16_phasei, pincr);
                }
    
                out1[(Index)i] = y;
                out2[(Index)i] = uint_phase * 0.232830643653869629e-9;
                continue;
            }
        }
    
        this->cycle_tilde_16_phasei = __cycle_tilde_16_phasei;
    }
    
    void snapshot_07_perform(const SampleValue * input_signal, Index n) {
        auto __snapshot_07_lastValue = this->snapshot_07_lastValue;
        auto __snapshot_07_calc = this->snapshot_07_calc;
        auto __snapshot_07_count = this->snapshot_07_count;
        auto __snapshot_07_nextTime = this->snapshot_07_nextTime;
        auto __snapshot_07_interval = this->snapshot_07_interval;
        number timeInSamples = this->msToSamps(__snapshot_07_interval, this->sr);
    
        if (__snapshot_07_interval > 0) {
            for (Index i = 0; i < n; i++) {
                if (__snapshot_07_nextTime <= __snapshot_07_count + (SampleIndex)(i)) {
                    {
                        __snapshot_07_calc = input_signal[(Index)i];
                    }
    
                    this->getEngine()->scheduleClockEventWithValue(
                        this,
                        -1508480176,
                        this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                        __snapshot_07_calc
                    );;
    
                    __snapshot_07_calc = 0;
                    __snapshot_07_nextTime += timeInSamples;
                }
            }
    
            __snapshot_07_count += this->vs;
        }
    
        __snapshot_07_lastValue = input_signal[(Index)(n - 1)];
        this->snapshot_07_nextTime = __snapshot_07_nextTime;
        this->snapshot_07_count = __snapshot_07_count;
        this->snapshot_07_calc = __snapshot_07_calc;
        this->snapshot_07_lastValue = __snapshot_07_lastValue;
    }
    
    void cycle_tilde_17_perform(
        number frequency,
        number phase_offset,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        RNBO_UNUSED(phase_offset);
        auto __cycle_tilde_17_f2i = this->cycle_tilde_17_f2i;
        auto __cycle_tilde_17_buffer = this->cycle_tilde_17_buffer;
        auto __cycle_tilde_17_phasei = this->cycle_tilde_17_phasei;
        Index i;
    
        for (i = 0; i < n; i++) {
            {
                uint32_t uint_phase;
    
                {
                    {
                        uint_phase = __cycle_tilde_17_phasei;
                    }
                }
    
                uint32_t idx = (uint32_t)(uint32_rshift(uint_phase, 18));
                number frac = ((BinOpInt)((BinOpInt)uint_phase & (BinOpInt)262143)) * 3.81471181759574e-6;
                number y0 = __cycle_tilde_17_buffer[(Index)idx];
                number y1 = __cycle_tilde_17_buffer[(Index)((BinOpInt)(idx + 1) & (BinOpInt)16383)];
                number y = y0 + frac * (y1 - y0);
    
                {
                    uint32_t pincr = (uint32_t)(uint32_trunc(frequency * __cycle_tilde_17_f2i));
                    __cycle_tilde_17_phasei = uint32_add(__cycle_tilde_17_phasei, pincr);
                }
    
                out1[(Index)i] = y;
                out2[(Index)i] = uint_phase * 0.232830643653869629e-9;
                continue;
            }
        }
    
        this->cycle_tilde_17_phasei = __cycle_tilde_17_phasei;
    }
    
    void snapshot_08_perform(const SampleValue * input_signal, Index n) {
        auto __snapshot_08_lastValue = this->snapshot_08_lastValue;
        auto __snapshot_08_calc = this->snapshot_08_calc;
        auto __snapshot_08_count = this->snapshot_08_count;
        auto __snapshot_08_nextTime = this->snapshot_08_nextTime;
        auto __snapshot_08_interval = this->snapshot_08_interval;
        number timeInSamples = this->msToSamps(__snapshot_08_interval, this->sr);
    
        if (__snapshot_08_interval > 0) {
            for (Index i = 0; i < n; i++) {
                if (__snapshot_08_nextTime <= __snapshot_08_count + (SampleIndex)(i)) {
                    {
                        __snapshot_08_calc = input_signal[(Index)i];
                    }
    
                    this->getEngine()->scheduleClockEventWithValue(
                        this,
                        1646922831,
                        this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                        __snapshot_08_calc
                    );;
    
                    __snapshot_08_calc = 0;
                    __snapshot_08_nextTime += timeInSamples;
                }
            }
    
            __snapshot_08_count += this->vs;
        }
    
        __snapshot_08_lastValue = input_signal[(Index)(n - 1)];
        this->snapshot_08_nextTime = __snapshot_08_nextTime;
        this->snapshot_08_count = __snapshot_08_count;
        this->snapshot_08_calc = __snapshot_08_calc;
        this->snapshot_08_lastValue = __snapshot_08_lastValue;
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    void numberobj_35_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_35_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_35_value = localvalue;
    }
    
    void numberobj_36_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_36_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_36_value = localvalue;
    }
    
    void random_07_limit_setter(number v) {
        if (v >= 0)
            this->random_07_limit = v;
    }
    
    void numberobj_37_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_37_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_37_value = localvalue;
    }
    
    void numberobj_38_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_38_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_38_value = localvalue;
    }
    
    void random_08_limit_setter(number v) {
        if (v >= 0)
            this->random_08_limit = v;
    }
    
    number mtof_tilde_04_innerMtoF_next(number midivalue, number tuning) {
        if (midivalue == this->mtof_tilde_04_innerMtoF_lastInValue && tuning == this->mtof_tilde_04_innerMtoF_lastTuning)
            return this->mtof_tilde_04_innerMtoF_lastOutValue;
    
        this->mtof_tilde_04_innerMtoF_lastInValue = midivalue;
        this->mtof_tilde_04_innerMtoF_lastTuning = tuning;
        number result = 0;
    
        {
            result = rnbo_exp(.057762265 * (midivalue - 69.0));
        }
    
        this->mtof_tilde_04_innerMtoF_lastOutValue = tuning * result;
        return this->mtof_tilde_04_innerMtoF_lastOutValue;
    }
    
    void mtof_tilde_04_innerMtoF_reset() {
        this->mtof_tilde_04_innerMtoF_lastInValue = 0;
        this->mtof_tilde_04_innerMtoF_lastOutValue = 0;
        this->mtof_tilde_04_innerMtoF_lastTuning = 0;
    }
    
    void mtof_tilde_04_innerScala_mid(int v) {
        this->mtof_tilde_04_innerScala_kbmMid = v;
        this->mtof_tilde_04_innerScala_updateRefFreq();
    }
    
    void mtof_tilde_04_innerScala_ref(int v) {
        this->mtof_tilde_04_innerScala_kbmRefNum = v;
        this->mtof_tilde_04_innerScala_updateRefFreq();
    }
    
    void mtof_tilde_04_innerScala_base(number v) {
        this->mtof_tilde_04_innerScala_kbmRefFreq = v;
        this->mtof_tilde_04_innerScala_updateRefFreq();
    }
    
    void mtof_tilde_04_innerScala_init() {
        list sclValid = {
            12,
            100,
            0,
            200,
            0,
            300,
            0,
            400,
            0,
            500,
            0,
            600,
            0,
            700,
            0,
            800,
            0,
            900,
            0,
            1000,
            0,
            1100,
            0,
            2,
            1
        };
    
        this->mtof_tilde_04_innerScala_updateScale(sclValid);
    }
    
    void mtof_tilde_04_innerScala_update(list scale, list map) {
        if (scale->length > 0) {
            this->mtof_tilde_04_innerScala_updateScale(scale);
        }
    
        if (map->length > 0) {
            this->mtof_tilde_04_innerScala_updateMap(map);
        }
    }
    
    number mtof_tilde_04_innerScala_mtof(number note) {
        if ((bool)(this->mtof_tilde_04_innerScala_lastValid) && this->mtof_tilde_04_innerScala_lastNote == note) {
            return this->mtof_tilde_04_innerScala_lastFreq;
        }
    
        array<int, 2> degoct = this->mtof_tilde_04_innerScala_applyKBM(note);
        number out = 0;
    
        if (degoct[1] > 0) {
            out = this->mtof_tilde_04_innerScala_applySCL(degoct[0], fract(note), this->mtof_tilde_04_innerScala_refFreq);
        }
    
        this->mtof_tilde_04_innerScala_updateLast(note, out);
        return out;
    }
    
    number mtof_tilde_04_innerScala_ftom(number hz) {
        if (hz <= 0.0) {
            return 0.0;
        }
    
        if ((bool)(this->mtof_tilde_04_innerScala_lastValid) && this->mtof_tilde_04_innerScala_lastFreq == hz) {
            return this->mtof_tilde_04_innerScala_lastNote;
        }
    
        array<number, 2> df = this->mtof_tilde_04_innerScala_hztodeg(hz);
        int degree = (int)(df[0]);
        number frac = df[1];
        number out = 0;
    
        if (this->mtof_tilde_04_innerScala_kbmSize == 0) {
            out = this->mtof_tilde_04_innerScala_kbmMid + degree;
        } else {
            array<int, 2> octdeg = this->mtof_tilde_04_innerScala_octdegree(degree, this->mtof_tilde_04_innerScala_kbmOctaveDegree);
            number oct = (number)(octdeg[0]);
            int index = (int)(octdeg[1]);
            Index entry = 0;
    
            for (Index i = 0; i < this->mtof_tilde_04_innerScala_kbmMapSize; i++) {
                if (index == this->mtof_tilde_04_innerScala_kbmValid[(Index)(i + this->mtof_tilde_04_innerScala_KBM_MAP_OFFSET)]) {
                    entry = i;
                    break;
                }
            }
    
            out = oct * this->mtof_tilde_04_innerScala_kbmSize + entry + this->mtof_tilde_04_innerScala_kbmMid;
        }
    
        out = out + frac;
        this->mtof_tilde_04_innerScala_updateLast(out, hz);
        return this->mtof_tilde_04_innerScala_lastNote;
    }
    
    int mtof_tilde_04_innerScala_updateScale(list scl) {
        if (scl->length < 1) {
            return 0;
        }
    
        number sclDataEntries = scl[0] * 2 + 1;
    
        if (sclDataEntries <= scl->length) {
            this->mtof_tilde_04_innerScala_lastValid = false;
            this->mtof_tilde_04_innerScala_sclExpMul = {};
            number last = 1;
    
            for (Index i = 1; i < sclDataEntries; i += 2) {
                const number c = (const number)(scl[(Index)(i + 0)]);
                const number d = (const number)(scl[(Index)(i + 1)]);
    
                if (d <= 0) {
                    last = c / (number)1200;
                } else {
                    last = rnbo_log2(c / d);
                }
    
                this->mtof_tilde_04_innerScala_sclExpMul->push(last);
            }
    
            this->mtof_tilde_04_innerScala_sclOctaveMul = last;
            this->mtof_tilde_04_innerScala_sclEntryCount = (int)(this->mtof_tilde_04_innerScala_sclExpMul->length);
    
            if (scl->length >= sclDataEntries + 3) {
                this->mtof_tilde_04_innerScala_kbmMid = (int)(scl[(Index)(sclDataEntries + 2)]);
                this->mtof_tilde_04_innerScala_kbmRefNum = (int)(scl[(Index)(sclDataEntries + 1)]);
                this->mtof_tilde_04_innerScala_kbmRefFreq = scl[(Index)(sclDataEntries + 0)];
                this->mtof_tilde_04_innerScala_kbmSize = (int)(0);
            }
    
            this->mtof_tilde_04_innerScala_updateRefFreq();
            return 1;
        }
    
        return 0;
    }
    
    int mtof_tilde_04_innerScala_updateMap(list kbm) {
        if (kbm->length == 1 && kbm[0] == 0.0) {
            kbm = {0.0, 0.0, 0.0, 60.0, 69.0, 440.0};
        }
    
        if (kbm->length >= 6 && kbm[0] >= 0.0) {
            this->mtof_tilde_04_innerScala_lastValid = false;
            Index size = (Index)(kbm[0]);
            int octave = 12;
    
            if (kbm->length > 6) {
                octave = (int)(kbm[6]);
            }
    
            if (size > 0 && kbm->length < this->mtof_tilde_04_innerScala_KBM_MAP_OFFSET) {
                return 0;
            }
    
            this->mtof_tilde_04_innerScala_kbmSize = (int)(size);
            this->mtof_tilde_04_innerScala_kbmMin = (int)(kbm[1]);
            this->mtof_tilde_04_innerScala_kbmMax = (int)(kbm[2]);
            this->mtof_tilde_04_innerScala_kbmMid = (int)(kbm[3]);
            this->mtof_tilde_04_innerScala_kbmRefNum = (int)(kbm[4]);
            this->mtof_tilde_04_innerScala_kbmRefFreq = kbm[5];
            this->mtof_tilde_04_innerScala_kbmOctaveDegree = octave;
            this->mtof_tilde_04_innerScala_kbmValid = kbm;
            this->mtof_tilde_04_innerScala_kbmMapSize = (kbm->length - this->mtof_tilde_04_innerScala_KBM_MAP_OFFSET > kbm->length ? kbm->length : (kbm->length - this->mtof_tilde_04_innerScala_KBM_MAP_OFFSET < 0 ? 0 : kbm->length - this->mtof_tilde_04_innerScala_KBM_MAP_OFFSET));
            this->mtof_tilde_04_innerScala_updateRefFreq();
            return 1;
        }
    
        return 0;
    }
    
    void mtof_tilde_04_innerScala_updateLast(number note, number freq) {
        this->mtof_tilde_04_innerScala_lastValid = true;
        this->mtof_tilde_04_innerScala_lastNote = note;
        this->mtof_tilde_04_innerScala_lastFreq = freq;
    }
    
    array<number, 2> mtof_tilde_04_innerScala_hztodeg(number hz) {
        number hza = rnbo_abs(hz);
    
        number octave = rnbo_floor(
            rnbo_log2(hza / this->mtof_tilde_04_innerScala_refFreq) / this->mtof_tilde_04_innerScala_sclOctaveMul
        );
    
        int i = 0;
        number frac = 0;
        number n = 0;
    
        for (; i < this->mtof_tilde_04_innerScala_sclEntryCount; i++) {
            number c = this->mtof_tilde_04_innerScala_applySCLOctIndex(octave, i + 0, 0.0, this->mtof_tilde_04_innerScala_refFreq);
            n = this->mtof_tilde_04_innerScala_applySCLOctIndex(octave, i + 1, 0.0, this->mtof_tilde_04_innerScala_refFreq);
    
            if (c <= hza && hza < n) {
                if (c != hza) {
                    frac = rnbo_log2(hza / c) / rnbo_log2(n / c);
                }
    
                break;
            }
        }
    
        if (i == this->mtof_tilde_04_innerScala_sclEntryCount && n != hza) {
            number c = n;
            n = this->mtof_tilde_04_innerScala_applySCLOctIndex(octave + 1, 0, 0.0, this->mtof_tilde_04_innerScala_refFreq);
            frac = rnbo_log2(hza / c) / rnbo_log2(n / c);
        }
    
        number deg = i + octave * this->mtof_tilde_04_innerScala_sclEntryCount;
    
        {
            deg = rnbo_fround((deg + frac) * 1 / (number)1) * 1;
            frac = 0.0;
        }
    
        return {deg, frac};
    }
    
    array<int, 2> mtof_tilde_04_innerScala_octdegree(int degree, int count) {
        int octave = 0;
        int index = 0;
    
        if (degree < 0) {
            octave = -(1 + (-1 - degree) / count);
            index = -degree % count;
    
            if (index > 0) {
                index = count - index;
            }
        } else {
            octave = degree / count;
            index = degree % count;
        }
    
        return {octave, index};
    }
    
    array<int, 2> mtof_tilde_04_innerScala_applyKBM(number note) {
        if ((this->mtof_tilde_04_innerScala_kbmMin == this->mtof_tilde_04_innerScala_kbmMax && this->mtof_tilde_04_innerScala_kbmMax == 0) || (note >= this->mtof_tilde_04_innerScala_kbmMin && note <= this->mtof_tilde_04_innerScala_kbmMax)) {
            int degree = (int)(rnbo_floor(note - this->mtof_tilde_04_innerScala_kbmMid));
    
            if (this->mtof_tilde_04_innerScala_kbmSize == 0) {
                return {degree, 1};
            }
    
            array<int, 2> octdeg = this->mtof_tilde_04_innerScala_octdegree(degree, this->mtof_tilde_04_innerScala_kbmSize);
            int octave = (int)(octdeg[0]);
            Index index = (Index)(octdeg[1]);
    
            if (this->mtof_tilde_04_innerScala_kbmMapSize > index) {
                degree = (int)(this->mtof_tilde_04_innerScala_kbmValid[(Index)(this->mtof_tilde_04_innerScala_KBM_MAP_OFFSET + index)]);
    
                if (degree >= 0) {
                    return {degree + octave * this->mtof_tilde_04_innerScala_kbmOctaveDegree, 1};
                }
            }
        }
    
        return {-1, 0};
    }
    
    number mtof_tilde_04_innerScala_applySCL(int degree, number frac, number refFreq) {
        array<int, 2> octdeg = this->mtof_tilde_04_innerScala_octdegree(degree, this->mtof_tilde_04_innerScala_sclEntryCount);
        return this->mtof_tilde_04_innerScala_applySCLOctIndex(octdeg[0], octdeg[1], frac, refFreq);
    }
    
    number mtof_tilde_04_innerScala_applySCLOctIndex(number octave, int index, number frac, number refFreq) {
        number p = 0;
    
        if (index > 0) {
            p = this->mtof_tilde_04_innerScala_sclExpMul[(Index)(index - 1)];
        }
    
        if (frac > 0) {
            p = this->linearinterp(frac, p, this->mtof_tilde_04_innerScala_sclExpMul[(Index)index]);
        } else if (frac < 0) {
            p = this->linearinterp(-frac, this->mtof_tilde_04_innerScala_sclExpMul[(Index)index], p);
        }
    
        return refFreq * rnbo_pow(2, p + octave * this->mtof_tilde_04_innerScala_sclOctaveMul);
    }
    
    void mtof_tilde_04_innerScala_updateRefFreq() {
        this->mtof_tilde_04_innerScala_lastValid = false;
        int refOffset = (int)(this->mtof_tilde_04_innerScala_kbmRefNum - this->mtof_tilde_04_innerScala_kbmMid);
    
        if (refOffset == 0) {
            this->mtof_tilde_04_innerScala_refFreq = this->mtof_tilde_04_innerScala_kbmRefFreq;
        } else {
            int base = (int)(this->mtof_tilde_04_innerScala_kbmSize);
    
            if (base < 1) {
                base = this->mtof_tilde_04_innerScala_sclEntryCount;
            }
    
            array<int, 2> octdeg = this->mtof_tilde_04_innerScala_octdegree(refOffset, base);
            number oct = (number)(octdeg[0]);
            int index = (int)(octdeg[1]);
    
            if (base > 0) {
                oct = oct + rnbo_floor(index / base);
                index = index % base;
            }
    
            if (index >= 0 && index < this->mtof_tilde_04_innerScala_kbmSize) {
                if (index < this->mtof_tilde_04_innerScala_kbmMapSize) {
                    index = (int)(this->mtof_tilde_04_innerScala_kbmValid[(Index)((Index)(index) + this->mtof_tilde_04_innerScala_KBM_MAP_OFFSET)]);
                } else {
                    index = -1;
                }
            }
    
            if (index < 0 || index > this->mtof_tilde_04_innerScala_sclExpMul->length)
                {} else {
                number p = 0;
    
                if (index > 0) {
                    p = this->mtof_tilde_04_innerScala_sclExpMul[(Index)(index - 1)];
                }
    
                this->mtof_tilde_04_innerScala_refFreq = this->mtof_tilde_04_innerScala_kbmRefFreq / rnbo_pow(2, p + oct * this->mtof_tilde_04_innerScala_sclOctaveMul);
            }
        }
    }
    
    void mtof_tilde_04_innerScala_reset() {
        this->mtof_tilde_04_innerScala_lastValid = false;
        this->mtof_tilde_04_innerScala_lastNote = 0;
        this->mtof_tilde_04_innerScala_lastFreq = 0;
        this->mtof_tilde_04_innerScala_sclEntryCount = 0;
        this->mtof_tilde_04_innerScala_sclOctaveMul = 1;
        this->mtof_tilde_04_innerScala_sclExpMul = {};
        this->mtof_tilde_04_innerScala_kbmValid = {0, 0, 0, 60, 69, 440};
        this->mtof_tilde_04_innerScala_kbmMid = 60;
        this->mtof_tilde_04_innerScala_kbmRefNum = 69;
        this->mtof_tilde_04_innerScala_kbmRefFreq = 440;
        this->mtof_tilde_04_innerScala_kbmSize = 0;
        this->mtof_tilde_04_innerScala_kbmMin = 0;
        this->mtof_tilde_04_innerScala_kbmMax = 0;
        this->mtof_tilde_04_innerScala_kbmOctaveDegree = 12;
        this->mtof_tilde_04_innerScala_kbmMapSize = 0;
        this->mtof_tilde_04_innerScala_refFreq = 261.63;
    }
    
    void mtof_tilde_04_init() {
        this->mtof_tilde_04_innerScala_update(this->mtof_tilde_04_scale, this->mtof_tilde_04_map);
    }
    
    void param_26_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_26_value;
    }
    
    void param_26_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_26_value_set(preset["value"]);
    }
    
    void ip_10_init() {
        this->ip_10_lastValue = this->ip_10_value;
    }
    
    void ip_10_fillSigBuf() {
        if ((bool)(this->ip_10_sigbuf)) {
            SampleIndex k = (SampleIndex)(this->sampleOffsetIntoNextAudioBuffer);
    
            if (k >= (SampleIndex)(this->vs))
                k = (SampleIndex)(this->vs) - 1;
    
            for (SampleIndex i = (SampleIndex)(this->ip_10_lastIndex); i < k; i++) {
                if (this->ip_10_resetCount > 0) {
                    this->ip_10_sigbuf[(Index)i] = 1;
                    this->ip_10_resetCount--;
                } else {
                    this->ip_10_sigbuf[(Index)i] = this->ip_10_lastValue;
                }
            }
    
            this->ip_10_lastIndex = k;
        }
    }
    
    void ip_10_dspsetup(bool force) {
        if ((bool)(this->ip_10_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->ip_10_lastIndex = 0;
        this->ip_10_setupDone = true;
    }
    
    void param_27_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_27_value;
    }
    
    void param_27_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_27_value_set(preset["value"]);
    }
    
    void ip_11_init() {
        this->ip_11_lastValue = this->ip_11_value;
    }
    
    void ip_11_fillSigBuf() {
        if ((bool)(this->ip_11_sigbuf)) {
            SampleIndex k = (SampleIndex)(this->sampleOffsetIntoNextAudioBuffer);
    
            if (k >= (SampleIndex)(this->vs))
                k = (SampleIndex)(this->vs) - 1;
    
            for (SampleIndex i = (SampleIndex)(this->ip_11_lastIndex); i < k; i++) {
                if (this->ip_11_resetCount > 0) {
                    this->ip_11_sigbuf[(Index)i] = 1;
                    this->ip_11_resetCount--;
                } else {
                    this->ip_11_sigbuf[(Index)i] = this->ip_11_lastValue;
                }
            }
    
            this->ip_11_lastIndex = k;
        }
    }
    
    void ip_11_dspsetup(bool force) {
        if ((bool)(this->ip_11_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->ip_11_lastIndex = 0;
        this->ip_11_setupDone = true;
    }
    
    void ip_12_init() {
        this->ip_12_lastValue = this->ip_12_value;
    }
    
    void ip_12_fillSigBuf() {
        if ((bool)(this->ip_12_sigbuf)) {
            SampleIndex k = (SampleIndex)(this->sampleOffsetIntoNextAudioBuffer);
    
            if (k >= (SampleIndex)(this->vs))
                k = (SampleIndex)(this->vs) - 1;
    
            for (SampleIndex i = (SampleIndex)(this->ip_12_lastIndex); i < k; i++) {
                if (this->ip_12_resetCount > 0) {
                    this->ip_12_sigbuf[(Index)i] = 1;
                    this->ip_12_resetCount--;
                } else {
                    this->ip_12_sigbuf[(Index)i] = this->ip_12_lastValue;
                }
            }
    
            this->ip_12_lastIndex = k;
        }
    }
    
    void ip_12_dspsetup(bool force) {
        if ((bool)(this->ip_12_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->ip_12_lastIndex = 0;
        this->ip_12_setupDone = true;
    }
    
    void param_28_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_28_value;
    }
    
    void param_28_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_28_value_set(preset["value"]);
    }
    
    void numberobj_35_init() {
        this->numberobj_35_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("note[3]/number_obj-76"), 1, this->_currentTime);
    }
    
    void numberobj_35_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_35_value;
    }
    
    void numberobj_35_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_35_value_set(preset["value"]);
    }
    
    number cycle_tilde_16_ph_next(number freq, number reset) {
        {
            {
                if (reset >= 0.)
                    this->cycle_tilde_16_ph_currentPhase = reset;
            }
        }
    
        number pincr = freq * this->cycle_tilde_16_ph_conv;
    
        if (this->cycle_tilde_16_ph_currentPhase < 0.)
            this->cycle_tilde_16_ph_currentPhase = 1. + this->cycle_tilde_16_ph_currentPhase;
    
        if (this->cycle_tilde_16_ph_currentPhase > 1.)
            this->cycle_tilde_16_ph_currentPhase = this->cycle_tilde_16_ph_currentPhase - 1.;
    
        number tmp = this->cycle_tilde_16_ph_currentPhase;
        this->cycle_tilde_16_ph_currentPhase += pincr;
        return tmp;
    }
    
    void cycle_tilde_16_ph_reset() {
        this->cycle_tilde_16_ph_currentPhase = 0;
    }
    
    void cycle_tilde_16_ph_dspsetup() {
        this->cycle_tilde_16_ph_conv = (number)1 / this->sr;
    }
    
    void cycle_tilde_16_dspsetup(bool force) {
        if ((bool)(this->cycle_tilde_16_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->cycle_tilde_16_phasei = 0;
        this->cycle_tilde_16_f2i = (number)4294967296 / this->samplerate();
        this->cycle_tilde_16_wrap = (long)(this->cycle_tilde_16_buffer->getSize()) - 1;
        this->cycle_tilde_16_setupDone = true;
        this->cycle_tilde_16_ph_dspsetup();
    }
    
    void cycle_tilde_16_bufferUpdated() {
        this->cycle_tilde_16_wrap = (long)(this->cycle_tilde_16_buffer->getSize()) - 1;
    }
    
    void numberobj_36_init() {
        this->numberobj_36_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("note[3]/number_obj-12"), 1, this->_currentTime);
    }
    
    void numberobj_36_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_36_value;
    }
    
    void numberobj_36_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_36_value_set(preset["value"]);
    }
    
    void random_07_nz_reset() {
        xoshiro_reset(
            systemticks() + this->voice() + this->random(0, 10000),
            this->random_07_nz_state
        );
    }
    
    void random_07_nz_init() {
        this->random_07_nz_reset();
    }
    
    void random_07_nz_seed(number v) {
        xoshiro_reset(v, this->random_07_nz_state);
    }
    
    number random_07_nz_next() {
        return xoshiro_next(this->random_07_nz_state);
    }
    
    void numberobj_37_init() {
        this->numberobj_37_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("note[3]/number_obj-20"), 1, this->_currentTime);
    }
    
    void numberobj_37_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_37_value;
    }
    
    void numberobj_37_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_37_value_set(preset["value"]);
    }
    
    number cycle_tilde_17_ph_next(number freq, number reset) {
        {
            {
                if (reset >= 0.)
                    this->cycle_tilde_17_ph_currentPhase = reset;
            }
        }
    
        number pincr = freq * this->cycle_tilde_17_ph_conv;
    
        if (this->cycle_tilde_17_ph_currentPhase < 0.)
            this->cycle_tilde_17_ph_currentPhase = 1. + this->cycle_tilde_17_ph_currentPhase;
    
        if (this->cycle_tilde_17_ph_currentPhase > 1.)
            this->cycle_tilde_17_ph_currentPhase = this->cycle_tilde_17_ph_currentPhase - 1.;
    
        number tmp = this->cycle_tilde_17_ph_currentPhase;
        this->cycle_tilde_17_ph_currentPhase += pincr;
        return tmp;
    }
    
    void cycle_tilde_17_ph_reset() {
        this->cycle_tilde_17_ph_currentPhase = 0;
    }
    
    void cycle_tilde_17_ph_dspsetup() {
        this->cycle_tilde_17_ph_conv = (number)1 / this->sr;
    }
    
    void cycle_tilde_17_dspsetup(bool force) {
        if ((bool)(this->cycle_tilde_17_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->cycle_tilde_17_phasei = 0;
        this->cycle_tilde_17_f2i = (number)4294967296 / this->samplerate();
        this->cycle_tilde_17_wrap = (long)(this->cycle_tilde_17_buffer->getSize()) - 1;
        this->cycle_tilde_17_setupDone = true;
        this->cycle_tilde_17_ph_dspsetup();
    }
    
    void cycle_tilde_17_bufferUpdated() {
        this->cycle_tilde_17_wrap = (long)(this->cycle_tilde_17_buffer->getSize()) - 1;
    }
    
    void numberobj_38_init() {
        this->numberobj_38_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("note[3]/number_obj-3"), 1, this->_currentTime);
    }
    
    void numberobj_38_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_38_value;
    }
    
    void numberobj_38_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_38_value_set(preset["value"]);
    }
    
    void random_08_nz_reset() {
        xoshiro_reset(
            systemticks() + this->voice() + this->random(0, 10000),
            this->random_08_nz_state
        );
    }
    
    void random_08_nz_init() {
        this->random_08_nz_reset();
    }
    
    void random_08_nz_seed(number v) {
        xoshiro_reset(v, this->random_08_nz_state);
    }
    
    number random_08_nz_next() {
        return xoshiro_next(this->random_08_nz_state);
    }
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        mtof_tilde_04_midivalue = 0;
        mtof_tilde_04_base = 440;
        receive_10_output_number = 0;
        dspexpr_37_in1 = 0;
        dspexpr_37_in2 = 0;
        p_10_target = 0;
        dspexpr_38_in1 = 0;
        dspexpr_38_in2 = 1;
        p_11_target = 0;
        param_26_value = 1;
        ip_10_value = 0;
        ip_10_impulse = 0;
        param_27_value = 1;
        ip_11_value = 0;
        ip_11_impulse = 0;
        receive_11_output_number = 0;
        expr_20_in1 = 0;
        expr_20_in2 = 127;
        expr_20_out1 = 0;
        ip_12_value = 0;
        ip_12_impulse = 0;
        param_28_value = 1;
        numberobj_35_value = 0;
        numberobj_35_value_setter(numberobj_35_value);
        expr_21_in1 = 0;
        expr_21_in2 = 100;
        expr_21_out1 = 0;
        scale_14_inlow = -1;
        scale_14_inhigh = 1;
        scale_14_outlow = 1;
        scale_14_outhigh = 100;
        scale_14_power = 1;
        cycle_tilde_16_frequency = 0.001;
        cycle_tilde_16_phase_offset = 0;
        snapshot_07_interval = 20;
        snapshot_07_out = 0;
        numberobj_36_value = 0;
        numberobj_36_value_setter(numberobj_36_value);
        expr_22_in1 = 0;
        expr_22_in2 = 10000;
        expr_22_out1 = 0;
        random_07_limit = 100;
        random_07_limit_setter(random_07_limit);
        random_07_seed = 0;
        receive_12_output_number = 0;
        numberobj_37_value = 0;
        numberobj_37_value_setter(numberobj_37_value);
        expr_23_in1 = 0;
        expr_23_in2 = 100;
        expr_23_out1 = 0;
        scale_15_inlow = -1;
        scale_15_inhigh = 1;
        scale_15_outlow = 1;
        scale_15_outhigh = 500;
        scale_15_power = 1;
        snapshot_08_interval = 20;
        snapshot_08_out = 0;
        cycle_tilde_17_frequency = 0.001;
        cycle_tilde_17_phase_offset = 0;
        numberobj_38_value = 0;
        numberobj_38_value_setter(numberobj_38_value);
        expr_24_in1 = 0;
        expr_24_in2 = 10000;
        expr_24_out1 = 0;
        random_08_limit = 100;
        random_08_limit_setter(random_08_limit);
        random_08_seed = 0;
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        signals[0] = nullptr;
        signals[1] = nullptr;
        signals[2] = nullptr;
        signals[3] = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        mtof_tilde_04_innerMtoF_lastInValue = 0;
        mtof_tilde_04_innerMtoF_lastOutValue = 0;
        mtof_tilde_04_innerMtoF_lastTuning = 0;
        mtof_tilde_04_innerScala_lastValid = false;
        mtof_tilde_04_innerScala_lastNote = 0;
        mtof_tilde_04_innerScala_lastFreq = 0;
        mtof_tilde_04_innerScala_sclEntryCount = 0;
        mtof_tilde_04_innerScala_sclOctaveMul = 1;
        mtof_tilde_04_innerScala_kbmValid = { 0, 0, 0, 60, 69, 440 };
        mtof_tilde_04_innerScala_kbmMid = 60;
        mtof_tilde_04_innerScala_kbmRefNum = 69;
        mtof_tilde_04_innerScala_kbmRefFreq = 440;
        mtof_tilde_04_innerScala_kbmSize = 0;
        mtof_tilde_04_innerScala_kbmMin = 0;
        mtof_tilde_04_innerScala_kbmMax = 0;
        mtof_tilde_04_innerScala_kbmOctaveDegree = 12;
        mtof_tilde_04_innerScala_kbmMapSize = 0;
        mtof_tilde_04_innerScala_refFreq = 261.63;
        param_26_lastValue = 0;
        ip_10_lastIndex = 0;
        ip_10_lastValue = 0;
        ip_10_resetCount = 0;
        ip_10_sigbuf = nullptr;
        ip_10_setupDone = false;
        param_27_lastValue = 0;
        ip_11_lastIndex = 0;
        ip_11_lastValue = 0;
        ip_11_resetCount = 0;
        ip_11_sigbuf = nullptr;
        ip_11_setupDone = false;
        ip_12_lastIndex = 0;
        ip_12_lastValue = 0;
        ip_12_resetCount = 0;
        ip_12_sigbuf = nullptr;
        ip_12_setupDone = false;
        param_28_lastValue = 0;
        numberobj_35_currentFormat = 6;
        numberobj_35_lastValue = 0;
        cycle_tilde_16_wrap = 0;
        cycle_tilde_16_ph_currentPhase = 0;
        cycle_tilde_16_ph_conv = 0;
        cycle_tilde_16_setupDone = false;
        snapshot_07_calc = 0;
        snapshot_07_nextTime = 0;
        snapshot_07_count = 0;
        snapshot_07_lastValue = 0;
        numberobj_36_currentFormat = 6;
        numberobj_36_lastValue = 0;
        numberobj_37_currentFormat = 6;
        numberobj_37_lastValue = 0;
        snapshot_08_calc = 0;
        snapshot_08_nextTime = 0;
        snapshot_08_count = 0;
        snapshot_08_lastValue = 0;
        cycle_tilde_17_wrap = 0;
        cycle_tilde_17_ph_currentPhase = 0;
        cycle_tilde_17_ph_conv = 0;
        cycle_tilde_17_setupDone = false;
        numberobj_38_currentFormat = 6;
        numberobj_38_lastValue = 0;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 1;
        parameterOffset = 0;
    }
    
    // member variables
    
        number mtof_tilde_04_midivalue;
        list mtof_tilde_04_scale;
        list mtof_tilde_04_map;
        number mtof_tilde_04_base;
        number receive_10_output_number;
        list receive_10_output_list;
        number dspexpr_37_in1;
        number dspexpr_37_in2;
        number p_10_target;
        number dspexpr_38_in1;
        number dspexpr_38_in2;
        number p_11_target;
        number param_26_value;
        number ip_10_value;
        number ip_10_impulse;
        number param_27_value;
        number ip_11_value;
        number ip_11_impulse;
        number receive_11_output_number;
        list receive_11_output_list;
        number expr_20_in1;
        number expr_20_in2;
        number expr_20_out1;
        number ip_12_value;
        number ip_12_impulse;
        number param_28_value;
        number numberobj_35_value;
        number expr_21_in1;
        number expr_21_in2;
        number expr_21_out1;
        list scale_14_input;
        number scale_14_inlow;
        number scale_14_inhigh;
        number scale_14_outlow;
        number scale_14_outhigh;
        number scale_14_power;
        list scale_14_out;
        number cycle_tilde_16_frequency;
        number cycle_tilde_16_phase_offset;
        number snapshot_07_interval;
        number snapshot_07_out;
        number numberobj_36_value;
        number expr_22_in1;
        number expr_22_in2;
        number expr_22_out1;
        number random_07_limit;
        number random_07_seed;
        number receive_12_output_number;
        list receive_12_output_list;
        number numberobj_37_value;
        number expr_23_in1;
        number expr_23_in2;
        number expr_23_out1;
        list scale_15_input;
        number scale_15_inlow;
        number scale_15_inhigh;
        number scale_15_outlow;
        number scale_15_outhigh;
        number scale_15_power;
        list scale_15_out;
        number snapshot_08_interval;
        number snapshot_08_out;
        number cycle_tilde_17_frequency;
        number cycle_tilde_17_phase_offset;
        number numberobj_38_value;
        number expr_24_in1;
        number expr_24_in2;
        number expr_24_out1;
        number random_08_limit;
        number random_08_seed;
        MillisecondTime _currentTime;
        UInt64 audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        SampleValue * signals[4];
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        number mtof_tilde_04_innerMtoF_lastInValue;
        number mtof_tilde_04_innerMtoF_lastOutValue;
        number mtof_tilde_04_innerMtoF_lastTuning;
        Float64BufferRef mtof_tilde_04_innerMtoF_buffer;
        const Index mtof_tilde_04_innerScala_KBM_MAP_OFFSET = 7;
        bool mtof_tilde_04_innerScala_lastValid;
        number mtof_tilde_04_innerScala_lastNote;
        number mtof_tilde_04_innerScala_lastFreq;
        int mtof_tilde_04_innerScala_sclEntryCount;
        number mtof_tilde_04_innerScala_sclOctaveMul;
        list mtof_tilde_04_innerScala_sclExpMul;
        list mtof_tilde_04_innerScala_kbmValid;
        int mtof_tilde_04_innerScala_kbmMid;
        int mtof_tilde_04_innerScala_kbmRefNum;
        number mtof_tilde_04_innerScala_kbmRefFreq;
        int mtof_tilde_04_innerScala_kbmSize;
        int mtof_tilde_04_innerScala_kbmMin;
        int mtof_tilde_04_innerScala_kbmMax;
        int mtof_tilde_04_innerScala_kbmOctaveDegree;
        Index mtof_tilde_04_innerScala_kbmMapSize;
        number mtof_tilde_04_innerScala_refFreq;
        number param_26_lastValue;
        SampleIndex ip_10_lastIndex;
        number ip_10_lastValue;
        SampleIndex ip_10_resetCount;
        signal ip_10_sigbuf;
        bool ip_10_setupDone;
        number param_27_lastValue;
        SampleIndex ip_11_lastIndex;
        number ip_11_lastValue;
        SampleIndex ip_11_resetCount;
        signal ip_11_sigbuf;
        bool ip_11_setupDone;
        SampleIndex ip_12_lastIndex;
        number ip_12_lastValue;
        SampleIndex ip_12_resetCount;
        signal ip_12_sigbuf;
        bool ip_12_setupDone;
        number param_28_lastValue;
        Int numberobj_35_currentFormat;
        number numberobj_35_lastValue;
        Float64BufferRef cycle_tilde_16_buffer;
        long cycle_tilde_16_wrap;
        uint32_t cycle_tilde_16_phasei;
        SampleValue cycle_tilde_16_f2i;
        number cycle_tilde_16_ph_currentPhase;
        number cycle_tilde_16_ph_conv;
        bool cycle_tilde_16_setupDone;
        number snapshot_07_calc;
        number snapshot_07_nextTime;
        SampleIndex snapshot_07_count;
        number snapshot_07_lastValue;
        Int numberobj_36_currentFormat;
        number numberobj_36_lastValue;
        UInt random_07_nz_state[4] = { };
        Int numberobj_37_currentFormat;
        number numberobj_37_lastValue;
        number snapshot_08_calc;
        number snapshot_08_nextTime;
        SampleIndex snapshot_08_count;
        number snapshot_08_lastValue;
        Float64BufferRef cycle_tilde_17_buffer;
        long cycle_tilde_17_wrap;
        uint32_t cycle_tilde_17_phasei;
        SampleValue cycle_tilde_17_f2i;
        number cycle_tilde_17_ph_currentPhase;
        number cycle_tilde_17_ph_conv;
        bool cycle_tilde_17_setupDone;
        Int numberobj_38_currentFormat;
        number numberobj_38_lastValue;
        UInt random_08_nz_state[4] = { };
        number stackprotect_count;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
        RNBOSubpatcher_800* p_10;
        RNBOSubpatcher_801* p_11;
    
};

class RNBOSubpatcher_810 : public PatcherInterfaceImpl {
    
    friend class drone;
    
    public:
    
    class RNBOSubpatcher_802 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_810;
            friend class drone;
            
            public:
            
            RNBOSubpatcher_802()
            {
            }
            
            ~RNBOSubpatcher_802()
            {
            }
            
            virtual RNBOSubpatcher_810* getPatcher() const {
                return static_cast<RNBOSubpatcher_810 *>(_parentPatcher);
            }
            
            drone* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            number samplerate() const {
                return this->sr;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
                const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
                const SampleValue * in3 = (numInputs >= 3 && inputs[2] ? inputs[2] : this->zeroBuffer);
                this->dspexpr_40_perform(in1, in2, this->signals[0], n);
            
                this->cycle_tilde_19_perform(
                    this->signals[0],
                    this->cycle_tilde_19_phase_offset,
                    this->signals[1],
                    this->dummyBuffer,
                    n
                );
            
                this->dspexpr_42_perform(this->signals[0], in3, this->signals[2], n);
                this->dspexpr_41_perform(this->signals[1], this->signals[2], this->signals[0], n);
                this->dspexpr_39_perform(in1, this->signals[0], this->signals[2], n);
                this->cycle_tilde_18_perform(this->signals[2], this->cycle_tilde_18_phase_offset, out1, out2, n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 3; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->cycle_tilde_19_dspsetup(forceDSPSetup);
                this->cycle_tilde_18_dspsetup(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->updateTime(time);
            
                if (index == 0) {
                    this->cycle_tilde_18_buffer = new Float64Buffer(this->getPatcher()->getPatcher()->RNBODefaultSinus);
                    this->cycle_tilde_18_bufferUpdated();
                    this->cycle_tilde_19_buffer = new Float64Buffer(this->getPatcher()->getPatcher()->RNBODefaultSinus);
                    this->cycle_tilde_19_bufferUpdated();
                }
            }
            
            void initialize() {
                this->assign_defaults();
                this->setState();
                this->cycle_tilde_18_buffer = new Float64Buffer(this->getPatcher()->getPatcher()->RNBODefaultSinus);
                this->cycle_tilde_19_buffer = new Float64Buffer(this->getPatcher()->getPatcher()->RNBODefaultSinus);
            }
            
            protected:
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 3;
            }
            
            Index getNumOutputChannels() const {
                return 2;
            }
            
            void initializeObjects() {}
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {
                this->cycle_tilde_18_buffer->requestSize(16384, 1);
                this->cycle_tilde_18_buffer->setSampleRate(this->sr);
                this->cycle_tilde_19_buffer->requestSize(16384, 1);
                this->cycle_tilde_19_buffer->setSampleRate(this->sr);
                this->cycle_tilde_18_buffer = this->cycle_tilde_18_buffer->allocateIfNeeded();
                this->cycle_tilde_19_buffer = this->cycle_tilde_19_buffer->allocateIfNeeded();
            }
            
            void dspexpr_40_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void cycle_tilde_19_perform(
                const Sample * frequency,
                number phase_offset,
                SampleValue * out1,
                SampleValue * out2,
                Index n
            ) {
                RNBO_UNUSED(phase_offset);
                auto __cycle_tilde_19_f2i = this->cycle_tilde_19_f2i;
                auto __cycle_tilde_19_buffer = this->cycle_tilde_19_buffer;
                auto __cycle_tilde_19_phasei = this->cycle_tilde_19_phasei;
                Index i;
            
                for (i = 0; i < n; i++) {
                    {
                        uint32_t uint_phase;
            
                        {
                            {
                                uint_phase = __cycle_tilde_19_phasei;
                            }
                        }
            
                        uint32_t idx = (uint32_t)(uint32_rshift(uint_phase, 18));
                        number frac = ((BinOpInt)((BinOpInt)uint_phase & (BinOpInt)262143)) * 3.81471181759574e-6;
                        number y0 = __cycle_tilde_19_buffer[(Index)idx];
                        number y1 = __cycle_tilde_19_buffer[(Index)((BinOpInt)(idx + 1) & (BinOpInt)16383)];
                        number y = y0 + frac * (y1 - y0);
            
                        {
                            uint32_t pincr = (uint32_t)(uint32_trunc(frequency[(Index)i] * __cycle_tilde_19_f2i));
                            __cycle_tilde_19_phasei = uint32_add(__cycle_tilde_19_phasei, pincr);
                        }
            
                        out1[(Index)i] = y;
                        out2[(Index)i] = uint_phase * 0.232830643653869629e-9;
                        continue;
                    }
                }
            
                this->cycle_tilde_19_phasei = __cycle_tilde_19_phasei;
            }
            
            void dspexpr_42_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_41_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_39_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] + in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void cycle_tilde_18_perform(
                const Sample * frequency,
                number phase_offset,
                SampleValue * out1,
                SampleValue * out2,
                Index n
            ) {
                RNBO_UNUSED(phase_offset);
                auto __cycle_tilde_18_f2i = this->cycle_tilde_18_f2i;
                auto __cycle_tilde_18_buffer = this->cycle_tilde_18_buffer;
                auto __cycle_tilde_18_phasei = this->cycle_tilde_18_phasei;
                Index i;
            
                for (i = 0; i < n; i++) {
                    {
                        uint32_t uint_phase;
            
                        {
                            {
                                uint_phase = __cycle_tilde_18_phasei;
                            }
                        }
            
                        uint32_t idx = (uint32_t)(uint32_rshift(uint_phase, 18));
                        number frac = ((BinOpInt)((BinOpInt)uint_phase & (BinOpInt)262143)) * 3.81471181759574e-6;
                        number y0 = __cycle_tilde_18_buffer[(Index)idx];
                        number y1 = __cycle_tilde_18_buffer[(Index)((BinOpInt)(idx + 1) & (BinOpInt)16383)];
                        number y = y0 + frac * (y1 - y0);
            
                        {
                            uint32_t pincr = (uint32_t)(uint32_trunc(frequency[(Index)i] * __cycle_tilde_18_f2i));
                            __cycle_tilde_18_phasei = uint32_add(__cycle_tilde_18_phasei, pincr);
                        }
            
                        out1[(Index)i] = y;
                        out2[(Index)i] = uint_phase * 0.232830643653869629e-9;
                        continue;
                    }
                }
            
                this->cycle_tilde_18_phasei = __cycle_tilde_18_phasei;
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            number cycle_tilde_18_ph_next(number freq, number reset) {
                {
                    {
                        if (reset >= 0.)
                            this->cycle_tilde_18_ph_currentPhase = reset;
                    }
                }
            
                number pincr = freq * this->cycle_tilde_18_ph_conv;
            
                if (this->cycle_tilde_18_ph_currentPhase < 0.)
                    this->cycle_tilde_18_ph_currentPhase = 1. + this->cycle_tilde_18_ph_currentPhase;
            
                if (this->cycle_tilde_18_ph_currentPhase > 1.)
                    this->cycle_tilde_18_ph_currentPhase = this->cycle_tilde_18_ph_currentPhase - 1.;
            
                number tmp = this->cycle_tilde_18_ph_currentPhase;
                this->cycle_tilde_18_ph_currentPhase += pincr;
                return tmp;
            }
            
            void cycle_tilde_18_ph_reset() {
                this->cycle_tilde_18_ph_currentPhase = 0;
            }
            
            void cycle_tilde_18_ph_dspsetup() {
                this->cycle_tilde_18_ph_conv = (number)1 / this->sr;
            }
            
            void cycle_tilde_18_dspsetup(bool force) {
                if ((bool)(this->cycle_tilde_18_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->cycle_tilde_18_phasei = 0;
                this->cycle_tilde_18_f2i = (number)4294967296 / this->samplerate();
                this->cycle_tilde_18_wrap = (long)(this->cycle_tilde_18_buffer->getSize()) - 1;
                this->cycle_tilde_18_setupDone = true;
                this->cycle_tilde_18_ph_dspsetup();
            }
            
            void cycle_tilde_18_bufferUpdated() {
                this->cycle_tilde_18_wrap = (long)(this->cycle_tilde_18_buffer->getSize()) - 1;
            }
            
            number cycle_tilde_19_ph_next(number freq, number reset) {
                {
                    {
                        if (reset >= 0.)
                            this->cycle_tilde_19_ph_currentPhase = reset;
                    }
                }
            
                number pincr = freq * this->cycle_tilde_19_ph_conv;
            
                if (this->cycle_tilde_19_ph_currentPhase < 0.)
                    this->cycle_tilde_19_ph_currentPhase = 1. + this->cycle_tilde_19_ph_currentPhase;
            
                if (this->cycle_tilde_19_ph_currentPhase > 1.)
                    this->cycle_tilde_19_ph_currentPhase = this->cycle_tilde_19_ph_currentPhase - 1.;
            
                number tmp = this->cycle_tilde_19_ph_currentPhase;
                this->cycle_tilde_19_ph_currentPhase += pincr;
                return tmp;
            }
            
            void cycle_tilde_19_ph_reset() {
                this->cycle_tilde_19_ph_currentPhase = 0;
            }
            
            void cycle_tilde_19_ph_dspsetup() {
                this->cycle_tilde_19_ph_conv = (number)1 / this->sr;
            }
            
            void cycle_tilde_19_dspsetup(bool force) {
                if ((bool)(this->cycle_tilde_19_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->cycle_tilde_19_phasei = 0;
                this->cycle_tilde_19_f2i = (number)4294967296 / this->samplerate();
                this->cycle_tilde_19_wrap = (long)(this->cycle_tilde_19_buffer->getSize()) - 1;
                this->cycle_tilde_19_setupDone = true;
                this->cycle_tilde_19_ph_dspsetup();
            }
            
            void cycle_tilde_19_bufferUpdated() {
                this->cycle_tilde_19_wrap = (long)(this->cycle_tilde_19_buffer->getSize()) - 1;
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                cycle_tilde_18_frequency = 0;
                cycle_tilde_18_phase_offset = 0;
                dspexpr_39_in1 = 0;
                dspexpr_39_in2 = 0;
                dspexpr_40_in1 = 0;
                dspexpr_40_in2 = 0;
                cycle_tilde_19_frequency = 0;
                cycle_tilde_19_phase_offset = 0;
                dspexpr_41_in1 = 0;
                dspexpr_41_in2 = 0;
                dspexpr_42_in1 = 0;
                dspexpr_42_in2 = 0;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                signals[1] = nullptr;
                signals[2] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                cycle_tilde_18_wrap = 0;
                cycle_tilde_18_ph_currentPhase = 0;
                cycle_tilde_18_ph_conv = 0;
                cycle_tilde_18_setupDone = false;
                cycle_tilde_19_wrap = 0;
                cycle_tilde_19_ph_currentPhase = 0;
                cycle_tilde_19_ph_conv = 0;
                cycle_tilde_19_setupDone = false;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number cycle_tilde_18_frequency;
                number cycle_tilde_18_phase_offset;
                number dspexpr_39_in1;
                number dspexpr_39_in2;
                number dspexpr_40_in1;
                number dspexpr_40_in2;
                number cycle_tilde_19_frequency;
                number cycle_tilde_19_phase_offset;
                number dspexpr_41_in1;
                number dspexpr_41_in2;
                number dspexpr_42_in1;
                number dspexpr_42_in2;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[3];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                Float64BufferRef cycle_tilde_18_buffer;
                long cycle_tilde_18_wrap;
                uint32_t cycle_tilde_18_phasei;
                SampleValue cycle_tilde_18_f2i;
                number cycle_tilde_18_ph_currentPhase;
                number cycle_tilde_18_ph_conv;
                bool cycle_tilde_18_setupDone;
                Float64BufferRef cycle_tilde_19_buffer;
                long cycle_tilde_19_wrap;
                uint32_t cycle_tilde_19_phasei;
                SampleValue cycle_tilde_19_f2i;
                number cycle_tilde_19_ph_currentPhase;
                number cycle_tilde_19_ph_conv;
                bool cycle_tilde_19_setupDone;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_803 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_810;
            friend class drone;
            
            public:
            
            RNBOSubpatcher_803()
            {
            }
            
            ~RNBOSubpatcher_803()
            {
            }
            
            virtual RNBOSubpatcher_810* getPatcher() const {
                return static_cast<RNBOSubpatcher_810 *>(_parentPatcher);
            }
            
            drone* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            inline number safediv(number num, number denom) {
                return (denom == 0.0 ? 0.0 : num / denom);
            }
            
            number maximum(number x, number y) {
                return (x < y ? y : x);
            }
            
            number mstosamps(MillisecondTime ms) {
                return ms * this->sr * 0.001;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
                const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
            
                this->gen_05_perform(
                    in2,
                    in2,
                    this->gen_05_in3,
                    this->gen_05_in4,
                    this->gen_05_in5,
                    this->gen_05_in6,
                    this->gen_05_attack_lockout,
                    this->signals[0],
                    n
                );
            
                this->dspexpr_43_perform(in1, this->signals[0], out1, n);
                this->signalforwarder_06_perform(this->signals[0], out2, n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 1; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->gen_05_dspsetup(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& preset) {
                this->param_29_getPresetValue(getSubState(preset, "attack"));
                this->param_30_getPresetValue(getSubState(preset, "decay"));
                this->param_31_getPresetValue(getSubState(preset, "sustain"));
                this->param_32_getPresetValue(getSubState(preset, "release"));
            }
            
            void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
                this->updateTime(time);
            
                switch (index) {
                case 0:
                    {
                    this->param_29_value_set(v);
                    break;
                    }
                case 1:
                    {
                    this->param_30_value_set(v);
                    break;
                    }
                case 2:
                    {
                    this->param_31_value_set(v);
                    break;
                    }
                case 3:
                    {
                    this->param_32_value_set(v);
                    break;
                    }
                }
            }
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                case 0:
                    {
                    return this->param_29_value;
                    }
                case 1:
                    {
                    return this->param_30_value;
                    }
                case 2:
                    {
                    return this->param_31_value;
                    }
                case 3:
                    {
                    return this->param_32_value;
                    }
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 4;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                case 0:
                    {
                    return "attack";
                    }
                case 1:
                    {
                    return "decay";
                    }
                case 2:
                    {
                    return "sustain";
                    }
                case 3:
                    {
                    return "release";
                    }
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                case 0:
                    {
                    return "note[4]/env.adsr/attack";
                    }
                case 1:
                    {
                    return "note[4]/env.adsr/decay";
                    }
                case 2:
                    {
                    return "note[4]/env.adsr/sustain";
                    }
                case 3:
                    {
                    return "note[4]/env.adsr/release";
                    }
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
                {
                    switch (index) {
                    case 0:
                        {
                        info->type = ParameterTypeNumber;
                        info->initialValue = 30;
                        info->min = 0;
                        info->max = 5000;
                        info->exponent = 3;
                        info->steps = 0;
                        info->debug = false;
                        info->saveable = true;
                        info->transmittable = true;
                        info->initialized = true;
                        info->visible = true;
                        info->displayName = "";
                        info->unit = "";
                        info->ioType = IOTypeUndefined;
                        info->signalIndex = INVALID_INDEX;
                        break;
                        }
                    case 1:
                        {
                        info->type = ParameterTypeNumber;
                        info->initialValue = 200;
                        info->min = 1;
                        info->max = 5000;
                        info->exponent = 3;
                        info->steps = 0;
                        info->debug = false;
                        info->saveable = true;
                        info->transmittable = true;
                        info->initialized = true;
                        info->visible = true;
                        info->displayName = "";
                        info->unit = "";
                        info->ioType = IOTypeUndefined;
                        info->signalIndex = INVALID_INDEX;
                        break;
                        }
                    case 2:
                        {
                        info->type = ParameterTypeNumber;
                        info->initialValue = 0.5;
                        info->min = 0;
                        info->max = 1;
                        info->exponent = 0.8;
                        info->steps = 0;
                        info->debug = false;
                        info->saveable = true;
                        info->transmittable = true;
                        info->initialized = true;
                        info->visible = true;
                        info->displayName = "";
                        info->unit = "";
                        info->ioType = IOTypeUndefined;
                        info->signalIndex = INVALID_INDEX;
                        break;
                        }
                    case 3:
                        {
                        info->type = ParameterTypeNumber;
                        info->initialValue = 300;
                        info->min = 1;
                        info->max = 90000;
                        info->exponent = 5;
                        info->steps = 0;
                        info->debug = false;
                        info->saveable = true;
                        info->transmittable = true;
                        info->initialized = true;
                        info->visible = true;
                        info->displayName = "";
                        info->unit = "";
                        info->ioType = IOTypeUndefined;
                        info->signalIndex = INVALID_INDEX;
                        break;
                        }
                    }
                }
            }
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                case 2:
                    {
                    {
                        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                        ParameterValue normalizedValue = (value - 0) / (1 - 0);
            
                        {
                            if (normalizedValue != 0.0) {
                                normalizedValue = rnbo_exp(
                                    rnbo_log((normalizedValue <= 0.0000000001 ? 0.0000000001 : normalizedValue)) * 1. / (number)0.8
                                );
                            }
                        }
            
                        return normalizedValue;
                    }
                    }
                case 0:
                    {
                    {
                        value = (value < 0 ? 0 : (value > 5000 ? 5000 : value));
                        ParameterValue normalizedValue = (value - 0) / (5000 - 0);
            
                        {
                            if (normalizedValue != 0.0) {
                                normalizedValue = rnbo_exp(
                                    rnbo_log((normalizedValue <= 0.0000000001 ? 0.0000000001 : normalizedValue)) * 1. / (number)3
                                );
                            }
                        }
            
                        return normalizedValue;
                    }
                    }
                case 1:
                    {
                    {
                        value = (value < 1 ? 1 : (value > 5000 ? 5000 : value));
                        ParameterValue normalizedValue = (value - 1) / (5000 - 1);
            
                        {
                            if (normalizedValue != 0.0) {
                                normalizedValue = rnbo_exp(
                                    rnbo_log((normalizedValue <= 0.0000000001 ? 0.0000000001 : normalizedValue)) * 1. / (number)3
                                );
                            }
                        }
            
                        return normalizedValue;
                    }
                    }
                case 3:
                    {
                    {
                        value = (value < 1 ? 1 : (value > 90000 ? 90000 : value));
                        ParameterValue normalizedValue = (value - 1) / (90000 - 1);
            
                        {
                            if (normalizedValue != 0.0) {
                                normalizedValue = rnbo_exp(
                                    rnbo_log((normalizedValue <= 0.0000000001 ? 0.0000000001 : normalizedValue)) * 1. / (number)5
                                );
                            }
                        }
            
                        return normalizedValue;
                    }
                    }
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                case 2:
                    {
                    {
                        {
                            if (value == 0.0) {
                                return 0;
                            } else {
                                return 0 + rnbo_exp(rnbo_log((value <= 0.0000000001 ? 0.0000000001 : value)) * 0.8) * (1 - 0);
                            }
                        }
                    }
                    }
                case 0:
                    {
                    {
                        {
                            if (value == 0.0) {
                                return 0;
                            } else {
                                return 0 + rnbo_exp(rnbo_log((value <= 0.0000000001 ? 0.0000000001 : value)) * 3) * (5000 - 0);
                            }
                        }
                    }
                    }
                case 1:
                    {
                    {
                        {
                            if (value == 0.0) {
                                return 1;
                            } else {
                                return 1 + rnbo_exp(rnbo_log((value <= 0.0000000001 ? 0.0000000001 : value)) * 3) * (5000 - 1);
                            }
                        }
                    }
                    }
                case 3:
                    {
                    {
                        {
                            if (value == 0.0) {
                                return 1;
                            } else {
                                return 1 + rnbo_exp(rnbo_log((value <= 0.0000000001 ? 0.0000000001 : value)) * 5) * (90000 - 1);
                            }
                        }
                    }
                    }
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                case 0:
                    {
                    return this->param_29_value_constrain(value);
                    }
                case 1:
                    {
                    return this->param_30_value_constrain(value);
                    }
                case 2:
                    {
                    return this->param_31_value_constrain(value);
                    }
                case 3:
                    {
                    return this->param_32_value_constrain(value);
                    }
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            void param_29_value_set(number v) {
                v = this->param_29_value_constrain(v);
                this->param_29_value = v;
                this->sendParameter(0, false);
            
                if (this->param_29_value != this->param_29_lastValue) {
                    this->getEngine()->presetTouched();
                    this->param_29_lastValue = this->param_29_value;
                }
            
                this->gen_05_in3_set(v);
            }
            
            void param_30_value_set(number v) {
                v = this->param_30_value_constrain(v);
                this->param_30_value = v;
                this->sendParameter(1, false);
            
                if (this->param_30_value != this->param_30_lastValue) {
                    this->getEngine()->presetTouched();
                    this->param_30_lastValue = this->param_30_value;
                }
            
                this->gen_05_in4_set(v);
            }
            
            void param_31_value_set(number v) {
                v = this->param_31_value_constrain(v);
                this->param_31_value = v;
                this->sendParameter(2, false);
            
                if (this->param_31_value != this->param_31_lastValue) {
                    this->getEngine()->presetTouched();
                    this->param_31_lastValue = this->param_31_value;
                }
            
                this->gen_05_in5_set(v);
            }
            
            void param_32_value_set(number v) {
                v = this->param_32_value_constrain(v);
                this->param_32_value = v;
                this->sendParameter(3, false);
            
                if (this->param_32_value != this->param_32_lastValue) {
                    this->getEngine()->presetTouched();
                    this->param_32_lastValue = this->param_32_value;
                }
            
                this->gen_05_in6_set(v);
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 2;
            }
            
            Index getNumOutputChannels() const {
                return 2;
            }
            
            void initializeObjects() {
                this->gen_05_attack_has_ended_init();
                this->gen_05_sustain_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {
                this->updateTime(this->getEngine()->getCurrentTime());
            
                {
                    this->scheduleParamInit(0, 0);
                }
            
                {
                    this->scheduleParamInit(1, 0);
                }
            
                {
                    this->scheduleParamInit(2, 0);
                }
            
                {
                    this->scheduleParamInit(3, 0);
                }
            }
            
            void allocateDataRefs() {}
            
            number param_29_value_constrain(number v) const {
                v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));
                return v;
            }
            
            void gen_05_in3_set(number v) {
                this->gen_05_in3 = v;
            }
            
            number param_30_value_constrain(number v) const {
                v = (v > 5000 ? 5000 : (v < 1 ? 1 : v));
                return v;
            }
            
            void gen_05_in4_set(number v) {
                this->gen_05_in4 = v;
            }
            
            number param_31_value_constrain(number v) const {
                v = (v > 1 ? 1 : (v < 0 ? 0 : v));
                return v;
            }
            
            void gen_05_in5_set(number v) {
                this->gen_05_in5 = v;
            }
            
            number param_32_value_constrain(number v) const {
                v = (v > 90000 ? 90000 : (v < 1 ? 1 : v));
                return v;
            }
            
            void gen_05_in6_set(number v) {
                this->gen_05_in6 = v;
            }
            
            void gen_05_perform(
                const Sample * in1,
                const Sample * in2,
                number in3,
                number in4,
                number in5,
                number in6,
                number attack_lockout,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(attack_lockout);
                auto __gen_05_sustain_value = this->gen_05_sustain_value;
                auto __gen_05_attack_has_ended_value = this->gen_05_attack_has_ended_value;
                auto min_1_0 = this->maximum(in3, 0.1);
                auto min_2_1 = this->maximum(in4, 0.1);
                number clamp_3_2 = (in5 > 1 ? 1 : (in5 < 0 ? 0 : in5));
                auto min_4_3 = this->maximum(in6, 0.1);
                number attack_iter_interval_8 = this->mstosamps(min_1_0) * 0.33333333333333;
                number release_iter_interval_9 = this->mstosamps(min_4_3) * 0.33333333333333;
                number decay_iter_interval_10 = this->mstosamps(min_2_1) * 0.33333333333333;
                number sustain_smoothing_12 = 1 - ((this->mstosamps(20) == 0. ? 0. : (number)1 / this->mstosamps(20)));
                Index i;
            
                for (i = 0; i < n; i++) {
                    number trigger_5 = this->gen_05_delta_4_next(in2[(Index)i] > 0) > 0;
                    number is_released_6 = in1[(Index)i] == 0;
                    number is_attacking_7 = ((bool)(trigger_5) || (bool)(!(bool)(__gen_05_attack_has_ended_value))) && ((bool)(!(bool)(is_released_6)) || 0);
                    number decay_iter_interval_5_11 = !(bool)(is_released_6) * decay_iter_interval_10 + is_released_6 * release_iter_interval_9;
                    __gen_05_sustain_value = clamp_3_2 + sustain_smoothing_12 * (__gen_05_sustain_value - clamp_3_2);
                    number ad_target_13 = (is_attacking_7 > 0 ? 1.0523956964913 : -0.052395696491256);
                    number asr_target_14 = ((bool)(!(bool)(is_released_6)) || (bool)(is_attacking_7) ? 1.0523956964913 : -0.052395696491256);
                    number ad_16 = this->gen_05_slide_15_next(ad_target_13, attack_iter_interval_8, decay_iter_interval_5_11);
                    number ad_6_17 = (ad_16 > 1 ? 1 : (ad_16 < 0 ? 0 : ad_16));
                    number asr_19 = this->gen_05_slide_18_next(asr_target_14, attack_iter_interval_8, release_iter_interval_9);
                    number asr_7_20 = (asr_19 > 1 ? 1 : (asr_19 < 0 ? 0 : asr_19));
                    __gen_05_attack_has_ended_value = (bool)(!(bool)(is_attacking_7)) || ad_6_17 >= 1;
                    number expr_8_21 = ad_6_17 + __gen_05_sustain_value * (asr_7_20 - ad_6_17);
                    out1[(Index)i] = expr_8_21;
                }
            
                this->gen_05_attack_has_ended_value = __gen_05_attack_has_ended_value;
                this->gen_05_sustain_value = __gen_05_sustain_value;
            }
            
            void dspexpr_43_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void signalforwarder_06_perform(const SampleValue * input, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            number gen_05_attack_has_ended_getvalue() {
                return this->gen_05_attack_has_ended_value;
            }
            
            void gen_05_attack_has_ended_setvalue(number val) {
                this->gen_05_attack_has_ended_value = val;
            }
            
            void gen_05_attack_has_ended_reset() {
                this->gen_05_attack_has_ended_value = 0;
            }
            
            void gen_05_attack_has_ended_init() {
                this->gen_05_attack_has_ended_value = 0;
            }
            
            number gen_05_sustain_getvalue() {
                return this->gen_05_sustain_value;
            }
            
            void gen_05_sustain_setvalue(number val) {
                this->gen_05_sustain_value = val;
            }
            
            void gen_05_sustain_reset() {
                this->gen_05_sustain_value = 0;
            }
            
            void gen_05_sustain_init() {
                this->gen_05_sustain_value = 0.5;
            }
            
            number gen_05_delta_4_next(number x) {
                number temp = (number)(x - this->gen_05_delta_4_prev);
                this->gen_05_delta_4_prev = x;
                return temp;
            }
            
            void gen_05_delta_4_dspsetup() {
                this->gen_05_delta_4_reset();
            }
            
            void gen_05_delta_4_reset() {
                this->gen_05_delta_4_prev = 0;
            }
            
            number gen_05_slide_15_next(number x, number up, number down) {
                number temp = x - this->gen_05_slide_15_prev;
                auto iup = this->safediv(1., this->maximum(1., rnbo_abs(up)));
                auto idown = this->safediv(1., this->maximum(1., rnbo_abs(down)));
                this->gen_05_slide_15_prev = this->gen_05_slide_15_prev + ((x > this->gen_05_slide_15_prev ? iup : idown)) * temp;
                return this->gen_05_slide_15_prev;
            }
            
            void gen_05_slide_15_reset() {
                this->gen_05_slide_15_prev = 0;
            }
            
            number gen_05_slide_18_next(number x, number up, number down) {
                number temp = x - this->gen_05_slide_18_prev;
                auto iup = this->safediv(1., this->maximum(1., rnbo_abs(up)));
                auto idown = this->safediv(1., this->maximum(1., rnbo_abs(down)));
                this->gen_05_slide_18_prev = this->gen_05_slide_18_prev + ((x > this->gen_05_slide_18_prev ? iup : idown)) * temp;
                return this->gen_05_slide_18_prev;
            }
            
            void gen_05_slide_18_reset() {
                this->gen_05_slide_18_prev = 0;
            }
            
            void gen_05_dspsetup(bool force) {
                if ((bool)(this->gen_05_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->gen_05_setupDone = true;
                this->gen_05_delta_4_dspsetup();
            }
            
            void param_29_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->param_29_value;
            }
            
            void param_29_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->param_29_value_set(preset["value"]);
            }
            
            void param_30_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->param_30_value;
            }
            
            void param_30_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->param_30_value_set(preset["value"]);
            }
            
            void param_31_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->param_31_value;
            }
            
            void param_31_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->param_31_value_set(preset["value"]);
            }
            
            void param_32_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->param_32_value;
            }
            
            void param_32_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->param_32_value_set(preset["value"]);
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                dspexpr_43_in1 = 0;
                dspexpr_43_in2 = 0;
                gen_05_in1 = 0;
                gen_05_in2 = 0;
                gen_05_in3 = 0;
                gen_05_in4 = 0;
                gen_05_in5 = 0;
                gen_05_in6 = 0;
                gen_05_attack_lockout = 0;
                param_29_value = 30;
                param_30_value = 200;
                param_31_value = 0.5;
                param_32_value = 300;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                gen_05_attack_has_ended_value = 0;
                gen_05_sustain_value = 0;
                gen_05_delta_4_prev = 0;
                gen_05_slide_15_prev = 0;
                gen_05_slide_18_prev = 0;
                gen_05_setupDone = false;
                param_29_lastValue = 0;
                param_30_lastValue = 0;
                param_31_lastValue = 0;
                param_32_lastValue = 0;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number dspexpr_43_in1;
                number dspexpr_43_in2;
                number gen_05_in1;
                number gen_05_in2;
                number gen_05_in3;
                number gen_05_in4;
                number gen_05_in5;
                number gen_05_in6;
                number gen_05_attack_lockout;
                number param_29_value;
                number param_30_value;
                number param_31_value;
                number param_32_value;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[1];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                number gen_05_attack_has_ended_value;
                number gen_05_sustain_value;
                number gen_05_delta_4_prev;
                number gen_05_slide_15_prev;
                number gen_05_slide_18_prev;
                bool gen_05_setupDone;
                number param_29_lastValue;
                number param_30_lastValue;
                number param_31_lastValue;
                number param_32_lastValue;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    RNBOSubpatcher_810()
    {
    }
    
    ~RNBOSubpatcher_810()
    {
        delete this->p_12;
        delete this->p_13;
    }
    
    virtual drone* getPatcher() const {
        return static_cast<drone *>(_parentPatcher);
    }
    
    drone* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
        getEngine()->flushClockEvents(this, -1508480176, false);
        getEngine()->flushClockEvents(this, -871642103, false);
        getEngine()->flushClockEvents(this, 1646922831, false);
    }
    
    inline number linearinterp(number frac, number x, number y) {
        return x + (y - x) * frac;
    }
    
    inline number safediv(number num, number denom) {
        return (denom == 0.0 ? 0.0 : num / denom);
    }
    
    number safepow(number base, number exponent) {
        return fixnan(rnbo_pow(base, exponent));
    }
    
    number scale(
        number x,
        number lowin,
        number hiin,
        number lowout,
        number highout,
        number pow
    ) {
        auto inscale = this->safediv(1., hiin - lowin);
        number outdiff = highout - lowout;
        number value = (x - lowin) * inscale;
    
        if (pow != 1) {
            if (value > 0)
                value = this->safepow(value, pow);
            else
                value = -this->safepow(-value, pow);
        }
    
        value = value * outdiff + lowout;
        return value;
    }
    
    number samplerate() const {
        return this->sr;
    }
    
    Index voice() {
        return this->_voiceIndex;
    }
    
    number random(number low, number high) {
        number range = high - low;
        return globalrandom() * range + low;
    }
    
    Index getNumMidiInputPorts() const {
        return 0;
    }
    
    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        const SampleValue * const* inputs,
        Index numInputs,
        SampleValue * const* outputs,
        Index numOutputs,
        Index n
    ) {
        RNBO_UNUSED(numInputs);
        RNBO_UNUSED(inputs);
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
        this->mtof_tilde_05_perform(this->mtof_tilde_05_midivalue, this->signals[0], n);
        this->dspexpr_45_perform(this->signals[0], this->dspexpr_45_in2, this->signals[1], n);
        this->ip_13_perform(this->signals[0], n);
        this->ip_14_perform(this->signals[2], n);
    
        this->p_12_perform(
            this->signals[1],
            this->signals[0],
            this->signals[2],
            this->signals[3],
            this->dummyBuffer,
            n
        );
    
        this->ip_15_perform(this->signals[2], n);
        this->p_13_perform(this->signals[3], this->signals[2], this->signals[0], this->dummyBuffer, n);
        this->dspexpr_44_perform(this->signals[0], this->dspexpr_44_in2, out1, n);
    
        this->cycle_tilde_20_perform(
            this->cycle_tilde_20_frequency,
            this->cycle_tilde_20_phase_offset,
            this->signals[0],
            this->dummyBuffer,
            n
        );
    
        this->snapshot_09_perform(this->signals[0], n);
    
        this->cycle_tilde_21_perform(
            this->cycle_tilde_21_frequency,
            this->cycle_tilde_21_phase_offset,
            this->signals[0],
            this->dummyBuffer,
            n
        );
    
        this->snapshot_10_perform(this->signals[0], n);
        this->stackprotect_perform(n);
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            Index i;
    
            for (i = 0; i < 4; i++) {
                this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
            }
    
            this->ip_13_sigbuf = resizeSignal(this->ip_13_sigbuf, this->maxvs, maxBlockSize);
            this->ip_14_sigbuf = resizeSignal(this->ip_14_sigbuf, this->maxvs, maxBlockSize);
            this->ip_15_sigbuf = resizeSignal(this->ip_15_sigbuf, this->maxvs, maxBlockSize);
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        this->ip_13_dspsetup(forceDSPSetup);
        this->ip_14_dspsetup(forceDSPSetup);
        this->ip_15_dspsetup(forceDSPSetup);
        this->cycle_tilde_20_dspsetup(forceDSPSetup);
        this->cycle_tilde_21_dspsetup(forceDSPSetup);
        this->p_12->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_13->prepareToProcess(sampleRate, maxBlockSize, force);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            {
            this->setProbingIndex(-1);
            break;
            }
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    void onSampleRateChanged(double ) {}
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {
        this->p_12 = new RNBOSubpatcher_802();
        this->p_12->setEngineAndPatcher(this->getEngine(), this);
        this->p_12->initialize();
        this->p_12->setParameterOffset(this->getParameterOffset(this->p_12));
        this->p_13 = new RNBOSubpatcher_803();
        this->p_13->setEngineAndPatcher(this->getEngine(), this);
        this->p_13->initialize();
        this->p_13->setParameterOffset(this->getParameterOffset(this->p_13));
    }
    
    void getPreset(PatcherStateInterface& preset) {
        this->param_33_getPresetValue(getSubState(preset, "ratio"));
        this->param_34_getPresetValue(getSubState(preset, "index"));
        this->param_35_getPresetValue(getSubState(preset, "lfo"));
        this->p_12->getPreset(getSubState(getSubState(preset, "__sps"), "osc.fm[4]"));
        this->p_13->getPreset(getSubState(getSubState(preset, "__sps"), "env.adsr"));
    }
    
    void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
        this->updateTime(time);
    
        switch (index) {
        case 0:
            {
            this->param_33_value_set(v);
            break;
            }
        case 1:
            {
            this->param_34_value_set(v);
            break;
            }
        case 2:
            {
            this->param_35_value_set(v);
            break;
            }
        default:
            {
            index -= 3;
    
            if (index < this->p_12->getNumParameters())
                this->p_12->setParameterValue(index, v, time);
    
            index -= this->p_12->getNumParameters();
    
            if (index < this->p_13->getNumParameters())
                this->p_13->setParameterValue(index, v, time);
    
            break;
            }
        }
    }
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
        this->setParameterValue(index, this->getParameterValue(index), time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        case 0:
            {
            return this->param_33_value;
            }
        case 1:
            {
            return this->param_34_value;
            }
        case 2:
            {
            return this->param_35_value;
            }
        default:
            {
            index -= 3;
    
            if (index < this->p_12->getNumParameters())
                return this->p_12->getParameterValue(index);
    
            index -= this->p_12->getNumParameters();
    
            if (index < this->p_13->getNumParameters())
                return this->p_13->getParameterValue(index);
    
            return 0;
            }
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 0;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 0;
    }
    
    ParameterIndex getNumParameters() const {
        return 3 + this->p_12->getNumParameters() + this->p_13->getNumParameters();
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        case 0:
            {
            return "ratio";
            }
        case 1:
            {
            return "index";
            }
        case 2:
            {
            return "lfo";
            }
        default:
            {
            index -= 3;
    
            if (index < this->p_12->getNumParameters())
                return this->p_12->getParameterName(index);
    
            index -= this->p_12->getNumParameters();
    
            if (index < this->p_13->getNumParameters())
                return this->p_13->getParameterName(index);
    
            return "bogus";
            }
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        case 0:
            {
            return "note[4]/ratio";
            }
        case 1:
            {
            return "note[4]/index";
            }
        case 2:
            {
            return "note[4]/lfo";
            }
        default:
            {
            index -= 3;
    
            if (index < this->p_12->getNumParameters())
                return this->p_12->getParameterId(index);
    
            index -= this->p_12->getNumParameters();
    
            if (index < this->p_13->getNumParameters())
                return this->p_13->getParameterId(index);
    
            return "bogus";
            }
        }
    }
    
    void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
        {
            switch (index) {
            case 0:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 1;
                info->min = 1;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            case 1:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 1;
                info->min = 1;
                info->max = 20;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            case 2:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 1;
                info->min = 1;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            default:
                {
                index -= 3;
    
                if (index < this->p_12->getNumParameters())
                    this->p_12->getParameterInfo(index, info);
    
                index -= this->p_12->getNumParameters();
    
                if (index < this->p_13->getNumParameters())
                    this->p_13->getParameterInfo(index, info);
    
                break;
                }
            }
        }
    }
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
        if (subpatcher == this->p_12)
            return 3;
    
        if (subpatcher == this->p_13)
            return 3 + this->p_12->getNumParameters();
    
        return 0;
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        case 1:
            {
            {
                value = (value < 1 ? 1 : (value > 20 ? 20 : value));
                ParameterValue normalizedValue = (value - 1) / (20 - 1);
                return normalizedValue;
            }
            }
        case 0:
        case 2:
            {
            {
                value = (value < 1 ? 1 : (value > 100 ? 100 : value));
                ParameterValue normalizedValue = (value - 1) / (100 - 1);
                return normalizedValue;
            }
            }
        default:
            {
            index -= 3;
    
            if (index < this->p_12->getNumParameters())
                return this->p_12->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_12->getNumParameters();
    
            if (index < this->p_13->getNumParameters())
                return this->p_13->convertToNormalizedParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        case 1:
            {
            {
                {
                    return 1 + value * (20 - 1);
                }
            }
            }
        case 0:
        case 2:
            {
            {
                {
                    return 1 + value * (100 - 1);
                }
            }
            }
        default:
            {
            index -= 3;
    
            if (index < this->p_12->getNumParameters())
                return this->p_12->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_12->getNumParameters();
    
            if (index < this->p_13->getNumParameters())
                return this->p_13->convertFromNormalizedParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        case 0:
            {
            return this->param_33_value_constrain(value);
            }
        case 1:
            {
            return this->param_34_value_constrain(value);
            }
        case 2:
            {
            return this->param_35_value_constrain(value);
            }
        default:
            {
            index -= 3;
    
            if (index < this->p_12->getNumParameters())
                return this->p_12->constrainParameterValue(index, value);
    
            index -= this->p_12->getNumParameters();
    
            if (index < this->p_13->getNumParameters())
                return this->p_13->constrainParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
        RNBO_UNUSED(hasValue);
        this->updateTime(time);
    
        switch (index) {
        case -1508480176:
            {
            this->snapshot_09_out_set(value);
            break;
            }
        case -871642103:
            {
            this->loadbang_05_startupbang_bang();
            break;
            }
        case 1646922831:
            {
            this->snapshot_10_out_set(value);
            break;
            }
        }
    }
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("valin"):
            {
            if (TAG("note[4]/number_obj-76") == objectId)
                this->numberobj_39_valin_set(payload);
    
            if (TAG("note[4]/number_obj-12") == objectId)
                this->numberobj_40_valin_set(payload);
    
            if (TAG("note[4]/number_obj-20") == objectId)
                this->numberobj_41_valin_set(payload);
    
            if (TAG("note[4]/number_obj-3") == objectId)
                this->numberobj_42_valin_set(payload);
    
            break;
            }
        case TAG("format"):
            {
            if (TAG("note[4]/number_obj-76") == objectId)
                this->numberobj_39_format_set(payload);
    
            if (TAG("note[4]/number_obj-12") == objectId)
                this->numberobj_40_format_set(payload);
    
            if (TAG("note[4]/number_obj-20") == objectId)
                this->numberobj_41_format_set(payload);
    
            if (TAG("note[4]/number_obj-3") == objectId)
                this->numberobj_42_format_set(payload);
    
            break;
            }
        }
    
        this->p_12->processNumMessage(tag, objectId, time, payload);
        this->p_13->processNumMessage(tag, objectId, time, payload);
    }
    
    void processListMessage(
        MessageTag tag,
        MessageTag objectId,
        MillisecondTime time,
        const list& payload
    ) {
        RNBO_UNUSED(objectId);
        this->updateTime(time);
        this->p_12->processListMessage(tag, objectId, time, payload);
        this->p_13->processListMessage(tag, objectId, time, payload);
    }
    
    void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("startupbang"):
            {
            if (TAG("note[4]/loadbang_obj-10") == objectId)
                this->loadbang_05_startupbang_bang();
    
            break;
            }
        case TAG("bangin"):
            {
            if (TAG("note[4]/button_obj-9") == objectId)
                this->button_05_bangin_bang();
    
            break;
            }
        }
    
        this->p_12->processBangMessage(tag, objectId, time);
        this->p_13->processBangMessage(tag, objectId, time);
    }
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
        case TAG("valout"):
            {
            return "valout";
            }
        case TAG("note[4]/number_obj-76"):
            {
            return "note[4]/number_obj-76";
            }
        case TAG("setup"):
            {
            return "setup";
            }
        case TAG("note[4]/number_obj-12"):
            {
            return "note[4]/number_obj-12";
            }
        case TAG("bangout"):
            {
            return "bangout";
            }
        case TAG("note[4]/button_obj-9"):
            {
            return "note[4]/button_obj-9";
            }
        case TAG("note[4]/number_obj-20"):
            {
            return "note[4]/number_obj-20";
            }
        case TAG("note[4]/number_obj-3"):
            {
            return "note[4]/number_obj-3";
            }
        case TAG("valin"):
            {
            return "valin";
            }
        case TAG("format"):
            {
            return "format";
            }
        case TAG("startupbang"):
            {
            return "startupbang";
            }
        case TAG("note[4]/loadbang_obj-10"):
            {
            return "note[4]/loadbang_obj-10";
            }
        case TAG("bangin"):
            {
            return "bangin";
            }
        }
    
        auto subpatchResult_0 = this->p_12->resolveTag(tag);
    
        if (subpatchResult_0)
            return subpatchResult_0;
    
        auto subpatchResult_1 = this->p_13->resolveTag(tag);
    
        if (subpatchResult_1)
            return subpatchResult_1;
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        default:
            {
            return nullptr;
            }
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 0;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
        this->updateTime(time);
    
        if (index == 1) {
            this->mtof_tilde_05_innerMtoF_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultMtofLookupTable256);
        }
    
        if (index == 0) {
            this->cycle_tilde_20_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultSinus);
            this->cycle_tilde_20_bufferUpdated();
            this->cycle_tilde_21_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultSinus);
            this->cycle_tilde_21_bufferUpdated();
        }
    
        this->p_12->processDataViewUpdate(index, time);
        this->p_13->processDataViewUpdate(index, time);
    }
    
    void initialize() {
        this->assign_defaults();
        this->setState();
        this->mtof_tilde_05_innerMtoF_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultMtofLookupTable256);
        this->cycle_tilde_20_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultSinus);
        this->cycle_tilde_21_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultSinus);
    }
    
    protected:
    
    void param_33_value_set(number v) {
        v = this->param_33_value_constrain(v);
        this->param_33_value = v;
        this->sendParameter(0, false);
    
        if (this->param_33_value != this->param_33_lastValue) {
            this->getEngine()->presetTouched();
            this->param_33_lastValue = this->param_33_value;
        }
    
        this->ip_13_value_set(v);
    }
    
    void param_34_value_set(number v) {
        v = this->param_34_value_constrain(v);
        this->param_34_value = v;
        this->sendParameter(1, false);
    
        if (this->param_34_value != this->param_34_lastValue) {
            this->getEngine()->presetTouched();
            this->param_34_lastValue = this->param_34_value;
        }
    
        this->ip_14_value_set(v);
    }
    
    void param_35_value_set(number v) {
        v = this->param_35_value_constrain(v);
        this->param_35_value = v;
        this->sendParameter(2, false);
    
        if (this->param_35_value != this->param_35_lastValue) {
            this->getEngine()->presetTouched();
            this->param_35_lastValue = this->param_35_value;
        }
    
        this->cycle_tilde_20_frequency_set(v);
    }
    
    void eventinlet_13_out1_bang_bang() {}
    
    void eventinlet_13_out1_number_set(number v) {
        this->dspexpr_45_in2_set(v);
    }
    
    void numberobj_39_valin_set(number v) {
        this->numberobj_39_value_set(v);
    }
    
    void numberobj_39_format_set(number v) {
        this->numberobj_39_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void snapshot_09_out_set(number v) {
        this->snapshot_09_out = v;
    
        {
            list converted = {v};
            this->scale_16_input_set(converted);
        }
    }
    
    void loadbang_05_startupbang_bang() {
        this->loadbang_05_output_bang();
    }
    
    void numberobj_40_valin_set(number v) {
        this->numberobj_40_value_set(v);
    }
    
    void numberobj_40_format_set(number v) {
        this->numberobj_40_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void button_05_bangin_bang() {
        this->button_05_bangval_bang();
    }
    
    void numberobj_41_valin_set(number v) {
        this->numberobj_41_value_set(v);
    }
    
    void numberobj_41_format_set(number v) {
        this->numberobj_41_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void snapshot_10_out_set(number v) {
        this->snapshot_10_out = v;
    
        {
            list converted = {v};
            this->scale_17_input_set(converted);
        }
    }
    
    void numberobj_42_valin_set(number v) {
        this->numberobj_42_value_set(v);
    }
    
    void numberobj_42_format_set(number v) {
        this->numberobj_42_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 0;
    }
    
    Index getNumOutputChannels() const {
        return 1;
    }
    
    void initializeObjects() {
        this->mtof_tilde_05_innerScala_init();
        this->mtof_tilde_05_init();
        this->ip_13_init();
        this->ip_14_init();
        this->ip_15_init();
        this->numberobj_39_init();
        this->numberobj_40_init();
        this->random_09_nz_init();
        this->numberobj_41_init();
        this->numberobj_42_init();
        this->random_10_nz_init();
        this->p_12->initializeObjects();
        this->p_13->initializeObjects();
    }
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {
        this->updateTime(this->getEngine()->getCurrentTime());
        this->p_12->startup();
        this->p_13->startup();
        this->getEngine()->scheduleClockEvent(this, -871642103, 0 + this->_currentTime);;
    
        {
            this->scheduleParamInit(0, 0);
        }
    
        {
            this->scheduleParamInit(1, 0);
        }
    
        {
            this->scheduleParamInit(2, 0);
        }
    }
    
    void allocateDataRefs() {
        this->p_12->allocateDataRefs();
        this->p_13->allocateDataRefs();
        this->mtof_tilde_05_innerMtoF_buffer->requestSize(65536, 1);
        this->mtof_tilde_05_innerMtoF_buffer->setSampleRate(this->sr);
        this->cycle_tilde_20_buffer->requestSize(16384, 1);
        this->cycle_tilde_20_buffer->setSampleRate(this->sr);
        this->cycle_tilde_21_buffer->requestSize(16384, 1);
        this->cycle_tilde_21_buffer->setSampleRate(this->sr);
        this->mtof_tilde_05_innerMtoF_buffer = this->mtof_tilde_05_innerMtoF_buffer->allocateIfNeeded();
        this->cycle_tilde_20_buffer = this->cycle_tilde_20_buffer->allocateIfNeeded();
        this->cycle_tilde_21_buffer = this->cycle_tilde_21_buffer->allocateIfNeeded();
    }
    
    void cycle_tilde_21_frequency_set(number v) {
        this->cycle_tilde_21_frequency = v;
    }
    
    void numberobj_42_output_set(number v) {
        this->cycle_tilde_21_frequency_set(v);
    }
    
    void numberobj_42_value_set(number v) {
        this->numberobj_42_value_setter(v);
        v = this->numberobj_42_value;
        number localvalue = v;
    
        if (this->numberobj_42_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("note[4]/number_obj-3"), localvalue, this->_currentTime);
        this->numberobj_42_output_set(localvalue);
    }
    
    void expr_29_out1_set(number v) {
        this->expr_29_out1 = v;
        this->numberobj_42_value_set(this->expr_29_out1);
    }
    
    void expr_29_in1_set(number in1) {
        this->expr_29_in1 = in1;
    
        this->expr_29_out1_set(
            (this->expr_29_in2 == 0 ? 0 : (this->expr_29_in2 == 0. ? 0. : this->expr_29_in1 / this->expr_29_in2))
        );//#map:note[4]//_obj-4:1
    }
    
    void random_10_result_set(number v) {
        this->expr_29_in1_set(v);
    }
    
    void random_10_trigger_bang() {
        this->random_10_result_set(rnbo_abs(this->random_10_nz_next()) * this->random_10_limit);
    }
    
    void cycle_tilde_20_frequency_set(number v) {
        this->cycle_tilde_20_frequency = v;
    }
    
    void numberobj_40_output_set(number v) {
        this->cycle_tilde_20_frequency_set(v);
    }
    
    void numberobj_40_value_set(number v) {
        this->numberobj_40_value_setter(v);
        v = this->numberobj_40_value;
        number localvalue = v;
    
        if (this->numberobj_40_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("note[4]/number_obj-12"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_40_output_set(localvalue);
    }
    
    void expr_27_out1_set(number v) {
        this->expr_27_out1 = v;
        this->numberobj_40_value_set(this->expr_27_out1);
    }
    
    void expr_27_in1_set(number in1) {
        this->expr_27_in1 = in1;
    
        this->expr_27_out1_set(
            (this->expr_27_in2 == 0 ? 0 : (this->expr_27_in2 == 0. ? 0. : this->expr_27_in1 / this->expr_27_in2))
        );//#map:note[4]//_obj-7:1
    }
    
    void random_09_result_set(number v) {
        this->expr_27_in1_set(v);
    }
    
    void random_09_trigger_bang() {
        this->random_09_result_set(rnbo_abs(this->random_09_nz_next()) * this->random_09_limit);
    }
    
    void button_05_output_bang() {
        this->random_10_trigger_bang();
        this->random_09_trigger_bang();
    }
    
    void button_05_bangval_bang() {
        this->getEngine()->sendBangMessage(TAG("bangout"), TAG("note[4]/button_obj-9"), this->_currentTime);;
        this->button_05_output_bang();
    }
    
    void receive_15_output_bang_bang() {
        this->button_05_bangval_bang();
    }
    
    void ip_15_value_set(number v) {
        this->ip_15_value = v;
        this->ip_15_fillSigBuf();
        this->ip_15_lastValue = v;
    }
    
    void expr_25_out1_set(number v) {
        this->expr_25_out1 = v;
        this->ip_15_value_set(this->expr_25_out1);
    }
    
    void expr_25_in1_set(number in1) {
        this->expr_25_in1 = in1;
    
        this->expr_25_out1_set(
            (this->expr_25_in2 == 0 ? 0 : (this->expr_25_in2 == 0. ? 0. : this->expr_25_in1 / this->expr_25_in2))
        );//#map:note[4]//_obj-28:1
    }
    
    void expr_25_in2_set(number v) {
        this->expr_25_in2 = v;
    }
    
    void receive_14_output_list_set(const list& v) {
        this->receive_14_output_list = jsCreateListCopy(v);
    
        {
            if (v->length > 1)
                this->expr_25_in2_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->expr_25_in1_set(converted);
        }
    }
    
    void mtof_tilde_05_midivalue_set(number v) {
        this->mtof_tilde_05_midivalue = v;
    }
    
    void receive_13_output_number_set(number v) {
        this->receive_13_output_number = v;
        this->mtof_tilde_05_midivalue_set(v);
    }
    
    void dspexpr_45_in2_set(number v) {
        this->dspexpr_45_in2 = v;
    }
    
    void eventinlet_13_out1_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->dspexpr_45_in2_set(converted);
        }
    }
    
    number param_33_value_constrain(number v) const {
        v = (v > 100 ? 100 : (v < 1 ? 1 : v));
        return v;
    }
    
    void ip_13_value_set(number v) {
        this->ip_13_value = v;
        this->ip_13_fillSigBuf();
        this->ip_13_lastValue = v;
    }
    
    number param_34_value_constrain(number v) const {
        v = (v > 20 ? 20 : (v < 1 ? 1 : v));
        return v;
    }
    
    void ip_14_value_set(number v) {
        this->ip_14_value = v;
        this->ip_14_fillSigBuf();
        this->ip_14_lastValue = v;
    }
    
    number param_35_value_constrain(number v) const {
        v = (v > 100 ? 100 : (v < 1 ? 1 : v));
        return v;
    }
    
    void dspexpr_44_in2_set(number v) {
        this->dspexpr_44_in2 = v;
    }
    
    void numberobj_39_output_set(number v) {
        this->dspexpr_44_in2_set(v);
    }
    
    void numberobj_39_value_set(number v) {
        this->numberobj_39_value_setter(v);
        v = this->numberobj_39_value;
        number localvalue = v;
    
        if (this->numberobj_39_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("note[4]/number_obj-76"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_39_output_set(localvalue);
    }
    
    void expr_26_out1_set(number v) {
        this->expr_26_out1 = v;
        this->numberobj_39_value_set(this->expr_26_out1);
    }
    
    void expr_26_in1_set(number in1) {
        this->expr_26_in1 = in1;
    
        this->expr_26_out1_set(
            (this->expr_26_in2 == 0 ? 0 : (this->expr_26_in2 == 0. ? 0. : this->expr_26_in1 / this->expr_26_in2))
        );//#map:note[4]//_obj-73:1
    }
    
    void expr_26_in2_set(number v) {
        this->expr_26_in2 = v;
    }
    
    void scale_16_out_set(const list& v) {
        this->scale_16_out = jsCreateListCopy(v);
    
        {
            if (v->length > 1)
                this->expr_26_in2_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->expr_26_in1_set(converted);
        }
    }
    
    void scale_16_input_set(const list& v) {
        this->scale_16_input = jsCreateListCopy(v);
        list tmp = {};
    
        for (Index i = 0; i < v->length; i++) {
            tmp->push(this->scale(
                v[(Index)i],
                this->scale_16_inlow,
                this->scale_16_inhigh,
                this->scale_16_outlow,
                this->scale_16_outhigh,
                this->scale_16_power
            ));
        }
    
        this->scale_16_out_set(tmp);
    }
    
    void loadbang_05_output_bang() {
        this->button_05_bangval_bang();
    }
    
    void numberobj_41_output_set(number v) {
        this->param_34_value_set(v);
    }
    
    void numberobj_41_value_set(number v) {
        this->numberobj_41_value_setter(v);
        v = this->numberobj_41_value;
        number localvalue = v;
    
        if (this->numberobj_41_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("note[4]/number_obj-20"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_41_output_set(localvalue);
    }
    
    void expr_28_out1_set(number v) {
        this->expr_28_out1 = v;
        this->numberobj_41_value_set(this->expr_28_out1);
    }
    
    void expr_28_in1_set(number in1) {
        this->expr_28_in1 = in1;
    
        this->expr_28_out1_set(
            (this->expr_28_in2 == 0 ? 0 : (this->expr_28_in2 == 0. ? 0. : this->expr_28_in1 / this->expr_28_in2))
        );//#map:note[4]//_obj-13:1
    }
    
    void expr_28_in2_set(number v) {
        this->expr_28_in2 = v;
    }
    
    void scale_17_out_set(const list& v) {
        this->scale_17_out = jsCreateListCopy(v);
    
        {
            if (v->length > 1)
                this->expr_28_in2_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->expr_28_in1_set(converted);
        }
    }
    
    void scale_17_input_set(const list& v) {
        this->scale_17_input = jsCreateListCopy(v);
        list tmp = {};
    
        for (Index i = 0; i < v->length; i++) {
            tmp->push(this->scale(
                v[(Index)i],
                this->scale_17_inlow,
                this->scale_17_inhigh,
                this->scale_17_outlow,
                this->scale_17_outhigh,
                this->scale_17_power
            ));
        }
    
        this->scale_17_out_set(tmp);
    }
    
    void mtof_tilde_05_perform(number midivalue, SampleValue * out, Index n) {
        auto __mtof_tilde_05_base = this->mtof_tilde_05_base;
    
        for (Index i = 0; i < n; i++) {
            out[(Index)i] = this->mtof_tilde_05_innerMtoF_next(midivalue, __mtof_tilde_05_base);
        }
    }
    
    void dspexpr_45_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2;//#map:_###_obj_###_:1
        }
    }
    
    void ip_13_perform(SampleValue * out, Index n) {
        auto __ip_13_lastValue = this->ip_13_lastValue;
        auto __ip_13_lastIndex = this->ip_13_lastIndex;
    
        for (Index i = 0; i < n; i++) {
            out[(Index)i] = ((SampleIndex)(i) >= __ip_13_lastIndex ? __ip_13_lastValue : this->ip_13_sigbuf[(Index)i]);
        }
    
        __ip_13_lastIndex = 0;
        this->ip_13_lastIndex = __ip_13_lastIndex;
    }
    
    void ip_14_perform(SampleValue * out, Index n) {
        auto __ip_14_lastValue = this->ip_14_lastValue;
        auto __ip_14_lastIndex = this->ip_14_lastIndex;
    
        for (Index i = 0; i < n; i++) {
            out[(Index)i] = ((SampleIndex)(i) >= __ip_14_lastIndex ? __ip_14_lastValue : this->ip_14_sigbuf[(Index)i]);
        }
    
        __ip_14_lastIndex = 0;
        this->ip_14_lastIndex = __ip_14_lastIndex;
    }
    
    void p_12_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        const SampleValue * in3,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        ConstSampleArray<3> ins = {in1, in2, in3};
        SampleArray<2> outs = {out1, out2};
        this->p_12->process(ins, 3, outs, 2, n);
    }
    
    void ip_15_perform(SampleValue * out, Index n) {
        auto __ip_15_lastValue = this->ip_15_lastValue;
        auto __ip_15_lastIndex = this->ip_15_lastIndex;
    
        for (Index i = 0; i < n; i++) {
            out[(Index)i] = ((SampleIndex)(i) >= __ip_15_lastIndex ? __ip_15_lastValue : this->ip_15_sigbuf[(Index)i]);
        }
    
        __ip_15_lastIndex = 0;
        this->ip_15_lastIndex = __ip_15_lastIndex;
    }
    
    void p_13_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        // subpatcher: env.adsr
        ConstSampleArray<2> ins = {in1, in2};
    
        SampleArray<2> outs = {out1, out2};
        this->p_13->process(ins, 2, outs, 2, n);
    }
    
    void dspexpr_44_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2;//#map:_###_obj_###_:1
        }
    }
    
    void cycle_tilde_20_perform(
        number frequency,
        number phase_offset,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        RNBO_UNUSED(phase_offset);
        auto __cycle_tilde_20_f2i = this->cycle_tilde_20_f2i;
        auto __cycle_tilde_20_buffer = this->cycle_tilde_20_buffer;
        auto __cycle_tilde_20_phasei = this->cycle_tilde_20_phasei;
        Index i;
    
        for (i = 0; i < n; i++) {
            {
                uint32_t uint_phase;
    
                {
                    {
                        uint_phase = __cycle_tilde_20_phasei;
                    }
                }
    
                uint32_t idx = (uint32_t)(uint32_rshift(uint_phase, 18));
                number frac = ((BinOpInt)((BinOpInt)uint_phase & (BinOpInt)262143)) * 3.81471181759574e-6;
                number y0 = __cycle_tilde_20_buffer[(Index)idx];
                number y1 = __cycle_tilde_20_buffer[(Index)((BinOpInt)(idx + 1) & (BinOpInt)16383)];
                number y = y0 + frac * (y1 - y0);
    
                {
                    uint32_t pincr = (uint32_t)(uint32_trunc(frequency * __cycle_tilde_20_f2i));
                    __cycle_tilde_20_phasei = uint32_add(__cycle_tilde_20_phasei, pincr);
                }
    
                out1[(Index)i] = y;
                out2[(Index)i] = uint_phase * 0.232830643653869629e-9;
                continue;
            }
        }
    
        this->cycle_tilde_20_phasei = __cycle_tilde_20_phasei;
    }
    
    void snapshot_09_perform(const SampleValue * input_signal, Index n) {
        auto __snapshot_09_lastValue = this->snapshot_09_lastValue;
        auto __snapshot_09_calc = this->snapshot_09_calc;
        auto __snapshot_09_count = this->snapshot_09_count;
        auto __snapshot_09_nextTime = this->snapshot_09_nextTime;
        auto __snapshot_09_interval = this->snapshot_09_interval;
        number timeInSamples = this->msToSamps(__snapshot_09_interval, this->sr);
    
        if (__snapshot_09_interval > 0) {
            for (Index i = 0; i < n; i++) {
                if (__snapshot_09_nextTime <= __snapshot_09_count + (SampleIndex)(i)) {
                    {
                        __snapshot_09_calc = input_signal[(Index)i];
                    }
    
                    this->getEngine()->scheduleClockEventWithValue(
                        this,
                        -1508480176,
                        this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                        __snapshot_09_calc
                    );;
    
                    __snapshot_09_calc = 0;
                    __snapshot_09_nextTime += timeInSamples;
                }
            }
    
            __snapshot_09_count += this->vs;
        }
    
        __snapshot_09_lastValue = input_signal[(Index)(n - 1)];
        this->snapshot_09_nextTime = __snapshot_09_nextTime;
        this->snapshot_09_count = __snapshot_09_count;
        this->snapshot_09_calc = __snapshot_09_calc;
        this->snapshot_09_lastValue = __snapshot_09_lastValue;
    }
    
    void cycle_tilde_21_perform(
        number frequency,
        number phase_offset,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        RNBO_UNUSED(phase_offset);
        auto __cycle_tilde_21_f2i = this->cycle_tilde_21_f2i;
        auto __cycle_tilde_21_buffer = this->cycle_tilde_21_buffer;
        auto __cycle_tilde_21_phasei = this->cycle_tilde_21_phasei;
        Index i;
    
        for (i = 0; i < n; i++) {
            {
                uint32_t uint_phase;
    
                {
                    {
                        uint_phase = __cycle_tilde_21_phasei;
                    }
                }
    
                uint32_t idx = (uint32_t)(uint32_rshift(uint_phase, 18));
                number frac = ((BinOpInt)((BinOpInt)uint_phase & (BinOpInt)262143)) * 3.81471181759574e-6;
                number y0 = __cycle_tilde_21_buffer[(Index)idx];
                number y1 = __cycle_tilde_21_buffer[(Index)((BinOpInt)(idx + 1) & (BinOpInt)16383)];
                number y = y0 + frac * (y1 - y0);
    
                {
                    uint32_t pincr = (uint32_t)(uint32_trunc(frequency * __cycle_tilde_21_f2i));
                    __cycle_tilde_21_phasei = uint32_add(__cycle_tilde_21_phasei, pincr);
                }
    
                out1[(Index)i] = y;
                out2[(Index)i] = uint_phase * 0.232830643653869629e-9;
                continue;
            }
        }
    
        this->cycle_tilde_21_phasei = __cycle_tilde_21_phasei;
    }
    
    void snapshot_10_perform(const SampleValue * input_signal, Index n) {
        auto __snapshot_10_lastValue = this->snapshot_10_lastValue;
        auto __snapshot_10_calc = this->snapshot_10_calc;
        auto __snapshot_10_count = this->snapshot_10_count;
        auto __snapshot_10_nextTime = this->snapshot_10_nextTime;
        auto __snapshot_10_interval = this->snapshot_10_interval;
        number timeInSamples = this->msToSamps(__snapshot_10_interval, this->sr);
    
        if (__snapshot_10_interval > 0) {
            for (Index i = 0; i < n; i++) {
                if (__snapshot_10_nextTime <= __snapshot_10_count + (SampleIndex)(i)) {
                    {
                        __snapshot_10_calc = input_signal[(Index)i];
                    }
    
                    this->getEngine()->scheduleClockEventWithValue(
                        this,
                        1646922831,
                        this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                        __snapshot_10_calc
                    );;
    
                    __snapshot_10_calc = 0;
                    __snapshot_10_nextTime += timeInSamples;
                }
            }
    
            __snapshot_10_count += this->vs;
        }
    
        __snapshot_10_lastValue = input_signal[(Index)(n - 1)];
        this->snapshot_10_nextTime = __snapshot_10_nextTime;
        this->snapshot_10_count = __snapshot_10_count;
        this->snapshot_10_calc = __snapshot_10_calc;
        this->snapshot_10_lastValue = __snapshot_10_lastValue;
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    void numberobj_39_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_39_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_39_value = localvalue;
    }
    
    void numberobj_40_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_40_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_40_value = localvalue;
    }
    
    void random_09_limit_setter(number v) {
        if (v >= 0)
            this->random_09_limit = v;
    }
    
    void numberobj_41_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_41_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_41_value = localvalue;
    }
    
    void numberobj_42_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_42_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_42_value = localvalue;
    }
    
    void random_10_limit_setter(number v) {
        if (v >= 0)
            this->random_10_limit = v;
    }
    
    number mtof_tilde_05_innerMtoF_next(number midivalue, number tuning) {
        if (midivalue == this->mtof_tilde_05_innerMtoF_lastInValue && tuning == this->mtof_tilde_05_innerMtoF_lastTuning)
            return this->mtof_tilde_05_innerMtoF_lastOutValue;
    
        this->mtof_tilde_05_innerMtoF_lastInValue = midivalue;
        this->mtof_tilde_05_innerMtoF_lastTuning = tuning;
        number result = 0;
    
        {
            result = rnbo_exp(.057762265 * (midivalue - 69.0));
        }
    
        this->mtof_tilde_05_innerMtoF_lastOutValue = tuning * result;
        return this->mtof_tilde_05_innerMtoF_lastOutValue;
    }
    
    void mtof_tilde_05_innerMtoF_reset() {
        this->mtof_tilde_05_innerMtoF_lastInValue = 0;
        this->mtof_tilde_05_innerMtoF_lastOutValue = 0;
        this->mtof_tilde_05_innerMtoF_lastTuning = 0;
    }
    
    void mtof_tilde_05_innerScala_mid(int v) {
        this->mtof_tilde_05_innerScala_kbmMid = v;
        this->mtof_tilde_05_innerScala_updateRefFreq();
    }
    
    void mtof_tilde_05_innerScala_ref(int v) {
        this->mtof_tilde_05_innerScala_kbmRefNum = v;
        this->mtof_tilde_05_innerScala_updateRefFreq();
    }
    
    void mtof_tilde_05_innerScala_base(number v) {
        this->mtof_tilde_05_innerScala_kbmRefFreq = v;
        this->mtof_tilde_05_innerScala_updateRefFreq();
    }
    
    void mtof_tilde_05_innerScala_init() {
        list sclValid = {
            12,
            100,
            0,
            200,
            0,
            300,
            0,
            400,
            0,
            500,
            0,
            600,
            0,
            700,
            0,
            800,
            0,
            900,
            0,
            1000,
            0,
            1100,
            0,
            2,
            1
        };
    
        this->mtof_tilde_05_innerScala_updateScale(sclValid);
    }
    
    void mtof_tilde_05_innerScala_update(list scale, list map) {
        if (scale->length > 0) {
            this->mtof_tilde_05_innerScala_updateScale(scale);
        }
    
        if (map->length > 0) {
            this->mtof_tilde_05_innerScala_updateMap(map);
        }
    }
    
    number mtof_tilde_05_innerScala_mtof(number note) {
        if ((bool)(this->mtof_tilde_05_innerScala_lastValid) && this->mtof_tilde_05_innerScala_lastNote == note) {
            return this->mtof_tilde_05_innerScala_lastFreq;
        }
    
        array<int, 2> degoct = this->mtof_tilde_05_innerScala_applyKBM(note);
        number out = 0;
    
        if (degoct[1] > 0) {
            out = this->mtof_tilde_05_innerScala_applySCL(degoct[0], fract(note), this->mtof_tilde_05_innerScala_refFreq);
        }
    
        this->mtof_tilde_05_innerScala_updateLast(note, out);
        return out;
    }
    
    number mtof_tilde_05_innerScala_ftom(number hz) {
        if (hz <= 0.0) {
            return 0.0;
        }
    
        if ((bool)(this->mtof_tilde_05_innerScala_lastValid) && this->mtof_tilde_05_innerScala_lastFreq == hz) {
            return this->mtof_tilde_05_innerScala_lastNote;
        }
    
        array<number, 2> df = this->mtof_tilde_05_innerScala_hztodeg(hz);
        int degree = (int)(df[0]);
        number frac = df[1];
        number out = 0;
    
        if (this->mtof_tilde_05_innerScala_kbmSize == 0) {
            out = this->mtof_tilde_05_innerScala_kbmMid + degree;
        } else {
            array<int, 2> octdeg = this->mtof_tilde_05_innerScala_octdegree(degree, this->mtof_tilde_05_innerScala_kbmOctaveDegree);
            number oct = (number)(octdeg[0]);
            int index = (int)(octdeg[1]);
            Index entry = 0;
    
            for (Index i = 0; i < this->mtof_tilde_05_innerScala_kbmMapSize; i++) {
                if (index == this->mtof_tilde_05_innerScala_kbmValid[(Index)(i + this->mtof_tilde_05_innerScala_KBM_MAP_OFFSET)]) {
                    entry = i;
                    break;
                }
            }
    
            out = oct * this->mtof_tilde_05_innerScala_kbmSize + entry + this->mtof_tilde_05_innerScala_kbmMid;
        }
    
        out = out + frac;
        this->mtof_tilde_05_innerScala_updateLast(out, hz);
        return this->mtof_tilde_05_innerScala_lastNote;
    }
    
    int mtof_tilde_05_innerScala_updateScale(list scl) {
        if (scl->length < 1) {
            return 0;
        }
    
        number sclDataEntries = scl[0] * 2 + 1;
    
        if (sclDataEntries <= scl->length) {
            this->mtof_tilde_05_innerScala_lastValid = false;
            this->mtof_tilde_05_innerScala_sclExpMul = {};
            number last = 1;
    
            for (Index i = 1; i < sclDataEntries; i += 2) {
                const number c = (const number)(scl[(Index)(i + 0)]);
                const number d = (const number)(scl[(Index)(i + 1)]);
    
                if (d <= 0) {
                    last = c / (number)1200;
                } else {
                    last = rnbo_log2(c / d);
                }
    
                this->mtof_tilde_05_innerScala_sclExpMul->push(last);
            }
    
            this->mtof_tilde_05_innerScala_sclOctaveMul = last;
            this->mtof_tilde_05_innerScala_sclEntryCount = (int)(this->mtof_tilde_05_innerScala_sclExpMul->length);
    
            if (scl->length >= sclDataEntries + 3) {
                this->mtof_tilde_05_innerScala_kbmMid = (int)(scl[(Index)(sclDataEntries + 2)]);
                this->mtof_tilde_05_innerScala_kbmRefNum = (int)(scl[(Index)(sclDataEntries + 1)]);
                this->mtof_tilde_05_innerScala_kbmRefFreq = scl[(Index)(sclDataEntries + 0)];
                this->mtof_tilde_05_innerScala_kbmSize = (int)(0);
            }
    
            this->mtof_tilde_05_innerScala_updateRefFreq();
            return 1;
        }
    
        return 0;
    }
    
    int mtof_tilde_05_innerScala_updateMap(list kbm) {
        if (kbm->length == 1 && kbm[0] == 0.0) {
            kbm = {0.0, 0.0, 0.0, 60.0, 69.0, 440.0};
        }
    
        if (kbm->length >= 6 && kbm[0] >= 0.0) {
            this->mtof_tilde_05_innerScala_lastValid = false;
            Index size = (Index)(kbm[0]);
            int octave = 12;
    
            if (kbm->length > 6) {
                octave = (int)(kbm[6]);
            }
    
            if (size > 0 && kbm->length < this->mtof_tilde_05_innerScala_KBM_MAP_OFFSET) {
                return 0;
            }
    
            this->mtof_tilde_05_innerScala_kbmSize = (int)(size);
            this->mtof_tilde_05_innerScala_kbmMin = (int)(kbm[1]);
            this->mtof_tilde_05_innerScala_kbmMax = (int)(kbm[2]);
            this->mtof_tilde_05_innerScala_kbmMid = (int)(kbm[3]);
            this->mtof_tilde_05_innerScala_kbmRefNum = (int)(kbm[4]);
            this->mtof_tilde_05_innerScala_kbmRefFreq = kbm[5];
            this->mtof_tilde_05_innerScala_kbmOctaveDegree = octave;
            this->mtof_tilde_05_innerScala_kbmValid = kbm;
            this->mtof_tilde_05_innerScala_kbmMapSize = (kbm->length - this->mtof_tilde_05_innerScala_KBM_MAP_OFFSET > kbm->length ? kbm->length : (kbm->length - this->mtof_tilde_05_innerScala_KBM_MAP_OFFSET < 0 ? 0 : kbm->length - this->mtof_tilde_05_innerScala_KBM_MAP_OFFSET));
            this->mtof_tilde_05_innerScala_updateRefFreq();
            return 1;
        }
    
        return 0;
    }
    
    void mtof_tilde_05_innerScala_updateLast(number note, number freq) {
        this->mtof_tilde_05_innerScala_lastValid = true;
        this->mtof_tilde_05_innerScala_lastNote = note;
        this->mtof_tilde_05_innerScala_lastFreq = freq;
    }
    
    array<number, 2> mtof_tilde_05_innerScala_hztodeg(number hz) {
        number hza = rnbo_abs(hz);
    
        number octave = rnbo_floor(
            rnbo_log2(hza / this->mtof_tilde_05_innerScala_refFreq) / this->mtof_tilde_05_innerScala_sclOctaveMul
        );
    
        int i = 0;
        number frac = 0;
        number n = 0;
    
        for (; i < this->mtof_tilde_05_innerScala_sclEntryCount; i++) {
            number c = this->mtof_tilde_05_innerScala_applySCLOctIndex(octave, i + 0, 0.0, this->mtof_tilde_05_innerScala_refFreq);
            n = this->mtof_tilde_05_innerScala_applySCLOctIndex(octave, i + 1, 0.0, this->mtof_tilde_05_innerScala_refFreq);
    
            if (c <= hza && hza < n) {
                if (c != hza) {
                    frac = rnbo_log2(hza / c) / rnbo_log2(n / c);
                }
    
                break;
            }
        }
    
        if (i == this->mtof_tilde_05_innerScala_sclEntryCount && n != hza) {
            number c = n;
            n = this->mtof_tilde_05_innerScala_applySCLOctIndex(octave + 1, 0, 0.0, this->mtof_tilde_05_innerScala_refFreq);
            frac = rnbo_log2(hza / c) / rnbo_log2(n / c);
        }
    
        number deg = i + octave * this->mtof_tilde_05_innerScala_sclEntryCount;
    
        {
            deg = rnbo_fround((deg + frac) * 1 / (number)1) * 1;
            frac = 0.0;
        }
    
        return {deg, frac};
    }
    
    array<int, 2> mtof_tilde_05_innerScala_octdegree(int degree, int count) {
        int octave = 0;
        int index = 0;
    
        if (degree < 0) {
            octave = -(1 + (-1 - degree) / count);
            index = -degree % count;
    
            if (index > 0) {
                index = count - index;
            }
        } else {
            octave = degree / count;
            index = degree % count;
        }
    
        return {octave, index};
    }
    
    array<int, 2> mtof_tilde_05_innerScala_applyKBM(number note) {
        if ((this->mtof_tilde_05_innerScala_kbmMin == this->mtof_tilde_05_innerScala_kbmMax && this->mtof_tilde_05_innerScala_kbmMax == 0) || (note >= this->mtof_tilde_05_innerScala_kbmMin && note <= this->mtof_tilde_05_innerScala_kbmMax)) {
            int degree = (int)(rnbo_floor(note - this->mtof_tilde_05_innerScala_kbmMid));
    
            if (this->mtof_tilde_05_innerScala_kbmSize == 0) {
                return {degree, 1};
            }
    
            array<int, 2> octdeg = this->mtof_tilde_05_innerScala_octdegree(degree, this->mtof_tilde_05_innerScala_kbmSize);
            int octave = (int)(octdeg[0]);
            Index index = (Index)(octdeg[1]);
    
            if (this->mtof_tilde_05_innerScala_kbmMapSize > index) {
                degree = (int)(this->mtof_tilde_05_innerScala_kbmValid[(Index)(this->mtof_tilde_05_innerScala_KBM_MAP_OFFSET + index)]);
    
                if (degree >= 0) {
                    return {degree + octave * this->mtof_tilde_05_innerScala_kbmOctaveDegree, 1};
                }
            }
        }
    
        return {-1, 0};
    }
    
    number mtof_tilde_05_innerScala_applySCL(int degree, number frac, number refFreq) {
        array<int, 2> octdeg = this->mtof_tilde_05_innerScala_octdegree(degree, this->mtof_tilde_05_innerScala_sclEntryCount);
        return this->mtof_tilde_05_innerScala_applySCLOctIndex(octdeg[0], octdeg[1], frac, refFreq);
    }
    
    number mtof_tilde_05_innerScala_applySCLOctIndex(number octave, int index, number frac, number refFreq) {
        number p = 0;
    
        if (index > 0) {
            p = this->mtof_tilde_05_innerScala_sclExpMul[(Index)(index - 1)];
        }
    
        if (frac > 0) {
            p = this->linearinterp(frac, p, this->mtof_tilde_05_innerScala_sclExpMul[(Index)index]);
        } else if (frac < 0) {
            p = this->linearinterp(-frac, this->mtof_tilde_05_innerScala_sclExpMul[(Index)index], p);
        }
    
        return refFreq * rnbo_pow(2, p + octave * this->mtof_tilde_05_innerScala_sclOctaveMul);
    }
    
    void mtof_tilde_05_innerScala_updateRefFreq() {
        this->mtof_tilde_05_innerScala_lastValid = false;
        int refOffset = (int)(this->mtof_tilde_05_innerScala_kbmRefNum - this->mtof_tilde_05_innerScala_kbmMid);
    
        if (refOffset == 0) {
            this->mtof_tilde_05_innerScala_refFreq = this->mtof_tilde_05_innerScala_kbmRefFreq;
        } else {
            int base = (int)(this->mtof_tilde_05_innerScala_kbmSize);
    
            if (base < 1) {
                base = this->mtof_tilde_05_innerScala_sclEntryCount;
            }
    
            array<int, 2> octdeg = this->mtof_tilde_05_innerScala_octdegree(refOffset, base);
            number oct = (number)(octdeg[0]);
            int index = (int)(octdeg[1]);
    
            if (base > 0) {
                oct = oct + rnbo_floor(index / base);
                index = index % base;
            }
    
            if (index >= 0 && index < this->mtof_tilde_05_innerScala_kbmSize) {
                if (index < this->mtof_tilde_05_innerScala_kbmMapSize) {
                    index = (int)(this->mtof_tilde_05_innerScala_kbmValid[(Index)((Index)(index) + this->mtof_tilde_05_innerScala_KBM_MAP_OFFSET)]);
                } else {
                    index = -1;
                }
            }
    
            if (index < 0 || index > this->mtof_tilde_05_innerScala_sclExpMul->length)
                {} else {
                number p = 0;
    
                if (index > 0) {
                    p = this->mtof_tilde_05_innerScala_sclExpMul[(Index)(index - 1)];
                }
    
                this->mtof_tilde_05_innerScala_refFreq = this->mtof_tilde_05_innerScala_kbmRefFreq / rnbo_pow(2, p + oct * this->mtof_tilde_05_innerScala_sclOctaveMul);
            }
        }
    }
    
    void mtof_tilde_05_innerScala_reset() {
        this->mtof_tilde_05_innerScala_lastValid = false;
        this->mtof_tilde_05_innerScala_lastNote = 0;
        this->mtof_tilde_05_innerScala_lastFreq = 0;
        this->mtof_tilde_05_innerScala_sclEntryCount = 0;
        this->mtof_tilde_05_innerScala_sclOctaveMul = 1;
        this->mtof_tilde_05_innerScala_sclExpMul = {};
        this->mtof_tilde_05_innerScala_kbmValid = {0, 0, 0, 60, 69, 440};
        this->mtof_tilde_05_innerScala_kbmMid = 60;
        this->mtof_tilde_05_innerScala_kbmRefNum = 69;
        this->mtof_tilde_05_innerScala_kbmRefFreq = 440;
        this->mtof_tilde_05_innerScala_kbmSize = 0;
        this->mtof_tilde_05_innerScala_kbmMin = 0;
        this->mtof_tilde_05_innerScala_kbmMax = 0;
        this->mtof_tilde_05_innerScala_kbmOctaveDegree = 12;
        this->mtof_tilde_05_innerScala_kbmMapSize = 0;
        this->mtof_tilde_05_innerScala_refFreq = 261.63;
    }
    
    void mtof_tilde_05_init() {
        this->mtof_tilde_05_innerScala_update(this->mtof_tilde_05_scale, this->mtof_tilde_05_map);
    }
    
    void param_33_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_33_value;
    }
    
    void param_33_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_33_value_set(preset["value"]);
    }
    
    void ip_13_init() {
        this->ip_13_lastValue = this->ip_13_value;
    }
    
    void ip_13_fillSigBuf() {
        if ((bool)(this->ip_13_sigbuf)) {
            SampleIndex k = (SampleIndex)(this->sampleOffsetIntoNextAudioBuffer);
    
            if (k >= (SampleIndex)(this->vs))
                k = (SampleIndex)(this->vs) - 1;
    
            for (SampleIndex i = (SampleIndex)(this->ip_13_lastIndex); i < k; i++) {
                if (this->ip_13_resetCount > 0) {
                    this->ip_13_sigbuf[(Index)i] = 1;
                    this->ip_13_resetCount--;
                } else {
                    this->ip_13_sigbuf[(Index)i] = this->ip_13_lastValue;
                }
            }
    
            this->ip_13_lastIndex = k;
        }
    }
    
    void ip_13_dspsetup(bool force) {
        if ((bool)(this->ip_13_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->ip_13_lastIndex = 0;
        this->ip_13_setupDone = true;
    }
    
    void param_34_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_34_value;
    }
    
    void param_34_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_34_value_set(preset["value"]);
    }
    
    void ip_14_init() {
        this->ip_14_lastValue = this->ip_14_value;
    }
    
    void ip_14_fillSigBuf() {
        if ((bool)(this->ip_14_sigbuf)) {
            SampleIndex k = (SampleIndex)(this->sampleOffsetIntoNextAudioBuffer);
    
            if (k >= (SampleIndex)(this->vs))
                k = (SampleIndex)(this->vs) - 1;
    
            for (SampleIndex i = (SampleIndex)(this->ip_14_lastIndex); i < k; i++) {
                if (this->ip_14_resetCount > 0) {
                    this->ip_14_sigbuf[(Index)i] = 1;
                    this->ip_14_resetCount--;
                } else {
                    this->ip_14_sigbuf[(Index)i] = this->ip_14_lastValue;
                }
            }
    
            this->ip_14_lastIndex = k;
        }
    }
    
    void ip_14_dspsetup(bool force) {
        if ((bool)(this->ip_14_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->ip_14_lastIndex = 0;
        this->ip_14_setupDone = true;
    }
    
    void ip_15_init() {
        this->ip_15_lastValue = this->ip_15_value;
    }
    
    void ip_15_fillSigBuf() {
        if ((bool)(this->ip_15_sigbuf)) {
            SampleIndex k = (SampleIndex)(this->sampleOffsetIntoNextAudioBuffer);
    
            if (k >= (SampleIndex)(this->vs))
                k = (SampleIndex)(this->vs) - 1;
    
            for (SampleIndex i = (SampleIndex)(this->ip_15_lastIndex); i < k; i++) {
                if (this->ip_15_resetCount > 0) {
                    this->ip_15_sigbuf[(Index)i] = 1;
                    this->ip_15_resetCount--;
                } else {
                    this->ip_15_sigbuf[(Index)i] = this->ip_15_lastValue;
                }
            }
    
            this->ip_15_lastIndex = k;
        }
    }
    
    void ip_15_dspsetup(bool force) {
        if ((bool)(this->ip_15_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->ip_15_lastIndex = 0;
        this->ip_15_setupDone = true;
    }
    
    void param_35_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_35_value;
    }
    
    void param_35_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_35_value_set(preset["value"]);
    }
    
    void numberobj_39_init() {
        this->numberobj_39_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("note[4]/number_obj-76"), 1, this->_currentTime);
    }
    
    void numberobj_39_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_39_value;
    }
    
    void numberobj_39_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_39_value_set(preset["value"]);
    }
    
    number cycle_tilde_20_ph_next(number freq, number reset) {
        {
            {
                if (reset >= 0.)
                    this->cycle_tilde_20_ph_currentPhase = reset;
            }
        }
    
        number pincr = freq * this->cycle_tilde_20_ph_conv;
    
        if (this->cycle_tilde_20_ph_currentPhase < 0.)
            this->cycle_tilde_20_ph_currentPhase = 1. + this->cycle_tilde_20_ph_currentPhase;
    
        if (this->cycle_tilde_20_ph_currentPhase > 1.)
            this->cycle_tilde_20_ph_currentPhase = this->cycle_tilde_20_ph_currentPhase - 1.;
    
        number tmp = this->cycle_tilde_20_ph_currentPhase;
        this->cycle_tilde_20_ph_currentPhase += pincr;
        return tmp;
    }
    
    void cycle_tilde_20_ph_reset() {
        this->cycle_tilde_20_ph_currentPhase = 0;
    }
    
    void cycle_tilde_20_ph_dspsetup() {
        this->cycle_tilde_20_ph_conv = (number)1 / this->sr;
    }
    
    void cycle_tilde_20_dspsetup(bool force) {
        if ((bool)(this->cycle_tilde_20_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->cycle_tilde_20_phasei = 0;
        this->cycle_tilde_20_f2i = (number)4294967296 / this->samplerate();
        this->cycle_tilde_20_wrap = (long)(this->cycle_tilde_20_buffer->getSize()) - 1;
        this->cycle_tilde_20_setupDone = true;
        this->cycle_tilde_20_ph_dspsetup();
    }
    
    void cycle_tilde_20_bufferUpdated() {
        this->cycle_tilde_20_wrap = (long)(this->cycle_tilde_20_buffer->getSize()) - 1;
    }
    
    void numberobj_40_init() {
        this->numberobj_40_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("note[4]/number_obj-12"), 1, this->_currentTime);
    }
    
    void numberobj_40_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_40_value;
    }
    
    void numberobj_40_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_40_value_set(preset["value"]);
    }
    
    void random_09_nz_reset() {
        xoshiro_reset(
            systemticks() + this->voice() + this->random(0, 10000),
            this->random_09_nz_state
        );
    }
    
    void random_09_nz_init() {
        this->random_09_nz_reset();
    }
    
    void random_09_nz_seed(number v) {
        xoshiro_reset(v, this->random_09_nz_state);
    }
    
    number random_09_nz_next() {
        return xoshiro_next(this->random_09_nz_state);
    }
    
    void numberobj_41_init() {
        this->numberobj_41_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("note[4]/number_obj-20"), 1, this->_currentTime);
    }
    
    void numberobj_41_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_41_value;
    }
    
    void numberobj_41_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_41_value_set(preset["value"]);
    }
    
    number cycle_tilde_21_ph_next(number freq, number reset) {
        {
            {
                if (reset >= 0.)
                    this->cycle_tilde_21_ph_currentPhase = reset;
            }
        }
    
        number pincr = freq * this->cycle_tilde_21_ph_conv;
    
        if (this->cycle_tilde_21_ph_currentPhase < 0.)
            this->cycle_tilde_21_ph_currentPhase = 1. + this->cycle_tilde_21_ph_currentPhase;
    
        if (this->cycle_tilde_21_ph_currentPhase > 1.)
            this->cycle_tilde_21_ph_currentPhase = this->cycle_tilde_21_ph_currentPhase - 1.;
    
        number tmp = this->cycle_tilde_21_ph_currentPhase;
        this->cycle_tilde_21_ph_currentPhase += pincr;
        return tmp;
    }
    
    void cycle_tilde_21_ph_reset() {
        this->cycle_tilde_21_ph_currentPhase = 0;
    }
    
    void cycle_tilde_21_ph_dspsetup() {
        this->cycle_tilde_21_ph_conv = (number)1 / this->sr;
    }
    
    void cycle_tilde_21_dspsetup(bool force) {
        if ((bool)(this->cycle_tilde_21_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->cycle_tilde_21_phasei = 0;
        this->cycle_tilde_21_f2i = (number)4294967296 / this->samplerate();
        this->cycle_tilde_21_wrap = (long)(this->cycle_tilde_21_buffer->getSize()) - 1;
        this->cycle_tilde_21_setupDone = true;
        this->cycle_tilde_21_ph_dspsetup();
    }
    
    void cycle_tilde_21_bufferUpdated() {
        this->cycle_tilde_21_wrap = (long)(this->cycle_tilde_21_buffer->getSize()) - 1;
    }
    
    void numberobj_42_init() {
        this->numberobj_42_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("note[4]/number_obj-3"), 1, this->_currentTime);
    }
    
    void numberobj_42_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_42_value;
    }
    
    void numberobj_42_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_42_value_set(preset["value"]);
    }
    
    void random_10_nz_reset() {
        xoshiro_reset(
            systemticks() + this->voice() + this->random(0, 10000),
            this->random_10_nz_state
        );
    }
    
    void random_10_nz_init() {
        this->random_10_nz_reset();
    }
    
    void random_10_nz_seed(number v) {
        xoshiro_reset(v, this->random_10_nz_state);
    }
    
    number random_10_nz_next() {
        return xoshiro_next(this->random_10_nz_state);
    }
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        mtof_tilde_05_midivalue = 0;
        mtof_tilde_05_base = 440;
        receive_13_output_number = 0;
        dspexpr_44_in1 = 0;
        dspexpr_44_in2 = 0;
        p_12_target = 0;
        dspexpr_45_in1 = 0;
        dspexpr_45_in2 = 1;
        p_13_target = 0;
        param_33_value = 1;
        ip_13_value = 0;
        ip_13_impulse = 0;
        param_34_value = 1;
        ip_14_value = 0;
        ip_14_impulse = 0;
        receive_14_output_number = 0;
        expr_25_in1 = 0;
        expr_25_in2 = 127;
        expr_25_out1 = 0;
        ip_15_value = 0;
        ip_15_impulse = 0;
        param_35_value = 1;
        numberobj_39_value = 0;
        numberobj_39_value_setter(numberobj_39_value);
        expr_26_in1 = 0;
        expr_26_in2 = 100;
        expr_26_out1 = 0;
        scale_16_inlow = -1;
        scale_16_inhigh = 1;
        scale_16_outlow = 1;
        scale_16_outhigh = 100;
        scale_16_power = 1;
        cycle_tilde_20_frequency = 0.001;
        cycle_tilde_20_phase_offset = 0;
        snapshot_09_interval = 20;
        snapshot_09_out = 0;
        numberobj_40_value = 0;
        numberobj_40_value_setter(numberobj_40_value);
        expr_27_in1 = 0;
        expr_27_in2 = 10000;
        expr_27_out1 = 0;
        random_09_limit = 100;
        random_09_limit_setter(random_09_limit);
        random_09_seed = 0;
        receive_15_output_number = 0;
        numberobj_41_value = 0;
        numberobj_41_value_setter(numberobj_41_value);
        expr_28_in1 = 0;
        expr_28_in2 = 100;
        expr_28_out1 = 0;
        scale_17_inlow = -1;
        scale_17_inhigh = 1;
        scale_17_outlow = 1;
        scale_17_outhigh = 500;
        scale_17_power = 1;
        snapshot_10_interval = 20;
        snapshot_10_out = 0;
        cycle_tilde_21_frequency = 0.001;
        cycle_tilde_21_phase_offset = 0;
        numberobj_42_value = 0;
        numberobj_42_value_setter(numberobj_42_value);
        expr_29_in1 = 0;
        expr_29_in2 = 10000;
        expr_29_out1 = 0;
        random_10_limit = 100;
        random_10_limit_setter(random_10_limit);
        random_10_seed = 0;
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        signals[0] = nullptr;
        signals[1] = nullptr;
        signals[2] = nullptr;
        signals[3] = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        mtof_tilde_05_innerMtoF_lastInValue = 0;
        mtof_tilde_05_innerMtoF_lastOutValue = 0;
        mtof_tilde_05_innerMtoF_lastTuning = 0;
        mtof_tilde_05_innerScala_lastValid = false;
        mtof_tilde_05_innerScala_lastNote = 0;
        mtof_tilde_05_innerScala_lastFreq = 0;
        mtof_tilde_05_innerScala_sclEntryCount = 0;
        mtof_tilde_05_innerScala_sclOctaveMul = 1;
        mtof_tilde_05_innerScala_kbmValid = { 0, 0, 0, 60, 69, 440 };
        mtof_tilde_05_innerScala_kbmMid = 60;
        mtof_tilde_05_innerScala_kbmRefNum = 69;
        mtof_tilde_05_innerScala_kbmRefFreq = 440;
        mtof_tilde_05_innerScala_kbmSize = 0;
        mtof_tilde_05_innerScala_kbmMin = 0;
        mtof_tilde_05_innerScala_kbmMax = 0;
        mtof_tilde_05_innerScala_kbmOctaveDegree = 12;
        mtof_tilde_05_innerScala_kbmMapSize = 0;
        mtof_tilde_05_innerScala_refFreq = 261.63;
        param_33_lastValue = 0;
        ip_13_lastIndex = 0;
        ip_13_lastValue = 0;
        ip_13_resetCount = 0;
        ip_13_sigbuf = nullptr;
        ip_13_setupDone = false;
        param_34_lastValue = 0;
        ip_14_lastIndex = 0;
        ip_14_lastValue = 0;
        ip_14_resetCount = 0;
        ip_14_sigbuf = nullptr;
        ip_14_setupDone = false;
        ip_15_lastIndex = 0;
        ip_15_lastValue = 0;
        ip_15_resetCount = 0;
        ip_15_sigbuf = nullptr;
        ip_15_setupDone = false;
        param_35_lastValue = 0;
        numberobj_39_currentFormat = 6;
        numberobj_39_lastValue = 0;
        cycle_tilde_20_wrap = 0;
        cycle_tilde_20_ph_currentPhase = 0;
        cycle_tilde_20_ph_conv = 0;
        cycle_tilde_20_setupDone = false;
        snapshot_09_calc = 0;
        snapshot_09_nextTime = 0;
        snapshot_09_count = 0;
        snapshot_09_lastValue = 0;
        numberobj_40_currentFormat = 6;
        numberobj_40_lastValue = 0;
        numberobj_41_currentFormat = 6;
        numberobj_41_lastValue = 0;
        snapshot_10_calc = 0;
        snapshot_10_nextTime = 0;
        snapshot_10_count = 0;
        snapshot_10_lastValue = 0;
        cycle_tilde_21_wrap = 0;
        cycle_tilde_21_ph_currentPhase = 0;
        cycle_tilde_21_ph_conv = 0;
        cycle_tilde_21_setupDone = false;
        numberobj_42_currentFormat = 6;
        numberobj_42_lastValue = 0;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 1;
        parameterOffset = 0;
    }
    
    // member variables
    
        number mtof_tilde_05_midivalue;
        list mtof_tilde_05_scale;
        list mtof_tilde_05_map;
        number mtof_tilde_05_base;
        number receive_13_output_number;
        list receive_13_output_list;
        number dspexpr_44_in1;
        number dspexpr_44_in2;
        number p_12_target;
        number dspexpr_45_in1;
        number dspexpr_45_in2;
        number p_13_target;
        number param_33_value;
        number ip_13_value;
        number ip_13_impulse;
        number param_34_value;
        number ip_14_value;
        number ip_14_impulse;
        number receive_14_output_number;
        list receive_14_output_list;
        number expr_25_in1;
        number expr_25_in2;
        number expr_25_out1;
        number ip_15_value;
        number ip_15_impulse;
        number param_35_value;
        number numberobj_39_value;
        number expr_26_in1;
        number expr_26_in2;
        number expr_26_out1;
        list scale_16_input;
        number scale_16_inlow;
        number scale_16_inhigh;
        number scale_16_outlow;
        number scale_16_outhigh;
        number scale_16_power;
        list scale_16_out;
        number cycle_tilde_20_frequency;
        number cycle_tilde_20_phase_offset;
        number snapshot_09_interval;
        number snapshot_09_out;
        number numberobj_40_value;
        number expr_27_in1;
        number expr_27_in2;
        number expr_27_out1;
        number random_09_limit;
        number random_09_seed;
        number receive_15_output_number;
        list receive_15_output_list;
        number numberobj_41_value;
        number expr_28_in1;
        number expr_28_in2;
        number expr_28_out1;
        list scale_17_input;
        number scale_17_inlow;
        number scale_17_inhigh;
        number scale_17_outlow;
        number scale_17_outhigh;
        number scale_17_power;
        list scale_17_out;
        number snapshot_10_interval;
        number snapshot_10_out;
        number cycle_tilde_21_frequency;
        number cycle_tilde_21_phase_offset;
        number numberobj_42_value;
        number expr_29_in1;
        number expr_29_in2;
        number expr_29_out1;
        number random_10_limit;
        number random_10_seed;
        MillisecondTime _currentTime;
        UInt64 audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        SampleValue * signals[4];
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        number mtof_tilde_05_innerMtoF_lastInValue;
        number mtof_tilde_05_innerMtoF_lastOutValue;
        number mtof_tilde_05_innerMtoF_lastTuning;
        Float64BufferRef mtof_tilde_05_innerMtoF_buffer;
        const Index mtof_tilde_05_innerScala_KBM_MAP_OFFSET = 7;
        bool mtof_tilde_05_innerScala_lastValid;
        number mtof_tilde_05_innerScala_lastNote;
        number mtof_tilde_05_innerScala_lastFreq;
        int mtof_tilde_05_innerScala_sclEntryCount;
        number mtof_tilde_05_innerScala_sclOctaveMul;
        list mtof_tilde_05_innerScala_sclExpMul;
        list mtof_tilde_05_innerScala_kbmValid;
        int mtof_tilde_05_innerScala_kbmMid;
        int mtof_tilde_05_innerScala_kbmRefNum;
        number mtof_tilde_05_innerScala_kbmRefFreq;
        int mtof_tilde_05_innerScala_kbmSize;
        int mtof_tilde_05_innerScala_kbmMin;
        int mtof_tilde_05_innerScala_kbmMax;
        int mtof_tilde_05_innerScala_kbmOctaveDegree;
        Index mtof_tilde_05_innerScala_kbmMapSize;
        number mtof_tilde_05_innerScala_refFreq;
        number param_33_lastValue;
        SampleIndex ip_13_lastIndex;
        number ip_13_lastValue;
        SampleIndex ip_13_resetCount;
        signal ip_13_sigbuf;
        bool ip_13_setupDone;
        number param_34_lastValue;
        SampleIndex ip_14_lastIndex;
        number ip_14_lastValue;
        SampleIndex ip_14_resetCount;
        signal ip_14_sigbuf;
        bool ip_14_setupDone;
        SampleIndex ip_15_lastIndex;
        number ip_15_lastValue;
        SampleIndex ip_15_resetCount;
        signal ip_15_sigbuf;
        bool ip_15_setupDone;
        number param_35_lastValue;
        Int numberobj_39_currentFormat;
        number numberobj_39_lastValue;
        Float64BufferRef cycle_tilde_20_buffer;
        long cycle_tilde_20_wrap;
        uint32_t cycle_tilde_20_phasei;
        SampleValue cycle_tilde_20_f2i;
        number cycle_tilde_20_ph_currentPhase;
        number cycle_tilde_20_ph_conv;
        bool cycle_tilde_20_setupDone;
        number snapshot_09_calc;
        number snapshot_09_nextTime;
        SampleIndex snapshot_09_count;
        number snapshot_09_lastValue;
        Int numberobj_40_currentFormat;
        number numberobj_40_lastValue;
        UInt random_09_nz_state[4] = { };
        Int numberobj_41_currentFormat;
        number numberobj_41_lastValue;
        number snapshot_10_calc;
        number snapshot_10_nextTime;
        SampleIndex snapshot_10_count;
        number snapshot_10_lastValue;
        Float64BufferRef cycle_tilde_21_buffer;
        long cycle_tilde_21_wrap;
        uint32_t cycle_tilde_21_phasei;
        SampleValue cycle_tilde_21_f2i;
        number cycle_tilde_21_ph_currentPhase;
        number cycle_tilde_21_ph_conv;
        bool cycle_tilde_21_setupDone;
        Int numberobj_42_currentFormat;
        number numberobj_42_lastValue;
        UInt random_10_nz_state[4] = { };
        number stackprotect_count;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
        RNBOSubpatcher_802* p_12;
        RNBOSubpatcher_803* p_13;
    
};

drone()
{
}

~drone()
{
    delete this->p_14;
    delete this->p_15;
    delete this->p_16;
    delete this->p_17;
    delete this->p_18;
    delete this->p_19;
    delete this->p_20;
}

drone* getTopLevelPatcher() {
    return this;
}

void cancelClockEvents()
{
    getEngine()->flushClockEvents(this, 1935387534, false);
    getEngine()->flushClockEvents(this, -871642103, false);
}

template <typename T> void listquicksort(T& arr, T& sortindices, Int l, Int h, bool ascending) {
    if (l < h) {
        Int p = (Int)(this->listpartition(arr, sortindices, l, h, ascending));
        this->listquicksort(arr, sortindices, l, p - 1, ascending);
        this->listquicksort(arr, sortindices, p + 1, h, ascending);
    }
}

template <typename T> Int listpartition(T& arr, T& sortindices, Int l, Int h, bool ascending) {
    number x = arr[(Index)h];
    Int i = (Int)(l - 1);

    for (Int j = (Int)(l); j <= h - 1; j++) {
        bool asc = (bool)((bool)(ascending) && arr[(Index)j] <= x);
        bool desc = (bool)((bool)(!(bool)(ascending)) && arr[(Index)j] >= x);

        if ((bool)(asc) || (bool)(desc)) {
            i++;
            this->listswapelements(arr, i, j);
            this->listswapelements(sortindices, i, j);
        }
    }

    i++;
    this->listswapelements(arr, i, h);
    this->listswapelements(sortindices, i, h);
    return i;
}

template <typename T> void listswapelements(T& arr, Int a, Int b) {
    auto tmp = arr[(Index)a];
    arr[(Index)a] = arr[(Index)b];
    arr[(Index)b] = tmp;
}

MillisecondTime currenttime() {
    return this->_currentTime;
}

inline number linearinterp(number frac, number x, number y) {
    return x + (y - x) * frac;
}

inline number cubicinterp(number a, number w, number x, number y, number z) {
    number a1 = 1. + a;
    number aa = a * a1;
    number b = 1. - a;
    number b1 = 2. - a;
    number bb = b * b1;
    number fw = -.1666667 * bb * a;
    number fx = .5 * bb * a1;
    number fy = .5 * aa * b1;
    number fz = -.1666667 * aa * b;
    return w * fw + x * fx + y * fy + z * fz;
}

inline number fastcubicinterp(number a, number w, number x, number y, number z) {
    number a2 = a * a;
    number f0 = z - y - w + x;
    number f1 = w - x - f0;
    number f2 = y - w;
    number f3 = x;
    return f0 * a * a2 + f1 * a2 + f2 * a + f3;
}

inline number splineinterp(number a, number w, number x, number y, number z) {
    number a2 = a * a;
    number f0 = -0.5 * w + 1.5 * x - 1.5 * y + 0.5 * z;
    number f1 = w - 2.5 * x + 2 * y - 0.5 * z;
    number f2 = -0.5 * w + 0.5 * y;
    return f0 * a * a2 + f1 * a2 + f2 * a + x;
}

inline number spline6interp(number a, number y0, number y1, number y2, number y3, number y4, number y5) {
    number ym2py2 = y0 + y4;
    number ym1py1 = y1 + y3;
    number y2mym2 = y4 - y0;
    number y1mym1 = y3 - y1;
    number sixthym1py1 = (number)1 / (number)6.0 * ym1py1;
    number c0 = (number)1 / (number)120.0 * ym2py2 + (number)13 / (number)60.0 * ym1py1 + (number)11 / (number)20.0 * y2;
    number c1 = (number)1 / (number)24.0 * y2mym2 + (number)5 / (number)12.0 * y1mym1;
    number c2 = (number)1 / (number)12.0 * ym2py2 + sixthym1py1 - (number)1 / (number)2.0 * y2;
    number c3 = (number)1 / (number)12.0 * y2mym2 - (number)1 / (number)6.0 * y1mym1;
    number c4 = (number)1 / (number)24.0 * ym2py2 - sixthym1py1 + (number)1 / (number)4.0 * y2;
    number c5 = (number)1 / (number)120.0 * (y5 - y0) + (number)1 / (number)24.0 * (y1 - y4) + (number)1 / (number)12.0 * (y3 - y2);
    return ((((c5 * a + c4) * a + c3) * a + c2) * a + c1) * a + c0;
}

inline number cosT8(number r) {
    number t84 = 56.0;
    number t83 = 1680.0;
    number t82 = 20160.0;
    number t81 = 2.4801587302e-05;
    number t73 = 42.0;
    number t72 = 840.0;
    number t71 = 1.9841269841e-04;

    if (r < 0.785398163397448309615660845819875721 && r > -0.785398163397448309615660845819875721) {
        number rr = r * r;
        return 1.0 - rr * t81 * (t82 - rr * (t83 - rr * (t84 - rr)));
    } else if (r > 0.0) {
        r -= 1.57079632679489661923132169163975144;
        number rr = r * r;
        return -r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
    } else {
        r += 1.57079632679489661923132169163975144;
        number rr = r * r;
        return r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
    }
}

inline number cosineinterp(number frac, number x, number y) {
    number a2 = (1.0 - this->cosT8(frac * 3.14159265358979323846)) / (number)2.0;
    return x * (1.0 - a2) + y * a2;
}

number mstosamps(MillisecondTime ms) {
    return ms * this->sr * 0.001;
}

number samplerate() const {
    return this->sr;
}

Index vectorsize() const {
    return this->vs;
}

number maximum(number x, number y) {
    return (x < y ? y : x);
}

number wrap(number x, number low, number high) {
    number lo;
    number hi;

    if (low == high)
        return low;

    if (low > high) {
        hi = low;
        lo = high;
    } else {
        lo = low;
        hi = high;
    }

    number range = hi - lo;

    if (x >= lo && x < hi)
        return x;

    if (range <= 0.000000001)
        return lo;

    long numWraps = (long)(trunc((x - lo) / range));
    numWraps = numWraps - ((x < lo ? 1 : 0));
    number result = x - range * numWraps;

    if (result >= hi)
        return result - range;
    else
        return result;
}

inline number intnum(const number value) {
    return trunc(value);
}

number beattime() {
    return this->getTopLevelPatcher()->globaltransport_getBeatTime(this->currenttime());
}

array<number, 2> timesignature() {
    return this->getTopLevelPatcher()->globaltransport_getTimeSignature(this->currenttime());
}

number beatstoticks(number beattime) {
    return beattime * 480;
}

number transport() {
    return this->getTopLevelPatcher()->globaltransport_getState(this->currenttime());
}

number tempo() {
    return this->getTopLevelPatcher()->globaltransport_getTempo(this->currenttime());
}

ParameterValue fromnormalized(ParameterIndex index, ParameterValue normalizedValue) {
    return this->convertFromNormalizedParameterValue(index, normalizedValue);
}

inline number safediv(number num, number denom) {
    return (denom == 0.0 ? 0.0 : num / denom);
}

number tickstoms(number ticks) {
    return ticks / (number)480 * this->safediv(60, this->tempo()) * 1000;
}

MillisecondTime sampstoms(number samps) {
    return samps * 1000 / this->sr;
}

Index getNumMidiInputPorts() const {
    return 1;
}

void processMidiEvent(MillisecondTime time, int port, ConstByteArray data, Index length) {
    this->updateTime(time);
    this->ctlin_01_midihandler(data[0] & 240, (data[0] & 15) + 1, port, data, length);
}

Index getNumMidiOutputPorts() const {
    return 0;
}

void process(
    const SampleValue * const* inputs,
    Index numInputs,
    SampleValue * const* outputs,
    Index numOutputs,
    Index n
) {
    RNBO_UNUSED(numInputs);
    RNBO_UNUSED(inputs);
    this->vs = n;
    this->updateTime(this->getEngine()->getCurrentTime());
    SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
    SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
    this->p_16_perform(this->signals[0], n);
    this->p_17_perform(this->signals[1], n);
    this->p_18_perform(this->signals[2], n);
    this->p_19_perform(this->signals[3], n);
    this->p_20_perform(this->signals[4], n);

    this->signaladder_01_perform(
        this->signals[4],
        this->signals[3],
        this->signals[2],
        this->signals[1],
        this->signals[0],
        this->signals[0],
        n
    );

    this->gen_06_perform(
        this->signals[0],
        this->gen_06_indiffusion2,
        this->gen_06_decay1,
        this->gen_06_decay,
        this->gen_06_drywet,
        this->gen_06_inbandwidth,
        this->gen_06_damping,
        this->gen_06_decay2,
        this->gen_06_indiffusion1,
        this->gen_06_predelay,
        this->signals[5],
        this->dummyBuffer,
        n
    );

    this->p_15_perform(
        this->signals[5],
        this->signals[5],
        this->signals[1],
        this->signals[2],
        this->dummyBuffer,
        n
    );

    this->p_14_perform(this->signals[1], this->signals[2], out1, out2, n);
    this->stackprotect_perform(n);
    this->globaltransport_advance();
    this->audioProcessSampleCount += this->vs;
}

void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
    if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
        Index i;

        for (i = 0; i < 6; i++) {
            this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
        }

        this->globaltransport_tempo = resizeSignal(this->globaltransport_tempo, this->maxvs, maxBlockSize);
        this->globaltransport_state = resizeSignal(this->globaltransport_state, this->maxvs, maxBlockSize);
        this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
        this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
        this->didAllocateSignals = true;
    }

    const bool sampleRateChanged = sampleRate != this->sr;
    const bool maxvsChanged = maxBlockSize != this->maxvs;
    const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;

    if (sampleRateChanged || maxvsChanged) {
        this->vs = maxBlockSize;
        this->maxvs = maxBlockSize;
        this->sr = sampleRate;
        this->invsr = 1 / sampleRate;
    }

    this->gen_06_dspsetup(forceDSPSetup);
    this->globaltransport_dspsetup(forceDSPSetup);
    this->p_14->prepareToProcess(sampleRate, maxBlockSize, force);
    this->p_15->prepareToProcess(sampleRate, maxBlockSize, force);
    this->p_16->prepareToProcess(sampleRate, maxBlockSize, force);
    this->p_17->prepareToProcess(sampleRate, maxBlockSize, force);
    this->p_18->prepareToProcess(sampleRate, maxBlockSize, force);
    this->p_19->prepareToProcess(sampleRate, maxBlockSize, force);
    this->p_20->prepareToProcess(sampleRate, maxBlockSize, force);

    if (sampleRateChanged)
        this->onSampleRateChanged(sampleRate);
}

void setProbingTarget(MessageTag id) {
    switch (id) {
    default:
        {
        this->setProbingIndex(-1);
        break;
        }
    }
}

void setProbingIndex(ProbingIndex ) {}

Index getProbingChannels(MessageTag outletId) const {
    RNBO_UNUSED(outletId);
    return 0;
}

DataRef* getDataRef(DataRefIndex index)  {
    switch (index) {
    case 0:
        {
        return addressOf(this->RNBODefaultSinus);
        break;
        }
    case 1:
        {
        return addressOf(this->RNBODefaultMtofLookupTable256);
        break;
        }
    case 2:
        {
        return addressOf(this->gen_06_delay_1_bufferobj);
        break;
        }
    case 3:
        {
        return addressOf(this->gen_06_delay_2_bufferobj);
        break;
        }
    case 4:
        {
        return addressOf(this->gen_06_delay_3_bufferobj);
        break;
        }
    case 5:
        {
        return addressOf(this->gen_06_delay_4_bufferobj);
        break;
        }
    case 6:
        {
        return addressOf(this->gen_06_delay_5_bufferobj);
        break;
        }
    case 7:
        {
        return addressOf(this->gen_06_delay_6_bufferobj);
        break;
        }
    case 8:
        {
        return addressOf(this->gen_06_delay_7_bufferobj);
        break;
        }
    case 9:
        {
        return addressOf(this->gen_06_delay_8_bufferobj);
        break;
        }
    case 10:
        {
        return addressOf(this->gen_06_delay_9_bufferobj);
        break;
        }
    case 11:
        {
        return addressOf(this->gen_06_delay_10_bufferobj);
        break;
        }
    case 12:
        {
        return addressOf(this->gen_06_delay_11_bufferobj);
        break;
        }
    case 13:
        {
        return addressOf(this->gen_06_delay_12_bufferobj);
        break;
        }
    case 14:
        {
        return addressOf(this->gen_06_delay_13_bufferobj);
        break;
        }
    default:
        {
        return nullptr;
        }
    }
}

DataRefIndex getNumDataRefs() const {
    return 15;
}

void fillRNBODefaultSinus(DataRef& ref) {
    Float64BufferRef buffer;
    buffer = new Float64Buffer(ref);
    number bufsize = buffer->getSize();

    for (Index i = 0; i < bufsize; i++) {
        buffer[i] = rnbo_cos(i * 3.14159265358979323846 * 2. / bufsize);
    }
}

void fillRNBODefaultMtofLookupTable256(DataRef& ref) {
    Float64BufferRef buffer;
    buffer = new Float64Buffer(ref);
    number bufsize = buffer->getSize();

    for (Index i = 0; i < bufsize; i++) {
        number midivalue = -256. + (number)512. / (bufsize - 1) * i;
        buffer[i] = rnbo_exp(.057762265 * (midivalue - 69.0));
    }
}

void fillDataRef(DataRefIndex index, DataRef& ref) {
    switch (index) {
    case 0:
        {
        this->fillRNBODefaultSinus(ref);
        break;
        }
    case 1:
        {
        this->fillRNBODefaultMtofLookupTable256(ref);
        break;
        }
    }
}

void zeroDataRef(DataRef& ref) {
    ref->setZero();
}

void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
    this->updateTime(time);

    if (index == 0) {
        this->gen_06_cycle_76_buffer = new Float64Buffer(this->RNBODefaultSinus);
        this->gen_06_cycle_87_buffer = new Float64Buffer(this->RNBODefaultSinus);
    }

    if (index == 2) {
        this->gen_06_delay_1_buffer = new Float64Buffer(this->gen_06_delay_1_bufferobj);
    }

    if (index == 3) {
        this->gen_06_delay_2_buffer = new Float64Buffer(this->gen_06_delay_2_bufferobj);
    }

    if (index == 4) {
        this->gen_06_delay_3_buffer = new Float64Buffer(this->gen_06_delay_3_bufferobj);
    }

    if (index == 5) {
        this->gen_06_delay_4_buffer = new Float64Buffer(this->gen_06_delay_4_bufferobj);
    }

    if (index == 6) {
        this->gen_06_delay_5_buffer = new Float64Buffer(this->gen_06_delay_5_bufferobj);
    }

    if (index == 7) {
        this->gen_06_delay_6_buffer = new Float64Buffer(this->gen_06_delay_6_bufferobj);
    }

    if (index == 8) {
        this->gen_06_delay_7_buffer = new Float64Buffer(this->gen_06_delay_7_bufferobj);
    }

    if (index == 9) {
        this->gen_06_delay_8_buffer = new Float64Buffer(this->gen_06_delay_8_bufferobj);
    }

    if (index == 10) {
        this->gen_06_delay_9_buffer = new Float64Buffer(this->gen_06_delay_9_bufferobj);
    }

    if (index == 11) {
        this->gen_06_delay_10_buffer = new Float64Buffer(this->gen_06_delay_10_bufferobj);
    }

    if (index == 12) {
        this->gen_06_delay_11_buffer = new Float64Buffer(this->gen_06_delay_11_bufferobj);
    }

    if (index == 13) {
        this->gen_06_delay_12_buffer = new Float64Buffer(this->gen_06_delay_12_bufferobj);
    }

    if (index == 14) {
        this->gen_06_delay_13_buffer = new Float64Buffer(this->gen_06_delay_13_bufferobj);
    }

    this->p_14->processDataViewUpdate(index, time);
    this->p_15->processDataViewUpdate(index, time);
    this->p_16->processDataViewUpdate(index, time);
    this->p_17->processDataViewUpdate(index, time);
    this->p_18->processDataViewUpdate(index, time);
    this->p_19->processDataViewUpdate(index, time);
    this->p_20->processDataViewUpdate(index, time);
}

void initialize() {
    this->RNBODefaultSinus = initDataRef("RNBODefaultSinus", true, nullptr, "buffer~");
    this->RNBODefaultMtofLookupTable256 = initDataRef("RNBODefaultMtofLookupTable256", true, nullptr, "buffer~");
    this->gen_06_delay_1_bufferobj = initDataRef("gen_06_delay_1_bufferobj", true, nullptr, "buffer~");
    this->gen_06_delay_2_bufferobj = initDataRef("gen_06_delay_2_bufferobj", true, nullptr, "buffer~");
    this->gen_06_delay_3_bufferobj = initDataRef("gen_06_delay_3_bufferobj", true, nullptr, "buffer~");
    this->gen_06_delay_4_bufferobj = initDataRef("gen_06_delay_4_bufferobj", true, nullptr, "buffer~");
    this->gen_06_delay_5_bufferobj = initDataRef("gen_06_delay_5_bufferobj", true, nullptr, "buffer~");
    this->gen_06_delay_6_bufferobj = initDataRef("gen_06_delay_6_bufferobj", true, nullptr, "buffer~");
    this->gen_06_delay_7_bufferobj = initDataRef("gen_06_delay_7_bufferobj", true, nullptr, "buffer~");
    this->gen_06_delay_8_bufferobj = initDataRef("gen_06_delay_8_bufferobj", true, nullptr, "buffer~");
    this->gen_06_delay_9_bufferobj = initDataRef("gen_06_delay_9_bufferobj", true, nullptr, "buffer~");
    this->gen_06_delay_10_bufferobj = initDataRef("gen_06_delay_10_bufferobj", true, nullptr, "buffer~");
    this->gen_06_delay_11_bufferobj = initDataRef("gen_06_delay_11_bufferobj", true, nullptr, "buffer~");
    this->gen_06_delay_12_bufferobj = initDataRef("gen_06_delay_12_bufferobj", true, nullptr, "buffer~");
    this->gen_06_delay_13_bufferobj = initDataRef("gen_06_delay_13_bufferobj", true, nullptr, "buffer~");
    this->assign_defaults();
    this->setState();
    this->RNBODefaultSinus->setIndex(0);
    this->gen_06_cycle_76_buffer = new Float64Buffer(this->RNBODefaultSinus);
    this->gen_06_cycle_87_buffer = new Float64Buffer(this->RNBODefaultSinus);
    this->RNBODefaultMtofLookupTable256->setIndex(1);
    this->gen_06_delay_1_bufferobj->setIndex(2);
    this->gen_06_delay_1_buffer = new Float64Buffer(this->gen_06_delay_1_bufferobj);
    this->gen_06_delay_2_bufferobj->setIndex(3);
    this->gen_06_delay_2_buffer = new Float64Buffer(this->gen_06_delay_2_bufferobj);
    this->gen_06_delay_3_bufferobj->setIndex(4);
    this->gen_06_delay_3_buffer = new Float64Buffer(this->gen_06_delay_3_bufferobj);
    this->gen_06_delay_4_bufferobj->setIndex(5);
    this->gen_06_delay_4_buffer = new Float64Buffer(this->gen_06_delay_4_bufferobj);
    this->gen_06_delay_5_bufferobj->setIndex(6);
    this->gen_06_delay_5_buffer = new Float64Buffer(this->gen_06_delay_5_bufferobj);
    this->gen_06_delay_6_bufferobj->setIndex(7);
    this->gen_06_delay_6_buffer = new Float64Buffer(this->gen_06_delay_6_bufferobj);
    this->gen_06_delay_7_bufferobj->setIndex(8);
    this->gen_06_delay_7_buffer = new Float64Buffer(this->gen_06_delay_7_bufferobj);
    this->gen_06_delay_8_bufferobj->setIndex(9);
    this->gen_06_delay_8_buffer = new Float64Buffer(this->gen_06_delay_8_bufferobj);
    this->gen_06_delay_9_bufferobj->setIndex(10);
    this->gen_06_delay_9_buffer = new Float64Buffer(this->gen_06_delay_9_bufferobj);
    this->gen_06_delay_10_bufferobj->setIndex(11);
    this->gen_06_delay_10_buffer = new Float64Buffer(this->gen_06_delay_10_bufferobj);
    this->gen_06_delay_11_bufferobj->setIndex(12);
    this->gen_06_delay_11_buffer = new Float64Buffer(this->gen_06_delay_11_bufferobj);
    this->gen_06_delay_12_bufferobj->setIndex(13);
    this->gen_06_delay_12_buffer = new Float64Buffer(this->gen_06_delay_12_bufferobj);
    this->gen_06_delay_13_bufferobj->setIndex(14);
    this->gen_06_delay_13_buffer = new Float64Buffer(this->gen_06_delay_13_bufferobj);
    this->initializeObjects();
    this->allocateDataRefs();
    this->startup();
}

Index getIsMuted()  {
    return this->isMuted;
}

void setIsMuted(Index v)  {
    this->isMuted = v;
}

void onSampleRateChanged(double samplerate) {
    this->timevalue_01_onSampleRateChanged(samplerate);
}

void processTempoEvent(MillisecondTime time, Tempo tempo) {
    this->updateTime(time);

    if (this->globaltransport_setTempo(this->_currentTime, tempo, false)) {
        this->p_14->processTempoEvent(time, tempo);
        this->p_15->processTempoEvent(time, tempo);
        this->p_16->processTempoEvent(time, tempo);
        this->p_17->processTempoEvent(time, tempo);
        this->p_18->processTempoEvent(time, tempo);
        this->p_19->processTempoEvent(time, tempo);
        this->p_20->processTempoEvent(time, tempo);
        this->transport_01_onTempoChanged(tempo);
        this->timevalue_01_onTempoChanged(tempo);
    }
}

void processTransportEvent(MillisecondTime time, TransportState state) {
    this->updateTime(time);

    if (this->globaltransport_setState(this->_currentTime, state, false)) {
        this->p_14->processTransportEvent(time, state);
        this->p_15->processTransportEvent(time, state);
        this->p_16->processTransportEvent(time, state);
        this->p_17->processTransportEvent(time, state);
        this->p_18->processTransportEvent(time, state);
        this->p_19->processTransportEvent(time, state);
        this->p_20->processTransportEvent(time, state);
        this->metro_01_onTransportChanged(state);
        this->transport_01_onTransportChanged(state);
    }
}

void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
    this->updateTime(time);

    if (this->globaltransport_setBeatTime(this->_currentTime, beattime, false)) {
        this->p_14->processBeatTimeEvent(time, beattime);
        this->p_15->processBeatTimeEvent(time, beattime);
        this->p_16->processBeatTimeEvent(time, beattime);
        this->p_17->processBeatTimeEvent(time, beattime);
        this->p_18->processBeatTimeEvent(time, beattime);
        this->p_19->processBeatTimeEvent(time, beattime);
        this->p_20->processBeatTimeEvent(time, beattime);
        this->metro_01_onBeatTimeChanged(beattime);
    }
}

void processTimeSignatureEvent(MillisecondTime time, int numerator, int denominator) {
    this->updateTime(time);

    if (this->globaltransport_setTimeSignature(this->_currentTime, numerator, denominator, false)) {
        this->p_14->processTimeSignatureEvent(time, numerator, denominator);
        this->p_15->processTimeSignatureEvent(time, numerator, denominator);
        this->p_16->processTimeSignatureEvent(time, numerator, denominator);
        this->p_17->processTimeSignatureEvent(time, numerator, denominator);
        this->p_18->processTimeSignatureEvent(time, numerator, denominator);
        this->p_19->processTimeSignatureEvent(time, numerator, denominator);
        this->p_20->processTimeSignatureEvent(time, numerator, denominator);
        this->transport_01_onTimeSignatureChanged(numerator, denominator);
        this->timevalue_01_onTimeSignatureChanged(numerator, denominator);
    }
}

void processBBUEvent(MillisecondTime time, number bars, number beats, number units) {
    this->updateTime(time);

    if (this->globaltransport_setBBU(this->_currentTime, bars, beats, units, false)) {
        this->p_14->processBBUEvent(time, bars, beats, units);
        this->p_15->processBBUEvent(time, bars, beats, units);
        this->p_16->processBBUEvent(time, bars, beats, units);
        this->p_17->processBBUEvent(time, bars, beats, units);
        this->p_18->processBBUEvent(time, bars, beats, units);
        this->p_19->processBBUEvent(time, bars, beats, units);
        this->p_20->processBBUEvent(time, bars, beats, units);
    }
}

Index getPatcherSerial() const {
    return 0;
}

void getState(PatcherStateInterface& ) {}

void setState() {
    this->p_14 = new RNBOSubpatcher_804();
    this->p_14->setEngineAndPatcher(this->getEngine(), this);
    this->p_14->initialize();
    this->p_14->setParameterOffset(this->getParameterOffset(this->p_14));
    this->p_15 = new RNBOSubpatcher_805();
    this->p_15->setEngineAndPatcher(this->getEngine(), this);
    this->p_15->initialize();
    this->p_15->setParameterOffset(this->getParameterOffset(this->p_15));
    this->p_16 = new RNBOSubpatcher_806();
    this->p_16->setEngineAndPatcher(this->getEngine(), this);
    this->p_16->initialize();
    this->p_16->setParameterOffset(this->getParameterOffset(this->p_16));
    this->p_17 = new RNBOSubpatcher_807();
    this->p_17->setEngineAndPatcher(this->getEngine(), this);
    this->p_17->initialize();
    this->p_17->setParameterOffset(this->getParameterOffset(this->p_17));
    this->p_18 = new RNBOSubpatcher_808();
    this->p_18->setEngineAndPatcher(this->getEngine(), this);
    this->p_18->initialize();
    this->p_18->setParameterOffset(this->getParameterOffset(this->p_18));
    this->p_19 = new RNBOSubpatcher_809();
    this->p_19->setEngineAndPatcher(this->getEngine(), this);
    this->p_19->initialize();
    this->p_19->setParameterOffset(this->getParameterOffset(this->p_19));
    this->p_20 = new RNBOSubpatcher_810();
    this->p_20->setEngineAndPatcher(this->getEngine(), this);
    this->p_20->initialize();
    this->p_20->setParameterOffset(this->getParameterOffset(this->p_20));
}

void getPreset(PatcherStateInterface& preset) {
    preset["__presetid"] = "rnbo";
    this->param_36_getPresetValue(getSubState(preset, "drive"));
    this->param_37_getPresetValue(getSubState(preset, "bpm"));
    this->gen_06_param_reverb_indiffusion2_getPresetValue(getSubState(preset, "reverb/indiffusion2"));
    this->gen_06_param_reverb_decay1_getPresetValue(getSubState(preset, "reverb/decay1"));
    this->gen_06_param_reverb_decay_getPresetValue(getSubState(preset, "reverb/decay"));
    this->gen_06_param_reverb_drywet_getPresetValue(getSubState(preset, "reverb/drywet"));
    this->gen_06_param_reverb_inbandwidth_getPresetValue(getSubState(preset, "reverb/inbandwidth"));
    this->gen_06_param_reverb_damping_getPresetValue(getSubState(preset, "reverb/damping"));
    this->gen_06_param_reverb_decay2_getPresetValue(getSubState(preset, "reverb/decay2"));
    this->gen_06_param_reverb_indiffusion1_getPresetValue(getSubState(preset, "reverb/indiffusion1"));
    this->gen_06_param_reverb_predelay_getPresetValue(getSubState(preset, "reverb/predelay"));
    this->p_14->getPreset(getSubState(getSubState(preset, "__sps"), "Post-EQ~"));
    this->p_15->getPreset(getSubState(getSubState(preset, "__sps"), "Drive~"));
    this->p_16->getPreset(getSubState(getSubState(preset, "__sps"), "note"));
    this->p_17->getPreset(getSubState(getSubState(preset, "__sps"), "note[1]"));
    this->p_18->getPreset(getSubState(getSubState(preset, "__sps"), "note[2]"));
    this->p_19->getPreset(getSubState(getSubState(preset, "__sps"), "note[3]"));
    this->p_20->getPreset(getSubState(getSubState(preset, "__sps"), "note[4]"));
}

void setPreset(MillisecondTime time, PatcherStateInterface& preset) {
    this->updateTime(time);
    this->param_37_setPresetValue(getSubState(preset, "bpm"));
    this->gen_06_param_reverb_indiffusion2_setPresetValue(getSubState(preset, "reverb/indiffusion2"));
    this->gen_06_param_reverb_decay1_setPresetValue(getSubState(preset, "reverb/decay1"));
    this->gen_06_param_reverb_decay_setPresetValue(getSubState(preset, "reverb/decay"));
    this->gen_06_param_reverb_drywet_setPresetValue(getSubState(preset, "reverb/drywet"));
    this->gen_06_param_reverb_inbandwidth_setPresetValue(getSubState(preset, "reverb/inbandwidth"));
    this->gen_06_param_reverb_damping_setPresetValue(getSubState(preset, "reverb/damping"));
    this->gen_06_param_reverb_decay2_setPresetValue(getSubState(preset, "reverb/decay2"));
    this->gen_06_param_reverb_indiffusion1_setPresetValue(getSubState(preset, "reverb/indiffusion1"));
    this->gen_06_param_reverb_predelay_setPresetValue(getSubState(preset, "reverb/predelay"));
    this->p_16->param_05_setPresetValue(getSubState(getSubState(getSubState(preset, "__sps"), "note"), "ratio"));
    this->p_16->param_06_setPresetValue(getSubState(getSubState(getSubState(preset, "__sps"), "note"), "index"));
    this->p_16->param_07_setPresetValue(getSubState(getSubState(getSubState(preset, "__sps"), "note"), "lfo"));

    this->p_16->p_05->param_01_setPresetValue(
        getSubState(getSubState(getSubState(getSubState(getSubState(preset, "__sps"), "note"), "__sps"), "env.adsr"), "attack")
    );

    this->p_16->p_05->param_02_setPresetValue(
        getSubState(getSubState(getSubState(getSubState(getSubState(preset, "__sps"), "note"), "__sps"), "env.adsr"), "decay")
    );

    this->p_16->p_05->param_03_setPresetValue(
        getSubState(getSubState(getSubState(getSubState(getSubState(preset, "__sps"), "note"), "__sps"), "env.adsr"), "sustain")
    );

    this->p_16->p_05->param_04_setPresetValue(
        getSubState(getSubState(getSubState(getSubState(getSubState(preset, "__sps"), "note"), "__sps"), "env.adsr"), "release")
    );

    this->p_17->param_12_setPresetValue(getSubState(getSubState(getSubState(preset, "__sps"), "note[1]"), "ratio"));
    this->p_17->param_13_setPresetValue(getSubState(getSubState(getSubState(preset, "__sps"), "note[1]"), "index"));
    this->p_17->param_14_setPresetValue(getSubState(getSubState(getSubState(preset, "__sps"), "note[1]"), "lfo"));

    this->p_17->p_07->param_08_setPresetValue(
        getSubState(getSubState(getSubState(getSubState(getSubState(preset, "__sps"), "note[1]"), "__sps"), "env.adsr"), "attack")
    );

    this->p_17->p_07->param_09_setPresetValue(
        getSubState(getSubState(getSubState(getSubState(getSubState(preset, "__sps"), "note[1]"), "__sps"), "env.adsr"), "decay")
    );

    this->p_17->p_07->param_10_setPresetValue(
        getSubState(getSubState(getSubState(getSubState(getSubState(preset, "__sps"), "note[1]"), "__sps"), "env.adsr"), "sustain")
    );

    this->p_17->p_07->param_11_setPresetValue(
        getSubState(getSubState(getSubState(getSubState(getSubState(preset, "__sps"), "note[1]"), "__sps"), "env.adsr"), "release")
    );

    this->p_18->param_19_setPresetValue(getSubState(getSubState(getSubState(preset, "__sps"), "note[2]"), "ratio"));
    this->p_18->param_20_setPresetValue(getSubState(getSubState(getSubState(preset, "__sps"), "note[2]"), "index"));
    this->p_18->param_21_setPresetValue(getSubState(getSubState(getSubState(preset, "__sps"), "note[2]"), "lfo"));

    this->p_18->p_09->param_15_setPresetValue(
        getSubState(getSubState(getSubState(getSubState(getSubState(preset, "__sps"), "note[2]"), "__sps"), "env.adsr"), "attack")
    );

    this->p_18->p_09->param_16_setPresetValue(
        getSubState(getSubState(getSubState(getSubState(getSubState(preset, "__sps"), "note[2]"), "__sps"), "env.adsr"), "decay")
    );

    this->p_18->p_09->param_17_setPresetValue(
        getSubState(getSubState(getSubState(getSubState(getSubState(preset, "__sps"), "note[2]"), "__sps"), "env.adsr"), "sustain")
    );

    this->p_18->p_09->param_18_setPresetValue(
        getSubState(getSubState(getSubState(getSubState(getSubState(preset, "__sps"), "note[2]"), "__sps"), "env.adsr"), "release")
    );

    this->p_19->param_26_setPresetValue(getSubState(getSubState(getSubState(preset, "__sps"), "note[3]"), "ratio"));
    this->p_19->param_27_setPresetValue(getSubState(getSubState(getSubState(preset, "__sps"), "note[3]"), "index"));
    this->p_19->param_28_setPresetValue(getSubState(getSubState(getSubState(preset, "__sps"), "note[3]"), "lfo"));

    this->p_19->p_11->param_22_setPresetValue(
        getSubState(getSubState(getSubState(getSubState(getSubState(preset, "__sps"), "note[3]"), "__sps"), "env.adsr"), "attack")
    );

    this->p_19->p_11->param_23_setPresetValue(
        getSubState(getSubState(getSubState(getSubState(getSubState(preset, "__sps"), "note[3]"), "__sps"), "env.adsr"), "decay")
    );

    this->p_19->p_11->param_24_setPresetValue(
        getSubState(getSubState(getSubState(getSubState(getSubState(preset, "__sps"), "note[3]"), "__sps"), "env.adsr"), "sustain")
    );

    this->p_19->p_11->param_25_setPresetValue(
        getSubState(getSubState(getSubState(getSubState(getSubState(preset, "__sps"), "note[3]"), "__sps"), "env.adsr"), "release")
    );

    this->p_20->param_33_setPresetValue(getSubState(getSubState(getSubState(preset, "__sps"), "note[4]"), "ratio"));
    this->p_20->param_34_setPresetValue(getSubState(getSubState(getSubState(preset, "__sps"), "note[4]"), "index"));
    this->p_20->param_35_setPresetValue(getSubState(getSubState(getSubState(preset, "__sps"), "note[4]"), "lfo"));

    this->p_20->p_13->param_29_setPresetValue(
        getSubState(getSubState(getSubState(getSubState(getSubState(preset, "__sps"), "note[4]"), "__sps"), "env.adsr"), "attack")
    );

    this->p_20->p_13->param_30_setPresetValue(
        getSubState(getSubState(getSubState(getSubState(getSubState(preset, "__sps"), "note[4]"), "__sps"), "env.adsr"), "decay")
    );

    this->p_20->p_13->param_31_setPresetValue(
        getSubState(getSubState(getSubState(getSubState(getSubState(preset, "__sps"), "note[4]"), "__sps"), "env.adsr"), "sustain")
    );

    this->p_20->p_13->param_32_setPresetValue(
        getSubState(getSubState(getSubState(getSubState(getSubState(preset, "__sps"), "note[4]"), "__sps"), "env.adsr"), "release")
    );

    this->param_36_setPresetValue(getSubState(preset, "drive"));
}

void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
    this->updateTime(time);

    switch (index) {
    case 0:
        {
        this->param_36_value_set(v);
        break;
        }
    case 1:
        {
        this->param_37_value_set(v);
        break;
        }
    case 2:
        {
        this->gen_06_param_reverb_indiffusion2_value_set(v);
        break;
        }
    case 3:
        {
        this->gen_06_param_reverb_decay1_value_set(v);
        break;
        }
    case 4:
        {
        this->gen_06_param_reverb_decay_value_set(v);
        break;
        }
    case 5:
        {
        this->gen_06_param_reverb_drywet_value_set(v);
        break;
        }
    case 6:
        {
        this->gen_06_param_reverb_inbandwidth_value_set(v);
        break;
        }
    case 7:
        {
        this->gen_06_param_reverb_damping_value_set(v);
        break;
        }
    case 8:
        {
        this->gen_06_param_reverb_decay2_value_set(v);
        break;
        }
    case 9:
        {
        this->gen_06_param_reverb_indiffusion1_value_set(v);
        break;
        }
    case 10:
        {
        this->gen_06_param_reverb_predelay_value_set(v);
        break;
        }
    default:
        {
        index -= 11;

        if (index < this->p_14->getNumParameters())
            this->p_14->setParameterValue(index, v, time);

        index -= this->p_14->getNumParameters();

        if (index < this->p_15->getNumParameters())
            this->p_15->setParameterValue(index, v, time);

        index -= this->p_15->getNumParameters();

        if (index < this->p_16->getNumParameters())
            this->p_16->setParameterValue(index, v, time);

        index -= this->p_16->getNumParameters();

        if (index < this->p_17->getNumParameters())
            this->p_17->setParameterValue(index, v, time);

        index -= this->p_17->getNumParameters();

        if (index < this->p_18->getNumParameters())
            this->p_18->setParameterValue(index, v, time);

        index -= this->p_18->getNumParameters();

        if (index < this->p_19->getNumParameters())
            this->p_19->setParameterValue(index, v, time);

        index -= this->p_19->getNumParameters();

        if (index < this->p_20->getNumParameters())
            this->p_20->setParameterValue(index, v, time);

        break;
        }
    }
}

void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
    this->setParameterValue(index, value, time);
}

void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
    this->setParameterValue(index, this->getParameterValue(index), time);
}

void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
    this->setParameterValueNormalized(index, value, time);
}

ParameterValue getParameterValue(ParameterIndex index)  {
    switch (index) {
    case 0:
        {
        return this->param_36_value;
        }
    case 1:
        {
        return this->param_37_value;
        }
    case 2:
        {
        return this->gen_06_param_reverb_indiffusion2_value;
        }
    case 3:
        {
        return this->gen_06_param_reverb_decay1_value;
        }
    case 4:
        {
        return this->gen_06_param_reverb_decay_value;
        }
    case 5:
        {
        return this->gen_06_param_reverb_drywet_value;
        }
    case 6:
        {
        return this->gen_06_param_reverb_inbandwidth_value;
        }
    case 7:
        {
        return this->gen_06_param_reverb_damping_value;
        }
    case 8:
        {
        return this->gen_06_param_reverb_decay2_value;
        }
    case 9:
        {
        return this->gen_06_param_reverb_indiffusion1_value;
        }
    case 10:
        {
        return this->gen_06_param_reverb_predelay_value;
        }
    default:
        {
        index -= 11;

        if (index < this->p_14->getNumParameters())
            return this->p_14->getParameterValue(index);

        index -= this->p_14->getNumParameters();

        if (index < this->p_15->getNumParameters())
            return this->p_15->getParameterValue(index);

        index -= this->p_15->getNumParameters();

        if (index < this->p_16->getNumParameters())
            return this->p_16->getParameterValue(index);

        index -= this->p_16->getNumParameters();

        if (index < this->p_17->getNumParameters())
            return this->p_17->getParameterValue(index);

        index -= this->p_17->getNumParameters();

        if (index < this->p_18->getNumParameters())
            return this->p_18->getParameterValue(index);

        index -= this->p_18->getNumParameters();

        if (index < this->p_19->getNumParameters())
            return this->p_19->getParameterValue(index);

        index -= this->p_19->getNumParameters();

        if (index < this->p_20->getNumParameters())
            return this->p_20->getParameterValue(index);

        return 0;
        }
    }
}

ParameterIndex getNumSignalInParameters() const {
    return 0;
}

ParameterIndex getNumSignalOutParameters() const {
    return 0;
}

ParameterIndex getNumParameters() const {
    return 11 + this->p_14->getNumParameters() + this->p_15->getNumParameters() + this->p_16->getNumParameters() + this->p_17->getNumParameters() + this->p_18->getNumParameters() + this->p_19->getNumParameters() + this->p_20->getNumParameters();
}

ConstCharPointer getParameterName(ParameterIndex index) const {
    switch (index) {
    case 0:
        {
        return "drive";
        }
    case 1:
        {
        return "bpm";
        }
    case 2:
        {
        return "reverb/indiffusion2";
        }
    case 3:
        {
        return "reverb/decay1";
        }
    case 4:
        {
        return "reverb/decay";
        }
    case 5:
        {
        return "reverb/drywet";
        }
    case 6:
        {
        return "reverb/inbandwidth";
        }
    case 7:
        {
        return "reverb/damping";
        }
    case 8:
        {
        return "reverb/decay2";
        }
    case 9:
        {
        return "reverb/indiffusion1";
        }
    case 10:
        {
        return "reverb/predelay";
        }
    default:
        {
        index -= 11;

        if (index < this->p_14->getNumParameters())
            return this->p_14->getParameterName(index);

        index -= this->p_14->getNumParameters();

        if (index < this->p_15->getNumParameters())
            return this->p_15->getParameterName(index);

        index -= this->p_15->getNumParameters();

        if (index < this->p_16->getNumParameters())
            return this->p_16->getParameterName(index);

        index -= this->p_16->getNumParameters();

        if (index < this->p_17->getNumParameters())
            return this->p_17->getParameterName(index);

        index -= this->p_17->getNumParameters();

        if (index < this->p_18->getNumParameters())
            return this->p_18->getParameterName(index);

        index -= this->p_18->getNumParameters();

        if (index < this->p_19->getNumParameters())
            return this->p_19->getParameterName(index);

        index -= this->p_19->getNumParameters();

        if (index < this->p_20->getNumParameters())
            return this->p_20->getParameterName(index);

        return "bogus";
        }
    }
}

ConstCharPointer getParameterId(ParameterIndex index) const {
    switch (index) {
    case 0:
        {
        return "drive";
        }
    case 1:
        {
        return "bpm";
        }
    case 2:
        {
        return "reverb/indiffusion2";
        }
    case 3:
        {
        return "reverb/decay1";
        }
    case 4:
        {
        return "reverb/decay";
        }
    case 5:
        {
        return "reverb/drywet";
        }
    case 6:
        {
        return "reverb/inbandwidth";
        }
    case 7:
        {
        return "reverb/damping";
        }
    case 8:
        {
        return "reverb/decay2";
        }
    case 9:
        {
        return "reverb/indiffusion1";
        }
    case 10:
        {
        return "reverb/predelay";
        }
    default:
        {
        index -= 11;

        if (index < this->p_14->getNumParameters())
            return this->p_14->getParameterId(index);

        index -= this->p_14->getNumParameters();

        if (index < this->p_15->getNumParameters())
            return this->p_15->getParameterId(index);

        index -= this->p_15->getNumParameters();

        if (index < this->p_16->getNumParameters())
            return this->p_16->getParameterId(index);

        index -= this->p_16->getNumParameters();

        if (index < this->p_17->getNumParameters())
            return this->p_17->getParameterId(index);

        index -= this->p_17->getNumParameters();

        if (index < this->p_18->getNumParameters())
            return this->p_18->getParameterId(index);

        index -= this->p_18->getNumParameters();

        if (index < this->p_19->getNumParameters())
            return this->p_19->getParameterId(index);

        index -= this->p_19->getNumParameters();

        if (index < this->p_20->getNumParameters())
            return this->p_20->getParameterId(index);

        return "bogus";
        }
    }
}

void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
    {
        switch (index) {
        case 0:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 25;
            info->min = 0;
            info->max = 100;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "Drive";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 1:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 60;
            info->min = 20;
            info->max = 3000;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 2:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0.625;
            info->min = 0;
            info->max = 1;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 3:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0.7;
            info->min = 0;
            info->max = 1;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 4:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0.5;
            info->min = 0;
            info->max = 1;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 5:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0.5;
            info->min = 0;
            info->max = 1;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 6:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0.5;
            info->min = 0;
            info->max = 1;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 7:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0.5;
            info->min = 0;
            info->max = 1;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 8:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0.5;
            info->min = 0;
            info->max = 1;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 9:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0.75;
            info->min = 0;
            info->max = 1;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 10:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 10;
            info->min = 0;
            info->max = 100;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        default:
            {
            index -= 11;

            if (index < this->p_14->getNumParameters())
                this->p_14->getParameterInfo(index, info);

            index -= this->p_14->getNumParameters();

            if (index < this->p_15->getNumParameters())
                this->p_15->getParameterInfo(index, info);

            index -= this->p_15->getNumParameters();

            if (index < this->p_16->getNumParameters())
                this->p_16->getParameterInfo(index, info);

            index -= this->p_16->getNumParameters();

            if (index < this->p_17->getNumParameters())
                this->p_17->getParameterInfo(index, info);

            index -= this->p_17->getNumParameters();

            if (index < this->p_18->getNumParameters())
                this->p_18->getParameterInfo(index, info);

            index -= this->p_18->getNumParameters();

            if (index < this->p_19->getNumParameters())
                this->p_19->getParameterInfo(index, info);

            index -= this->p_19->getNumParameters();

            if (index < this->p_20->getNumParameters())
                this->p_20->getParameterInfo(index, info);

            break;
            }
        }
    }
}

void sendParameter(ParameterIndex index, bool ignoreValue) {
    this->getEngine()->notifyParameterValueChanged(index, (ignoreValue ? 0 : this->getParameterValue(index)), ignoreValue);
}

ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
    if (subpatcher == this->p_14)
        return 11;

    if (subpatcher == this->p_15)
        return 11 + this->p_14->getNumParameters();

    if (subpatcher == this->p_16)
        return 11 + this->p_14->getNumParameters() + this->p_15->getNumParameters();

    if (subpatcher == this->p_17)
        return 11 + this->p_14->getNumParameters() + this->p_15->getNumParameters() + this->p_16->getNumParameters();

    if (subpatcher == this->p_18)
        return 11 + this->p_14->getNumParameters() + this->p_15->getNumParameters() + this->p_16->getNumParameters() + this->p_17->getNumParameters();

    if (subpatcher == this->p_19)
        return 11 + this->p_14->getNumParameters() + this->p_15->getNumParameters() + this->p_16->getNumParameters() + this->p_17->getNumParameters() + this->p_18->getNumParameters();

    if (subpatcher == this->p_20)
        return 11 + this->p_14->getNumParameters() + this->p_15->getNumParameters() + this->p_16->getNumParameters() + this->p_17->getNumParameters() + this->p_18->getNumParameters() + this->p_19->getNumParameters();

    return 0;
}

ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
    if (steps == 1) {
        if (normalizedValue > 0) {
            normalizedValue = 1.;
        }
    } else {
        ParameterValue oneStep = (number)1. / (steps - 1);
        ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
        normalizedValue = numberOfSteps * oneStep;
    }

    return normalizedValue;
}

ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
    switch (index) {
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
        {
        {
            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            ParameterValue normalizedValue = (value - 0) / (1 - 0);
            return normalizedValue;
        }
        }
    case 0:
    case 10:
        {
        {
            value = (value < 0 ? 0 : (value > 100 ? 100 : value));
            ParameterValue normalizedValue = (value - 0) / (100 - 0);
            return normalizedValue;
        }
        }
    case 1:
        {
        {
            value = (value < 20 ? 20 : (value > 3000 ? 3000 : value));
            ParameterValue normalizedValue = (value - 20) / (3000 - 20);
            return normalizedValue;
        }
        }
    default:
        {
        index -= 11;

        if (index < this->p_14->getNumParameters())
            return this->p_14->convertToNormalizedParameterValue(index, value);

        index -= this->p_14->getNumParameters();

        if (index < this->p_15->getNumParameters())
            return this->p_15->convertToNormalizedParameterValue(index, value);

        index -= this->p_15->getNumParameters();

        if (index < this->p_16->getNumParameters())
            return this->p_16->convertToNormalizedParameterValue(index, value);

        index -= this->p_16->getNumParameters();

        if (index < this->p_17->getNumParameters())
            return this->p_17->convertToNormalizedParameterValue(index, value);

        index -= this->p_17->getNumParameters();

        if (index < this->p_18->getNumParameters())
            return this->p_18->convertToNormalizedParameterValue(index, value);

        index -= this->p_18->getNumParameters();

        if (index < this->p_19->getNumParameters())
            return this->p_19->convertToNormalizedParameterValue(index, value);

        index -= this->p_19->getNumParameters();

        if (index < this->p_20->getNumParameters())
            return this->p_20->convertToNormalizedParameterValue(index, value);

        return value;
        }
    }
}

ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
    value = (value < 0 ? 0 : (value > 1 ? 1 : value));

    switch (index) {
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
        {
        {
            {
                return 0 + value * (1 - 0);
            }
        }
        }
    case 0:
    case 10:
        {
        {
            {
                return 0 + value * (100 - 0);
            }
        }
        }
    case 1:
        {
        {
            {
                return 20 + value * (3000 - 20);
            }
        }
        }
    default:
        {
        index -= 11;

        if (index < this->p_14->getNumParameters())
            return this->p_14->convertFromNormalizedParameterValue(index, value);

        index -= this->p_14->getNumParameters();

        if (index < this->p_15->getNumParameters())
            return this->p_15->convertFromNormalizedParameterValue(index, value);

        index -= this->p_15->getNumParameters();

        if (index < this->p_16->getNumParameters())
            return this->p_16->convertFromNormalizedParameterValue(index, value);

        index -= this->p_16->getNumParameters();

        if (index < this->p_17->getNumParameters())
            return this->p_17->convertFromNormalizedParameterValue(index, value);

        index -= this->p_17->getNumParameters();

        if (index < this->p_18->getNumParameters())
            return this->p_18->convertFromNormalizedParameterValue(index, value);

        index -= this->p_18->getNumParameters();

        if (index < this->p_19->getNumParameters())
            return this->p_19->convertFromNormalizedParameterValue(index, value);

        index -= this->p_19->getNumParameters();

        if (index < this->p_20->getNumParameters())
            return this->p_20->convertFromNormalizedParameterValue(index, value);

        return value;
        }
    }
}

ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
    switch (index) {
    case 0:
        {
        return this->param_36_value_constrain(value);
        }
    case 1:
        {
        return this->param_37_value_constrain(value);
        }
    case 2:
        {
        return this->gen_06_param_reverb_indiffusion2_value_constrain(value);
        }
    case 3:
        {
        return this->gen_06_param_reverb_decay1_value_constrain(value);
        }
    case 4:
        {
        return this->gen_06_param_reverb_decay_value_constrain(value);
        }
    case 5:
        {
        return this->gen_06_param_reverb_drywet_value_constrain(value);
        }
    case 6:
        {
        return this->gen_06_param_reverb_inbandwidth_value_constrain(value);
        }
    case 7:
        {
        return this->gen_06_param_reverb_damping_value_constrain(value);
        }
    case 8:
        {
        return this->gen_06_param_reverb_decay2_value_constrain(value);
        }
    case 9:
        {
        return this->gen_06_param_reverb_indiffusion1_value_constrain(value);
        }
    case 10:
        {
        return this->gen_06_param_reverb_predelay_value_constrain(value);
        }
    default:
        {
        index -= 11;

        if (index < this->p_14->getNumParameters())
            return this->p_14->constrainParameterValue(index, value);

        index -= this->p_14->getNumParameters();

        if (index < this->p_15->getNumParameters())
            return this->p_15->constrainParameterValue(index, value);

        index -= this->p_15->getNumParameters();

        if (index < this->p_16->getNumParameters())
            return this->p_16->constrainParameterValue(index, value);

        index -= this->p_16->getNumParameters();

        if (index < this->p_17->getNumParameters())
            return this->p_17->constrainParameterValue(index, value);

        index -= this->p_17->getNumParameters();

        if (index < this->p_18->getNumParameters())
            return this->p_18->constrainParameterValue(index, value);

        index -= this->p_18->getNumParameters();

        if (index < this->p_19->getNumParameters())
            return this->p_19->constrainParameterValue(index, value);

        index -= this->p_19->getNumParameters();

        if (index < this->p_20->getNumParameters())
            return this->p_20->constrainParameterValue(index, value);

        return value;
        }
    }
}

void scheduleParamInit(ParameterIndex index, Index order) {
    this->paramInitIndices->push(index);
    this->paramInitOrder->push(order);
}

void processParamInitEvents() {
    this->listquicksort(
        this->paramInitOrder,
        this->paramInitIndices,
        0,
        (int)(this->paramInitOrder->length - 1),
        true
    );

    for (Index i = 0; i < this->paramInitOrder->length; i++) {
        this->getEngine()->scheduleParameterBang(this->paramInitIndices[i], 0);
    }
}

void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
    RNBO_UNUSED(value);
    RNBO_UNUSED(hasValue);
    this->updateTime(time);

    switch (index) {
    case 1935387534:
        {
        this->metro_01_tick_bang();
        break;
        }
    case -871642103:
        {
        this->loadbang_06_startupbang_bang();
        break;
        }
    }
}

void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}

void processOutletEvent(
    EngineLink* sender,
    OutletIndex index,
    ParameterValue value,
    MillisecondTime time
) {
    this->updateTime(time);
    this->processOutletAtCurrentTime(sender, index, value);
}

void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
    this->updateTime(time);

    switch (tag) {
    case TAG("valin"):
        {
        if (TAG("toggle_obj-37") == objectId)
            this->toggle_01_valin_set(payload);

        if (TAG("number_obj-96") == objectId)
            this->numberobj_43_valin_set(payload);

        if (TAG("number_obj-60") == objectId)
            this->numberobj_44_valin_set(payload);

        if (TAG("number_obj-31") == objectId)
            this->numberobj_45_valin_set(payload);

        if (TAG("toggle_obj-41") == objectId)
            this->toggle_02_valin_set(payload);

        if (TAG("number_obj-22") == objectId)
            this->numberobj_46_valin_set(payload);

        if (TAG("number_obj-14") == objectId)
            this->numberobj_47_valin_set(payload);

        break;
        }
    case TAG("format"):
        {
        if (TAG("number_obj-96") == objectId)
            this->numberobj_43_format_set(payload);

        if (TAG("number_obj-60") == objectId)
            this->numberobj_44_format_set(payload);

        if (TAG("number_obj-31") == objectId)
            this->numberobj_45_format_set(payload);

        if (TAG("number_obj-22") == objectId)
            this->numberobj_46_format_set(payload);

        if (TAG("number_obj-14") == objectId)
            this->numberobj_47_format_set(payload);

        break;
        }
    case TAG("listin"):
        {
        if (TAG("message_obj-6") == objectId)
            this->message_01_listin_number_set(payload);

        if (TAG("message_obj-20") == objectId)
            this->message_02_listin_number_set(payload);

        if (TAG("message_obj-34") == objectId)
            this->message_03_listin_number_set(payload);

        if (TAG("message_obj-35") == objectId)
            this->message_04_listin_number_set(payload);

        if (TAG("message_obj-38") == objectId)
            this->message_05_listin_number_set(payload);

        if (TAG("message_obj-40") == objectId)
            this->message_06_listin_number_set(payload);

        break;
        }
    }

    this->p_14->processNumMessage(tag, objectId, time, payload);
    this->p_15->processNumMessage(tag, objectId, time, payload);
    this->p_16->processNumMessage(tag, objectId, time, payload);
    this->p_17->processNumMessage(tag, objectId, time, payload);
    this->p_18->processNumMessage(tag, objectId, time, payload);
    this->p_19->processNumMessage(tag, objectId, time, payload);
    this->p_20->processNumMessage(tag, objectId, time, payload);
}

void processListMessage(
    MessageTag tag,
    MessageTag objectId,
    MillisecondTime time,
    const list& payload
) {
    this->updateTime(time);

    switch (tag) {
    case TAG("listin"):
        {
        if (TAG("message_obj-6") == objectId)
            this->message_01_listin_list_set(payload);

        if (TAG("message_obj-20") == objectId)
            this->message_02_listin_list_set(payload);

        if (TAG("message_obj-34") == objectId)
            this->message_03_listin_list_set(payload);

        if (TAG("message_obj-35") == objectId)
            this->message_04_listin_list_set(payload);

        if (TAG("message_obj-38") == objectId)
            this->message_05_listin_list_set(payload);

        if (TAG("message_obj-40") == objectId)
            this->message_06_listin_list_set(payload);

        break;
        }
    }

    this->p_14->processListMessage(tag, objectId, time, payload);
    this->p_15->processListMessage(tag, objectId, time, payload);
    this->p_16->processListMessage(tag, objectId, time, payload);
    this->p_17->processListMessage(tag, objectId, time, payload);
    this->p_18->processListMessage(tag, objectId, time, payload);
    this->p_19->processListMessage(tag, objectId, time, payload);
    this->p_20->processListMessage(tag, objectId, time, payload);
}

void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
    this->updateTime(time);

    switch (tag) {
    case TAG("bangin"):
        {
        if (TAG("button_obj-30") == objectId)
            this->button_06_bangin_bang();

        if (TAG("button_obj-28") == objectId)
            this->button_07_bangin_bang();

        break;
        }
    case TAG("listin"):
        {
        if (TAG("message_obj-6") == objectId)
            this->message_01_listin_bang_bang();

        if (TAG("message_obj-20") == objectId)
            this->message_02_listin_bang_bang();

        if (TAG("message_obj-34") == objectId)
            this->message_03_listin_bang_bang();

        if (TAG("message_obj-35") == objectId)
            this->message_04_listin_bang_bang();

        if (TAG("message_obj-38") == objectId)
            this->message_05_listin_bang_bang();

        if (TAG("message_obj-40") == objectId)
            this->message_06_listin_bang_bang();

        break;
        }
    case TAG("startupbang"):
        {
        if (TAG("loadbang_obj-43") == objectId)
            this->loadbang_06_startupbang_bang();

        break;
        }
    }

    this->p_14->processBangMessage(tag, objectId, time);
    this->p_15->processBangMessage(tag, objectId, time);
    this->p_16->processBangMessage(tag, objectId, time);
    this->p_17->processBangMessage(tag, objectId, time);
    this->p_18->processBangMessage(tag, objectId, time);
    this->p_19->processBangMessage(tag, objectId, time);
    this->p_20->processBangMessage(tag, objectId, time);
}

MessageTagInfo resolveTag(MessageTag tag) const {
    switch (tag) {
    case TAG("valout"):
        {
        return "valout";
        }
    case TAG("toggle_obj-37"):
        {
        return "toggle_obj-37";
        }
    case TAG("number_obj-96"):
        {
        return "number_obj-96";
        }
    case TAG("setup"):
        {
        return "setup";
        }
    case TAG("bangout"):
        {
        return "bangout";
        }
    case TAG("button_obj-30"):
        {
        return "button_obj-30";
        }
    case TAG("listout"):
        {
        return "listout";
        }
    case TAG("message_obj-6"):
        {
        return "message_obj-6";
        }
    case TAG("message_obj-20"):
        {
        return "message_obj-20";
        }
    case TAG("message_obj-34"):
        {
        return "message_obj-34";
        }
    case TAG("message_obj-35"):
        {
        return "message_obj-35";
        }
    case TAG("number_obj-60"):
        {
        return "number_obj-60";
        }
    case TAG("message_obj-38"):
        {
        return "message_obj-38";
        }
    case TAG("number_obj-31"):
        {
        return "number_obj-31";
        }
    case TAG("button_obj-28"):
        {
        return "button_obj-28";
        }
    case TAG("message_obj-40"):
        {
        return "message_obj-40";
        }
    case TAG("toggle_obj-41"):
        {
        return "toggle_obj-41";
        }
    case TAG("number_obj-22"):
        {
        return "number_obj-22";
        }
    case TAG("number_obj-14"):
        {
        return "number_obj-14";
        }
    case TAG("valin"):
        {
        return "valin";
        }
    case TAG("format"):
        {
        return "format";
        }
    case TAG("bangin"):
        {
        return "bangin";
        }
    case TAG("listin"):
        {
        return "listin";
        }
    case TAG("startupbang"):
        {
        return "startupbang";
        }
    case TAG("loadbang_obj-43"):
        {
        return "loadbang_obj-43";
        }
    }

    auto subpatchResult_0 = this->p_14->resolveTag(tag);

    if (subpatchResult_0)
        return subpatchResult_0;

    auto subpatchResult_1 = this->p_15->resolveTag(tag);

    if (subpatchResult_1)
        return subpatchResult_1;

    auto subpatchResult_2 = this->p_16->resolveTag(tag);

    if (subpatchResult_2)
        return subpatchResult_2;

    auto subpatchResult_3 = this->p_17->resolveTag(tag);

    if (subpatchResult_3)
        return subpatchResult_3;

    auto subpatchResult_4 = this->p_18->resolveTag(tag);

    if (subpatchResult_4)
        return subpatchResult_4;

    auto subpatchResult_5 = this->p_19->resolveTag(tag);

    if (subpatchResult_5)
        return subpatchResult_5;

    auto subpatchResult_6 = this->p_20->resolveTag(tag);

    if (subpatchResult_6)
        return subpatchResult_6;

    return "";
}

MessageIndex getNumMessages() const {
    return 0;
}

const MessageInfo& getMessageInfo(MessageIndex index) const {
    switch (index) {

    }

    return NullMessageInfo;
}

protected:

void param_36_value_set(number v) {
    v = this->param_36_value_constrain(v);
    this->param_36_value = v;
    this->sendParameter(0, false);

    if (this->param_36_value != this->param_36_lastValue) {
        this->getEngine()->presetTouched();
        this->param_36_lastValue = this->param_36_value;
    }

    this->numberobj_44_value_set(v);
}

void param_37_value_set(number v) {
    v = this->param_37_value_constrain(v);
    this->param_37_value = v;
    this->sendParameter(1, false);

    if (this->param_37_value != this->param_37_lastValue) {
        this->getEngine()->presetTouched();
        this->param_37_lastValue = this->param_37_value;
    }

    this->numberobj_47_value_set(v);
}

void gen_06_param_reverb_indiffusion2_value_set(number v) {
    v = this->gen_06_param_reverb_indiffusion2_value_constrain(v);
    this->gen_06_param_reverb_indiffusion2_value = v;
    this->sendParameter(2, false);

    if (this->gen_06_param_reverb_indiffusion2_value != this->gen_06_param_reverb_indiffusion2_lastValue) {
        this->getEngine()->presetTouched();
        this->gen_06_param_reverb_indiffusion2_lastValue = this->gen_06_param_reverb_indiffusion2_value;
    }

    this->gen_06_indiffusion2_set(v);
}

void gen_06_param_reverb_decay1_value_set(number v) {
    v = this->gen_06_param_reverb_decay1_value_constrain(v);
    this->gen_06_param_reverb_decay1_value = v;
    this->sendParameter(3, false);

    if (this->gen_06_param_reverb_decay1_value != this->gen_06_param_reverb_decay1_lastValue) {
        this->getEngine()->presetTouched();
        this->gen_06_param_reverb_decay1_lastValue = this->gen_06_param_reverb_decay1_value;
    }

    this->gen_06_decay1_set(v);
}

void gen_06_param_reverb_decay_value_set(number v) {
    v = this->gen_06_param_reverb_decay_value_constrain(v);
    this->gen_06_param_reverb_decay_value = v;
    this->sendParameter(4, false);

    if (this->gen_06_param_reverb_decay_value != this->gen_06_param_reverb_decay_lastValue) {
        this->getEngine()->presetTouched();
        this->gen_06_param_reverb_decay_lastValue = this->gen_06_param_reverb_decay_value;
    }

    this->gen_06_decay_set(v);
}

void gen_06_param_reverb_drywet_value_set(number v) {
    v = this->gen_06_param_reverb_drywet_value_constrain(v);
    this->gen_06_param_reverb_drywet_value = v;
    this->sendParameter(5, false);

    if (this->gen_06_param_reverb_drywet_value != this->gen_06_param_reverb_drywet_lastValue) {
        this->getEngine()->presetTouched();
        this->gen_06_param_reverb_drywet_lastValue = this->gen_06_param_reverb_drywet_value;
    }

    this->gen_06_drywet_set(v);
}

void gen_06_param_reverb_inbandwidth_value_set(number v) {
    v = this->gen_06_param_reverb_inbandwidth_value_constrain(v);
    this->gen_06_param_reverb_inbandwidth_value = v;
    this->sendParameter(6, false);

    if (this->gen_06_param_reverb_inbandwidth_value != this->gen_06_param_reverb_inbandwidth_lastValue) {
        this->getEngine()->presetTouched();
        this->gen_06_param_reverb_inbandwidth_lastValue = this->gen_06_param_reverb_inbandwidth_value;
    }

    this->gen_06_inbandwidth_set(v);
}

void gen_06_param_reverb_damping_value_set(number v) {
    v = this->gen_06_param_reverb_damping_value_constrain(v);
    this->gen_06_param_reverb_damping_value = v;
    this->sendParameter(7, false);

    if (this->gen_06_param_reverb_damping_value != this->gen_06_param_reverb_damping_lastValue) {
        this->getEngine()->presetTouched();
        this->gen_06_param_reverb_damping_lastValue = this->gen_06_param_reverb_damping_value;
    }

    this->gen_06_damping_set(v);
}

void gen_06_param_reverb_decay2_value_set(number v) {
    v = this->gen_06_param_reverb_decay2_value_constrain(v);
    this->gen_06_param_reverb_decay2_value = v;
    this->sendParameter(8, false);

    if (this->gen_06_param_reverb_decay2_value != this->gen_06_param_reverb_decay2_lastValue) {
        this->getEngine()->presetTouched();
        this->gen_06_param_reverb_decay2_lastValue = this->gen_06_param_reverb_decay2_value;
    }

    this->gen_06_decay2_set(v);
}

void gen_06_param_reverb_indiffusion1_value_set(number v) {
    v = this->gen_06_param_reverb_indiffusion1_value_constrain(v);
    this->gen_06_param_reverb_indiffusion1_value = v;
    this->sendParameter(9, false);

    if (this->gen_06_param_reverb_indiffusion1_value != this->gen_06_param_reverb_indiffusion1_lastValue) {
        this->getEngine()->presetTouched();
        this->gen_06_param_reverb_indiffusion1_lastValue = this->gen_06_param_reverb_indiffusion1_value;
    }

    this->gen_06_indiffusion1_set(v);
}

void gen_06_param_reverb_predelay_value_set(number v) {
    v = this->gen_06_param_reverb_predelay_value_constrain(v);
    this->gen_06_param_reverb_predelay_value = v;
    this->sendParameter(10, false);

    if (this->gen_06_param_reverb_predelay_value != this->gen_06_param_reverb_predelay_lastValue) {
        this->getEngine()->presetTouched();
        this->gen_06_param_reverb_predelay_lastValue = this->gen_06_param_reverb_predelay_value;
    }

    this->gen_06_predelay_set(v);
}

void toggle_01_valin_set(number v) {
    this->toggle_01_value_number_set(v);
}

void metro_01_tick_bang() {
    this->metro_01_tickout_bang();
    this->getEngine()->flushClockEvents(this, 1935387534, false);;

    if ((bool)(this->metro_01_on)) {
        this->metro_01_last = this->currenttime();

        {
            this->metro_01_next = this->metro_01_last + this->metro_01_interval;
            this->getEngine()->scheduleClockEvent(this, 1935387534, this->metro_01_interval + this->_currentTime);;
        }
    }
}

void numberobj_43_valin_set(number v) {
    this->numberobj_43_value_set(v);
}

void numberobj_43_format_set(number v) {
    this->numberobj_43_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void button_06_bangin_bang() {
    this->button_06_bangval_bang();
}

void message_01_listin_list_set(const list& v) {
    this->message_01_set_set(v);
}

void message_01_listin_number_set(number v) {
    this->message_01_set_set(v);
}

void message_01_listin_bang_bang() {
    this->message_01_trigger_bang();
}

void message_02_listin_list_set(const list& v) {
    this->message_02_set_set(v);
}

void message_02_listin_number_set(number v) {
    this->message_02_set_set(v);
}

void message_02_listin_bang_bang() {
    this->message_02_trigger_bang();
}

void message_03_listin_list_set(const list& v) {
    this->message_03_set_set(v);
}

void message_03_listin_number_set(number v) {
    this->message_03_set_set(v);
}

void message_03_listin_bang_bang() {
    this->message_03_trigger_bang();
}

void message_04_listin_list_set(const list& v) {
    this->message_04_set_set(v);
}

void message_04_listin_number_set(number v) {
    this->message_04_set_set(v);
}

void message_04_listin_bang_bang() {
    this->message_04_trigger_bang();
}

void numberobj_44_valin_set(number v) {
    this->numberobj_44_value_set(v);
}

void numberobj_44_format_set(number v) {
    this->numberobj_44_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void message_05_listin_list_set(const list& v) {
    this->message_05_set_set(v);
}

void message_05_listin_number_set(number v) {
    this->message_05_set_set(v);
}

void message_05_listin_bang_bang() {
    this->message_05_trigger_bang();
}

void numberobj_45_valin_set(number v) {
    this->numberobj_45_value_set(v);
}

void numberobj_45_format_set(number v) {
    this->numberobj_45_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void button_07_bangin_bang() {
    this->button_07_bangval_bang();
}

void message_06_listin_list_set(const list& v) {
    this->message_06_set_set(v);
}

void message_06_listin_number_set(number v) {
    this->message_06_set_set(v);
}

void message_06_listin_bang_bang() {
    this->message_06_trigger_bang();
}

void loadbang_06_startupbang_bang() {
    this->loadbang_06_output_bang();
}

void toggle_02_valin_set(number v) {
    this->toggle_02_value_number_set(v);
}

void numberobj_46_valin_set(number v) {
    this->numberobj_46_value_set(v);
}

void numberobj_46_format_set(number v) {
    this->numberobj_46_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_47_valin_set(number v) {
    this->numberobj_47_value_set(v);
}

void numberobj_47_format_set(number v) {
    this->numberobj_47_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

number msToSamps(MillisecondTime ms, number sampleRate) {
    return ms * sampleRate * 0.001;
}

MillisecondTime sampsToMs(SampleIndex samps) {
    return samps * (this->invsr * 1000);
}

Index getMaxBlockSize() const {
    return this->maxvs;
}

number getSampleRate() const {
    return this->sr;
}

bool hasFixedVectorSize() const {
    return false;
}

Index getNumInputChannels() const {
    return 0;
}

Index getNumOutputChannels() const {
    return 2;
}

void allocateDataRefs() {
    this->p_14->allocateDataRefs();
    this->p_15->allocateDataRefs();
    this->p_16->allocateDataRefs();
    this->p_17->allocateDataRefs();
    this->p_18->allocateDataRefs();
    this->p_19->allocateDataRefs();
    this->p_20->allocateDataRefs();
    this->gen_06_cycle_76_buffer->requestSize(16384, 1);
    this->gen_06_cycle_76_buffer->setSampleRate(this->sr);
    this->gen_06_cycle_87_buffer->requestSize(16384, 1);
    this->gen_06_cycle_87_buffer->setSampleRate(this->sr);
    this->gen_06_cycle_76_buffer = this->gen_06_cycle_76_buffer->allocateIfNeeded();
    this->gen_06_cycle_87_buffer = this->gen_06_cycle_87_buffer->allocateIfNeeded();

    if (this->RNBODefaultSinus->hasRequestedSize()) {
        if (this->RNBODefaultSinus->wantsFill())
            this->fillRNBODefaultSinus(this->RNBODefaultSinus);

        this->getEngine()->sendDataRefUpdated(0);
    }

    if (this->RNBODefaultMtofLookupTable256->hasRequestedSize()) {
        if (this->RNBODefaultMtofLookupTable256->wantsFill())
            this->fillRNBODefaultMtofLookupTable256(this->RNBODefaultMtofLookupTable256);

        this->getEngine()->sendDataRefUpdated(1);
    }

    this->gen_06_delay_1_buffer = this->gen_06_delay_1_buffer->allocateIfNeeded();

    if (this->gen_06_delay_1_bufferobj->hasRequestedSize()) {
        if (this->gen_06_delay_1_bufferobj->wantsFill())
            this->zeroDataRef(this->gen_06_delay_1_bufferobj);

        this->getEngine()->sendDataRefUpdated(2);
    }

    this->gen_06_delay_2_buffer = this->gen_06_delay_2_buffer->allocateIfNeeded();

    if (this->gen_06_delay_2_bufferobj->hasRequestedSize()) {
        if (this->gen_06_delay_2_bufferobj->wantsFill())
            this->zeroDataRef(this->gen_06_delay_2_bufferobj);

        this->getEngine()->sendDataRefUpdated(3);
    }

    this->gen_06_delay_3_buffer = this->gen_06_delay_3_buffer->allocateIfNeeded();

    if (this->gen_06_delay_3_bufferobj->hasRequestedSize()) {
        if (this->gen_06_delay_3_bufferobj->wantsFill())
            this->zeroDataRef(this->gen_06_delay_3_bufferobj);

        this->getEngine()->sendDataRefUpdated(4);
    }

    this->gen_06_delay_4_buffer = this->gen_06_delay_4_buffer->allocateIfNeeded();

    if (this->gen_06_delay_4_bufferobj->hasRequestedSize()) {
        if (this->gen_06_delay_4_bufferobj->wantsFill())
            this->zeroDataRef(this->gen_06_delay_4_bufferobj);

        this->getEngine()->sendDataRefUpdated(5);
    }

    this->gen_06_delay_5_buffer = this->gen_06_delay_5_buffer->allocateIfNeeded();

    if (this->gen_06_delay_5_bufferobj->hasRequestedSize()) {
        if (this->gen_06_delay_5_bufferobj->wantsFill())
            this->zeroDataRef(this->gen_06_delay_5_bufferobj);

        this->getEngine()->sendDataRefUpdated(6);
    }

    this->gen_06_delay_6_buffer = this->gen_06_delay_6_buffer->allocateIfNeeded();

    if (this->gen_06_delay_6_bufferobj->hasRequestedSize()) {
        if (this->gen_06_delay_6_bufferobj->wantsFill())
            this->zeroDataRef(this->gen_06_delay_6_bufferobj);

        this->getEngine()->sendDataRefUpdated(7);
    }

    this->gen_06_delay_7_buffer = this->gen_06_delay_7_buffer->allocateIfNeeded();

    if (this->gen_06_delay_7_bufferobj->hasRequestedSize()) {
        if (this->gen_06_delay_7_bufferobj->wantsFill())
            this->zeroDataRef(this->gen_06_delay_7_bufferobj);

        this->getEngine()->sendDataRefUpdated(8);
    }

    this->gen_06_delay_8_buffer = this->gen_06_delay_8_buffer->allocateIfNeeded();

    if (this->gen_06_delay_8_bufferobj->hasRequestedSize()) {
        if (this->gen_06_delay_8_bufferobj->wantsFill())
            this->zeroDataRef(this->gen_06_delay_8_bufferobj);

        this->getEngine()->sendDataRefUpdated(9);
    }

    this->gen_06_delay_9_buffer = this->gen_06_delay_9_buffer->allocateIfNeeded();

    if (this->gen_06_delay_9_bufferobj->hasRequestedSize()) {
        if (this->gen_06_delay_9_bufferobj->wantsFill())
            this->zeroDataRef(this->gen_06_delay_9_bufferobj);

        this->getEngine()->sendDataRefUpdated(10);
    }

    this->gen_06_delay_10_buffer = this->gen_06_delay_10_buffer->allocateIfNeeded();

    if (this->gen_06_delay_10_bufferobj->hasRequestedSize()) {
        if (this->gen_06_delay_10_bufferobj->wantsFill())
            this->zeroDataRef(this->gen_06_delay_10_bufferobj);

        this->getEngine()->sendDataRefUpdated(11);
    }

    this->gen_06_delay_11_buffer = this->gen_06_delay_11_buffer->allocateIfNeeded();

    if (this->gen_06_delay_11_bufferobj->hasRequestedSize()) {
        if (this->gen_06_delay_11_bufferobj->wantsFill())
            this->zeroDataRef(this->gen_06_delay_11_bufferobj);

        this->getEngine()->sendDataRefUpdated(12);
    }

    this->gen_06_delay_12_buffer = this->gen_06_delay_12_buffer->allocateIfNeeded();

    if (this->gen_06_delay_12_bufferobj->hasRequestedSize()) {
        if (this->gen_06_delay_12_bufferobj->wantsFill())
            this->zeroDataRef(this->gen_06_delay_12_bufferobj);

        this->getEngine()->sendDataRefUpdated(13);
    }

    this->gen_06_delay_13_buffer = this->gen_06_delay_13_buffer->allocateIfNeeded();

    if (this->gen_06_delay_13_bufferobj->hasRequestedSize()) {
        if (this->gen_06_delay_13_bufferobj->wantsFill())
            this->zeroDataRef(this->gen_06_delay_13_bufferobj);

        this->getEngine()->sendDataRefUpdated(14);
    }
}

void initializeObjects() {
    this->numberobj_43_init();
    this->message_01_init();
    this->gen_06_delay_1_init();
    this->gen_06_delay_2_init();
    this->gen_06_delay_3_init();
    this->gen_06_delay_4_init();
    this->gen_06_delay_5_init();
    this->gen_06_delay_6_init();
    this->gen_06_delay_7_init();
    this->gen_06_delay_8_init();
    this->gen_06_delay_9_init();
    this->gen_06_delay_10_init();
    this->gen_06_delay_11_init();
    this->gen_06_delay_12_init();
    this->gen_06_delay_13_init();
    this->gen_06_history_14_init();
    this->gen_06_history_15_init();
    this->gen_06_history_16_init();
    this->message_02_init();
    this->message_03_init();
    this->message_04_init();
    this->numberobj_44_init();
    this->message_05_init();
    this->numberobj_45_init();
    this->message_06_init();
    this->numberobj_46_init();
    this->numberobj_47_init();
    this->p_14->initializeObjects();
    this->p_15->initializeObjects();
    this->p_16->initializeObjects();
    this->p_17->initializeObjects();
    this->p_18->initializeObjects();
    this->p_19->initializeObjects();
    this->p_20->initializeObjects();
}

void sendOutlet(OutletIndex index, ParameterValue value) {
    this->getEngine()->sendOutlet(this, index, value);
}

void startup() {
    this->updateTime(this->getEngine()->getCurrentTime());
    this->p_14->startup();
    this->p_15->startup();
    this->p_16->startup();
    this->p_17->startup();
    this->p_18->startup();
    this->p_19->startup();
    this->p_20->startup();

    if ((bool)(this->metro_01_on))
        this->metro_01_on_set(1);

    this->getEngine()->scheduleClockEvent(this, -871642103, 0 + this->_currentTime);;
    this->timevalue_01_sendValue();

    {
        this->scheduleParamInit(0, 3);
    }

    {
        this->scheduleParamInit(1, 0);
    }

    {
        this->scheduleParamInit(2, 0);
    }

    {
        this->scheduleParamInit(3, 0);
    }

    {
        this->scheduleParamInit(4, 0);
    }

    {
        this->scheduleParamInit(5, 0);
    }

    {
        this->scheduleParamInit(6, 0);
    }

    {
        this->scheduleParamInit(7, 0);
    }

    {
        this->scheduleParamInit(8, 0);
    }

    {
        this->scheduleParamInit(9, 0);
    }

    {
        this->scheduleParamInit(10, 0);
    }

    this->processParamInitEvents();
}

number param_36_value_constrain(number v) const {
    v = (v > 100 ? 100 : (v < 0 ? 0 : v));
    return v;
}

void p_15_in3_number_set(number v) {
    this->p_15->updateTime(this->_currentTime);
    this->p_15->eventinlet_08_out1_number_set(v);
}

void numberobj_44_output_set(number v) {
    this->p_15_in3_number_set(v);
}

void numberobj_44_value_set(number v) {
    this->numberobj_44_value_setter(v);
    v = this->numberobj_44_value;
    number localvalue = v;

    if ((bool)(true) && localvalue < 0) {
        localvalue = 0;
    }

    if ((bool)(true) && localvalue > 100) {
        localvalue = 100;
    }

    if (this->numberobj_44_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-60"), localvalue, this->_currentTime);
    this->numberobj_44_output_set(localvalue);
}

number param_37_value_constrain(number v) const {
    v = (v > 3000 ? 3000 : (v < 20 ? 20 : v));
    return v;
}

void transport_01_tempo_set(number v) {
    this->transport_01_tempo = v;

    if (v >= 0) {
        this->getTopLevelPatcher()->globaltransport_setTempo(this->currenttime(), v, true);
    }
}

void numberobj_47_output_set(number v) {
    this->transport_01_tempo_set(v);
}

void numberobj_47_value_set(number v) {
    this->numberobj_47_value_setter(v);
    v = this->numberobj_47_value;
    number localvalue = v;

    if (this->numberobj_47_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-14"), localvalue, this->_currentTime);
    this->numberobj_47_output_set(localvalue);
}

number gen_06_param_reverb_indiffusion2_value_constrain(number v) const {
    v = (v > 1 ? 1 : (v < 0 ? 0 : v));
    return v;
}

number gen_06_indiffusion2_constrain(number v) const {
    if (v < 0)
        v = 0;

    if (v > 1)
        v = 1;

    return v;
}

void gen_06_indiffusion2_set(number v) {
    v = this->gen_06_indiffusion2_constrain(v);
    this->gen_06_indiffusion2 = v;
}

number gen_06_param_reverb_decay1_value_constrain(number v) const {
    v = (v > 1 ? 1 : (v < 0 ? 0 : v));
    return v;
}

number gen_06_decay1_constrain(number v) const {
    if (v < 0)
        v = 0;

    if (v > 1)
        v = 1;

    return v;
}

void gen_06_decay1_set(number v) {
    v = this->gen_06_decay1_constrain(v);
    this->gen_06_decay1 = v;
}

number gen_06_param_reverb_decay_value_constrain(number v) const {
    v = (v > 1 ? 1 : (v < 0 ? 0 : v));
    return v;
}

number gen_06_decay_constrain(number v) const {
    if (v < 0)
        v = 0;

    if (v > 1)
        v = 1;

    return v;
}

void gen_06_decay_set(number v) {
    v = this->gen_06_decay_constrain(v);
    this->gen_06_decay = v;
}

number gen_06_param_reverb_drywet_value_constrain(number v) const {
    v = (v > 1 ? 1 : (v < 0 ? 0 : v));
    return v;
}

number gen_06_drywet_constrain(number v) const {
    if (v < 0)
        v = 0;

    if (v > 1)
        v = 1;

    return v;
}

void gen_06_drywet_set(number v) {
    v = this->gen_06_drywet_constrain(v);
    this->gen_06_drywet = v;
}

number gen_06_param_reverb_inbandwidth_value_constrain(number v) const {
    v = (v > 1 ? 1 : (v < 0 ? 0 : v));
    return v;
}

number gen_06_inbandwidth_constrain(number v) const {
    if (v < 0)
        v = 0;

    if (v > 1)
        v = 1;

    return v;
}

void gen_06_inbandwidth_set(number v) {
    v = this->gen_06_inbandwidth_constrain(v);
    this->gen_06_inbandwidth = v;
}

number gen_06_param_reverb_damping_value_constrain(number v) const {
    v = (v > 1 ? 1 : (v < 0 ? 0 : v));
    return v;
}

number gen_06_damping_constrain(number v) const {
    if (v < 0)
        v = 0;

    if (v > 1)
        v = 1;

    return v;
}

void gen_06_damping_set(number v) {
    v = this->gen_06_damping_constrain(v);
    this->gen_06_damping = v;
}

number gen_06_param_reverb_decay2_value_constrain(number v) const {
    v = (v > 1 ? 1 : (v < 0 ? 0 : v));
    return v;
}

number gen_06_decay2_constrain(number v) const {
    if (v < 0)
        v = 0;

    if (v > 1)
        v = 1;

    return v;
}

void gen_06_decay2_set(number v) {
    v = this->gen_06_decay2_constrain(v);
    this->gen_06_decay2 = v;
}

number gen_06_param_reverb_indiffusion1_value_constrain(number v) const {
    v = (v > 1 ? 1 : (v < 0 ? 0 : v));
    return v;
}

number gen_06_indiffusion1_constrain(number v) const {
    if (v < 0)
        v = 0;

    if (v > 1)
        v = 1;

    return v;
}

void gen_06_indiffusion1_set(number v) {
    v = this->gen_06_indiffusion1_constrain(v);
    this->gen_06_indiffusion1 = v;
}

number gen_06_param_reverb_predelay_value_constrain(number v) const {
    v = (v > 100 ? 100 : (v < 0 ? 0 : v));
    return v;
}

number gen_06_predelay_constrain(number v) const {
    if (v < 0)
        v = 0;

    if (v > 100)
        v = 100;

    return v;
}

void gen_06_predelay_set(number v) {
    v = this->gen_06_predelay_constrain(v);
    this->gen_06_predelay = v;
}

void metro_01_on_set(number v) {
    this->metro_01_on = v;
    this->getEngine()->flushClockEvents(this, 1935387534, false);;

    if ((bool)(v)) {
        {
            this->getEngine()->scheduleClockEvent(this, 1935387534, 0 + this->_currentTime);;
        }
    }
}

void toggle_01_output_set(number v) {
    this->metro_01_on_set(v);
}

void toggle_01_value_number_set(number v) {
    this->toggle_01_value_number_setter(v);
    v = this->toggle_01_value_number;
    this->getEngine()->sendNumMessage(TAG("valout"), TAG("toggle_obj-37"), v, this->_currentTime);
    this->toggle_01_output_set(v);
}

void transport_01_ticks_set(number v) {
    this->transport_01_ticks = v;
}

void transport_01_state_set(number ) {}

void transport_01_outtimesig_set(const list& ) {}

void transport_01_outtempo_set(number ) {}

void transport_01_resolution_set(number ) {}

void transport_01_units_set(number ) {}

void transport_01_beats_set(number ) {}

void numberobj_46_output_set(number ) {}

void numberobj_46_value_set(number v) {
    this->numberobj_46_value_setter(v);
    v = this->numberobj_46_value;
    number localvalue = v;

    if (this->numberobj_46_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-22"), localvalue, this->_currentTime);
    this->numberobj_46_output_set(localvalue);
}

void transport_01_bars_set(number v) {
    this->numberobj_46_value_set(v);
}

void transport_01_input_bang_bang() {
    auto currbeattime = this->beattime();
    auto currtimesig = this->timesignature();
    auto currticks = this->beatstoticks(currbeattime);
    number beatmult = currbeattime * (currtimesig[1] / (number)4);
    this->transport_01_ticks_set(currticks);
    this->transport_01_state_set(this->transport());
    this->transport_01_outtimesig_set({currtimesig[0], currtimesig[1]});
    this->transport_01_outtempo_set(this->tempo());
    this->transport_01_resolution_set(480.);
    array<number, 3> bbu = this->getTopLevelPatcher()->globaltransport_getBBU(this->currenttime());
    this->transport_01_units_set(bbu[2]);
    this->transport_01_beats_set(bbu[1]);
    this->transport_01_bars_set(bbu[0]);
}

void numberobj_45_output_set(number ) {}

void numberobj_45_value_set(number v) {
    this->numberobj_45_value_setter(v);
    v = this->numberobj_45_value;
    number localvalue = v;

    if (this->numberobj_45_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-31"), localvalue, this->_currentTime);
    this->numberobj_45_output_set(localvalue);
}

void counter_01_output_set(number v) {
    this->counter_01_output = v;
    this->numberobj_45_value_set(v);
}

void p_16_target_lfoReset_bang_bang() {
    this->p_16->updateTime(this->_currentTime);
    this->p_16->receive_03_output_bang_bang();
}

void p_17_target_lfoReset_bang_bang() {
    this->p_17->updateTime(this->_currentTime);
    this->p_17->receive_06_output_bang_bang();
}

void p_18_target_lfoReset_bang_bang() {
    this->p_18->updateTime(this->_currentTime);
    this->p_18->receive_09_output_bang_bang();
}

void p_19_target_lfoReset_bang_bang() {
    this->p_19->updateTime(this->_currentTime);
    this->p_19->receive_12_output_bang_bang();
}

void p_20_target_lfoReset_bang_bang() {
    this->p_20->updateTime(this->_currentTime);
    this->p_20->receive_15_output_bang_bang();
}

void send_03_input_bang_bang() {
    this->p_16_target_lfoReset_bang_bang();
    this->p_17_target_lfoReset_bang_bang();
    this->p_18_target_lfoReset_bang_bang();
    this->p_19_target_lfoReset_bang_bang();
    this->p_20_target_lfoReset_bang_bang();
}

void button_07_output_bang() {
    this->send_03_input_bang_bang();
}

void button_07_bangval_bang() {
    this->getEngine()->sendBangMessage(TAG("bangout"), TAG("button_obj-28"), this->_currentTime);;
    this->button_07_output_bang();
}

void counter_01_overflow_bang_bang() {
    this->button_07_bangval_bang();
}

number counter_01_overflow_number_constrain(number v) const {
    if (v < 0)
        v = 0;

    if (v > 1)
        v = 1;

    return v;
}

void counter_01_overflow_number_set(number v) {
    v = this->counter_01_overflow_number_constrain(v);
    this->counter_01_overflow_number = v;
    this->button_07_bangval_bang();
}

void counter_01_carry_set(number v) {
    this->counter_01_carry = v;
}

void counter_01_underflow_bang_bang() {}

number counter_01_underflow_number_constrain(number v) const {
    if (v < 0)
        v = 0;

    if (v > 1)
        v = 1;

    return v;
}

void counter_01_underflow_number_set(number v) {
    v = this->counter_01_underflow_number_constrain(v);
    this->counter_01_underflow_number = v;
}

void counter_01_input_bang() {
    this->counter_01_output_set(this->counter_01_count);
    this->counter_01_inc();

    if (this->counter_01_count > this->counter_01_maximum) {
        if (this->counter_01_direction == 2) {
            this->counter_01_phase = !(bool)(this->counter_01_phase);
            this->counter_01_count = this->counter_01_maximum;
            this->counter_01_inc();
        } else
            this->counter_01_count = this->counter_01_minimum;

        if ((bool)(!(bool)(this->counter_01_overflow_number))) {
            if (this->counter_01_carryflag == 1)
                this->counter_01_overflow_bang_bang();
            else
                this->counter_01_overflow_number_set(1);
        }

        this->counter_01_carry_set(this->counter_01_carry + 1);
    } else if ((bool)(this->counter_01_overflow_number) && this->counter_01_carryflag == 0)
        this->counter_01_overflow_number_set(0);

    if (this->counter_01_count < this->counter_01_minimum) {
        if (this->counter_01_direction == 2) {
            this->counter_01_phase = !(bool)(this->counter_01_phase);
            this->counter_01_count = this->counter_01_minimum;
            this->counter_01_inc();
        } else
            this->counter_01_count = this->counter_01_maximum;

        if ((bool)(!(bool)(this->counter_01_underflow_number))) {
            if (this->counter_01_carryflag == 1)
                this->counter_01_underflow_bang_bang();
            else
                this->counter_01_underflow_number_set(1);
        }

        this->counter_01_carry_set(this->counter_01_carry + 1);
    } else if ((bool)(this->counter_01_underflow_number) && this->counter_01_carryflag == 0)
        this->counter_01_underflow_number_set(0);
}

void p_16_target_velocity_list_set(const list& v) {
    this->p_16->updateTime(this->_currentTime);
    this->p_16->receive_02_output_list_set(v);
}

void p_17_target_velocity_list_set(const list& v) {
    this->p_17->updateTime(this->_currentTime);
    this->p_17->receive_05_output_list_set(v);
}

void p_18_target_velocity_list_set(const list& v) {
    this->p_18->updateTime(this->_currentTime);
    this->p_18->receive_08_output_list_set(v);
}

void p_19_target_velocity_list_set(const list& v) {
    this->p_19->updateTime(this->_currentTime);
    this->p_19->receive_11_output_list_set(v);
}

void p_20_target_velocity_list_set(const list& v) {
    this->p_20->updateTime(this->_currentTime);
    this->p_20->receive_14_output_list_set(v);
}

void send_02_input_list_set(const list& v) {
    this->send_02_input_list = jsCreateListCopy(v);
    this->p_16_target_velocity_list_set(v);
    this->p_17_target_velocity_list_set(v);
    this->p_18_target_velocity_list_set(v);
    this->p_19_target_velocity_list_set(v);
    this->p_20_target_velocity_list_set(v);
}

void message_02_out_set(const list& v) {
    this->send_02_input_list_set(v);
}

void message_02_trigger_bang() {
    this->message_02_out_set(this->message_02_set);
}

void p_16_target_note_number_set(number v) {
    this->p_16->updateTime(this->_currentTime);
    this->p_16->receive_01_output_number_set(v);
}

void p_17_target_note_number_set(number v) {
    this->p_17->updateTime(this->_currentTime);
    this->p_17->receive_04_output_number_set(v);
}

void p_18_target_note_number_set(number v) {
    this->p_18->updateTime(this->_currentTime);
    this->p_18->receive_07_output_number_set(v);
}

void p_19_target_note_number_set(number v) {
    this->p_19->updateTime(this->_currentTime);
    this->p_19->receive_10_output_number_set(v);
}

void p_20_target_note_number_set(number v) {
    this->p_20->updateTime(this->_currentTime);
    this->p_20->receive_13_output_number_set(v);
}

void send_01_input_number_set(number v) {
    this->send_01_input_number = v;
    this->p_16_target_note_number_set(v);
    this->p_17_target_note_number_set(v);
    this->p_18_target_note_number_set(v);
    this->p_19_target_note_number_set(v);
    this->p_20_target_note_number_set(v);
}

void numberobj_43_output_set(number v) {
    this->send_01_input_number_set(v);
}

void numberobj_43_value_bang() {
    number v = this->numberobj_43_value;
    number localvalue = v;

    if (this->numberobj_43_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-96"), localvalue, this->_currentTime);
    this->numberobj_43_output_set(localvalue);
}

void button_06_output_bang() {
    this->transport_01_input_bang_bang();
    this->counter_01_input_bang();
    this->message_02_trigger_bang();
    this->numberobj_43_value_bang();
}

void button_06_bangval_bang() {
    this->getEngine()->sendBangMessage(TAG("bangout"), TAG("button_obj-30"), this->_currentTime);;
    this->button_06_output_bang();
}

void metro_01_tickout_bang() {
    this->button_06_bangval_bang();
}

void numberobj_43_value_set(number v) {
    this->numberobj_43_value_setter(v);
    v = this->numberobj_43_value;
    number localvalue = v;

    if (this->numberobj_43_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-96"), localvalue, this->_currentTime);
    this->numberobj_43_output_set(localvalue);
}

void message_01_set_set(const list& v) {
    this->message_01_set = jsCreateListCopy(v);
    this->getEngine()->sendListMessage(TAG("listout"), TAG("message_obj-6"), v, this->_currentTime);
}

void p_16_in1_list_set(const list& v) {
    this->p_16->updateTime(this->_currentTime);
    this->p_16->eventinlet_09_out1_list_set(v);
}

void message_01_out_set(const list& v) {
    this->p_16_in1_list_set(v);
}

void message_01_trigger_bang() {
    this->message_01_out_set(this->message_01_set);
}

void message_02_set_set(const list& v) {
    this->message_02_set = jsCreateListCopy(v);
    this->getEngine()->sendListMessage(TAG("listout"), TAG("message_obj-20"), v, this->_currentTime);
}

void message_03_set_set(const list& v) {
    this->message_03_set = jsCreateListCopy(v);
    this->getEngine()->sendListMessage(TAG("listout"), TAG("message_obj-34"), v, this->_currentTime);
}

void p_17_in1_list_set(const list& v) {
    this->p_17->updateTime(this->_currentTime);
    this->p_17->eventinlet_10_out1_list_set(v);
}

void message_03_out_set(const list& v) {
    this->p_17_in1_list_set(v);
}

void message_03_trigger_bang() {
    this->message_03_out_set(this->message_03_set);
}

void message_04_set_set(const list& v) {
    this->message_04_set = jsCreateListCopy(v);
    this->getEngine()->sendListMessage(TAG("listout"), TAG("message_obj-35"), v, this->_currentTime);
}

void p_18_in1_list_set(const list& v) {
    this->p_18->updateTime(this->_currentTime);
    this->p_18->eventinlet_11_out1_list_set(v);
}

void message_04_out_set(const list& v) {
    this->p_18_in1_list_set(v);
}

void message_04_trigger_bang() {
    this->message_04_out_set(this->message_04_set);
}

void message_05_set_set(const list& v) {
    this->message_05_set = jsCreateListCopy(v);
    this->getEngine()->sendListMessage(TAG("listout"), TAG("message_obj-38"), v, this->_currentTime);
}

void p_19_in1_list_set(const list& v) {
    this->p_19->updateTime(this->_currentTime);
    this->p_19->eventinlet_12_out1_list_set(v);
}

void message_05_out_set(const list& v) {
    this->p_19_in1_list_set(v);
}

void message_05_trigger_bang() {
    this->message_05_out_set(this->message_05_set);
}

void message_06_set_set(const list& v) {
    this->message_06_set = jsCreateListCopy(v);
    this->getEngine()->sendListMessage(TAG("listout"), TAG("message_obj-40"), v, this->_currentTime);
}

void p_20_in1_list_set(const list& v) {
    this->p_20->updateTime(this->_currentTime);
    this->p_20->eventinlet_13_out1_list_set(v);
}

void message_06_out_set(const list& v) {
    this->p_20_in1_list_set(v);
}

void message_06_trigger_bang() {
    this->message_06_out_set(this->message_06_set);
}

void transport_01_input_number_set(number v) {
    this->transport_01_input_number = v;
    this->getTopLevelPatcher()->globaltransport_setState(this->currenttime(), (v == 0 ? 0 : 1), true);
}

void toggle_02_output_set(number v) {
    this->transport_01_input_number_set(v);
}

void toggle_02_value_number_set(number v) {
    this->toggle_02_value_number_setter(v);
    v = this->toggle_02_value_number;
    this->getEngine()->sendNumMessage(TAG("valout"), TAG("toggle_obj-41"), v, this->_currentTime);
    this->toggle_02_output_set(v);
}

void toggle_02_value_bang_bang() {
    number val = (this->toggle_02_value_number == 1 ? 0 : 1);
    this->toggle_02_value_number_set(val);
}

void loadbang_06_output_bang() {
    this->toggle_02_value_bang_bang();
}

void metro_01_interval_set(number v) {
    this->metro_01_interval_setter(v);
    v = this->metro_01_interval;
}

void timevalue_01_out_set(number v) {
    this->metro_01_interval_set(v);
}

void ctlin_01_outchannel_set(number ) {}

void ctlin_01_outcontroller_set(number ) {}

void fromnormalized_01_output_set(number v) {
    this->param_36_value_set(v);
}

void fromnormalized_01_input_set(number v) {
    this->fromnormalized_01_output_set(this->fromnormalized(0, v));
}

void expr_30_out1_set(number v) {
    this->expr_30_out1 = v;
    this->fromnormalized_01_input_set(this->expr_30_out1);
}

void expr_30_in1_set(number in1) {
    this->expr_30_in1 = in1;
    this->expr_30_out1_set(this->expr_30_in1 * this->expr_30_in2);//#map:expr_30:1
}

void ctlin_01_value_set(number v) {
    this->expr_30_in1_set(v);
}

void ctlin_01_midihandler(int status, int channel, int port, ConstByteArray data, Index length) {
    RNBO_UNUSED(length);
    RNBO_UNUSED(port);

    if (status == 0xB0 && (channel == this->ctlin_01_channel || this->ctlin_01_channel == -1) && (data[1] == this->ctlin_01_controller || this->ctlin_01_controller == -1)) {
        this->ctlin_01_outchannel_set(channel);
        this->ctlin_01_outcontroller_set(data[1]);
        this->ctlin_01_value_set(data[2]);
        this->ctlin_01_status = 0;
    }
}

void p_16_perform(SampleValue * out1, Index n) {
    // subpatcher: note
    SampleArray<1> outs = {out1};

    this->p_16->process(nullptr, 0, outs, 1, n);
}

void p_17_perform(SampleValue * out1, Index n) {
    // subpatcher: note
    SampleArray<1> outs = {out1};

    this->p_17->process(nullptr, 0, outs, 1, n);
}

void p_18_perform(SampleValue * out1, Index n) {
    // subpatcher: note
    SampleArray<1> outs = {out1};

    this->p_18->process(nullptr, 0, outs, 1, n);
}

void p_19_perform(SampleValue * out1, Index n) {
    // subpatcher: note
    SampleArray<1> outs = {out1};

    this->p_19->process(nullptr, 0, outs, 1, n);
}

void p_20_perform(SampleValue * out1, Index n) {
    // subpatcher: note
    SampleArray<1> outs = {out1};

    this->p_20->process(nullptr, 0, outs, 1, n);
}

void signaladder_01_perform(
    const SampleValue * in1,
    const SampleValue * in2,
    const SampleValue * in3,
    const SampleValue * in4,
    const SampleValue * in5,
    SampleValue * out,
    Index n
) {
    Index i;

    for (i = 0; i < n; i++) {
        out[(Index)i] = in1[(Index)i] + in2[(Index)i] + in3[(Index)i] + in4[(Index)i] + in5[(Index)i];
    }
}

void gen_06_perform(
    const Sample * in1,
    number indiffusion2,
    number decay1,
    number decay,
    number drywet,
    number inbandwidth,
    number damping,
    number decay2,
    number indiffusion1,
    number predelay,
    SampleValue * out1,
    SampleValue * out2,
    Index n
) {
    auto __gen_06_history_15_value = this->gen_06_history_15_value;
    auto __gen_06_history_14_value = this->gen_06_history_14_value;
    auto __gen_06_history_16_value = this->gen_06_history_16_value;
    auto mstosamps_17_0 = this->mstosamps(predelay);
    auto int_41_24 = this->intnum(121);
    auto int_42_25 = this->intnum(1996);
    auto int_46_29 = this->intnum(266);
    auto int_47_30 = this->intnum(2974);
    auto int_48_31 = this->intnum(2111);
    auto int_54_37 = this->intnum(353);
    auto int_55_38 = this->intnum(3627);
    auto int_56_39 = this->intnum(1990);
    auto int_61_44 = this->intnum(187);
    auto int_62_45 = this->intnum(1228);
    auto int_66_49 = this->intnum(1066);
    auto int_67_50 = this->intnum(2673);
    auto int_72_55 = this->intnum(335);
    auto int_73_56 = this->intnum(1913);
    Index i;

    for (i = 0; i < n; i++) {
        number tap_18_1 = this->gen_06_delay_1_read(mstosamps_17_0, 0);
        number mix_19_2 = __gen_06_history_16_value + inbandwidth * (tap_18_1 - __gen_06_history_16_value);
        number tap_20_3 = this->gen_06_delay_2_read(277, 0);
        number mul_21_4 = tap_20_3 * indiffusion2;
        number tap_22_5 = this->gen_06_delay_3_read(379, 0);
        number mul_23_6 = tap_22_5 * indiffusion2;
        number tap_24_7 = this->gen_06_delay_4_read(107, 0);
        number mul_25_8 = tap_24_7 * indiffusion1;
        number tap_26_9 = this->gen_06_delay_5_read(142, 0);
        number mul_27_10 = tap_26_9 * indiffusion1;
        number sub_28_11 = mix_19_2 - mul_27_10;
        number mul_29_12 = sub_28_11 * indiffusion1;
        number add_30_13 = mul_29_12 + tap_26_9;
        number sub_31_14 = add_30_13 - mul_25_8;
        number mul_32_15 = sub_31_14 * indiffusion1;
        number add_33_16 = mul_32_15 + tap_24_7;
        number sub_34_17 = add_33_16 - mul_23_6;
        number mul_35_18 = sub_34_17 * indiffusion2;
        number add_36_19 = mul_35_18 + tap_22_5;
        number sub_37_20 = add_36_19 - mul_21_4;
        number mul_38_21 = sub_37_20 * indiffusion2;
        number add_39_22 = mul_38_21 + tap_20_3;
        number gen_40_23 = add_39_22;
        number tap_43_26 = this->gen_06_delay_6_read(3163, 0);
        number tap_44_27 = this->gen_06_delay_6_read(int_41_24, 0);
        number tap_45_28 = this->gen_06_delay_6_read(int_42_25, 0);
        number tap_49_32 = this->gen_06_delay_7_read(4217, 0);
        number tap_50_33 = this->gen_06_delay_7_read(int_46_29, 0);
        number tap_51_34 = this->gen_06_delay_7_read(int_47_30, 0);
        number tap_52_35 = this->gen_06_delay_7_read(int_48_31, 0);
        number gen_53_36 = tap_50_33 + tap_51_34 + tap_45_28;
        number tap_57_40 = this->gen_06_delay_8_read(4453, 0);
        number tap_58_41 = this->gen_06_delay_8_read(int_54_37, 0);
        number tap_59_42 = this->gen_06_delay_8_read(int_55_38, 0);
        number tap_60_43 = this->gen_06_delay_8_read(int_56_39, 0);
        number tap_63_46 = this->gen_06_delay_9_read(1800, 0);
        number tap_64_47 = this->gen_06_delay_9_read(int_61_44, 0);
        number tap_65_48 = this->gen_06_delay_9_read(int_62_45, 0);
        number tap_68_51 = this->gen_06_delay_10_read(3720, 0);
        number tap_69_52 = this->gen_06_delay_10_read(int_66_49, 0);
        number tap_70_53 = this->gen_06_delay_10_read(int_67_50, 0);
        number gen_71_54 = tap_70_53 + tap_58_41 + tap_59_42;
        number tap_74_57 = this->gen_06_delay_11_read(2656, 0);
        number tap_75_58 = this->gen_06_delay_11_read(int_72_55, 0);
        number tap_76_59 = this->gen_06_delay_11_read(int_73_56, 0);
        number gen_77_60 = tap_76_59 + tap_69_52 + tap_64_47 + tap_60_43;
        number gen_78_61 = tap_52_35 + tap_75_58 + tap_44_27 + tap_65_48;
        number mix_79_62 = tap_49_32 + damping * (__gen_06_history_14_value - tap_49_32);
        number mix_80_63 = tap_57_40 + damping * (__gen_06_history_15_value - tap_57_40);
        number mul_81_64 = tap_63_46 * decay2;
        number mul_82_65 = tap_74_57 * decay2;
        number mul_83_66 = mix_80_63 * decay;
        number sub_84_67 = mul_83_66 - mul_81_64;
        number mul_85_68 = sub_84_67 * decay2;
        number add_86_69 = mul_85_68 + tap_63_46;
        number mul_87_70 = mix_79_62 * decay;
        number sub_88_71 = mul_87_70 - mul_82_65;
        number mul_89_72 = sub_88_71 * decay2;
        number add_90_73 = mul_89_72 + tap_74_57;
        number mul_91_74 = tap_68_51 * decay;
        number add_92_75 = mul_91_74 + gen_40_23;
        number cycle_93 = 0;
        number cycleindex_94 = 0;
        array<number, 2> result_77 = this->gen_06_cycle_76_next(0.07, 0);
        cycleindex_94 = result_77[1];
        cycle_93 = result_77[0];
        number mul_95_78 = cycle_93 * 16;
        number add_96_79 = mul_95_78 + 908;
        number tap_97_80 = this->gen_06_delay_12_read(add_96_79, 0);
        number mul_98_81 = tap_97_80 * decay1;
        number add_99_82 = add_92_75 + mul_98_81;
        number mul_100_83 = add_99_82 * decay1;
        number rsub_101_84 = tap_97_80 - mul_100_83;
        number mul_102_85 = tap_43_26 * decay;
        number add_103_86 = gen_40_23 + mul_102_85;
        number cycle_104 = 0;
        number cycleindex_105 = 0;
        array<number, 2> result_88 = this->gen_06_cycle_87_next(0.1, 0);
        cycleindex_105 = result_88[1];
        cycle_104 = result_88[0];
        number mul_106_89 = cycle_104 * 16;
        number add_107_90 = mul_106_89 + 672;
        number tap_108_91 = this->gen_06_delay_13_read(add_107_90, 0);
        number mul_109_92 = tap_108_91 * decay1;
        number add_110_93 = add_103_86 + mul_109_92;
        number mul_111_94 = add_110_93 * decay1;
        number rsub_112_95 = tap_108_91 - mul_111_94;
        number history_14_next_113_96 = fixdenorm(mix_79_62);
        number history_15_next_114_97 = fixdenorm(mix_80_63);
        number sub_115_98 = gen_53_36 - gen_77_60;
        number mul_116_99 = sub_115_98 * 0.6;
        number mix_117_100 = in1[(Index)i] + drywet * (mul_116_99 - in1[(Index)i]);
        out1[(Index)i] = mix_117_100;
        number sub_118_101 = gen_71_54 - gen_78_61;
        number mul_119_102 = sub_118_101 * 0.6;
        number mix_120_103 = in1[(Index)i] + drywet * (mul_119_102 - in1[(Index)i]);
        out2[(Index)i] = mix_120_103;
        number history_16_next_121_104 = fixdenorm(mix_19_2);
        this->gen_06_delay_1_write(in1[(Index)i]);
        __gen_06_history_16_value = history_16_next_121_104;
        this->gen_06_delay_7_write(rsub_101_84);
        this->gen_06_delay_8_write(rsub_112_95);
        this->gen_06_delay_9_write(sub_84_67);
        this->gen_06_delay_10_write(add_86_69);
        this->gen_06_delay_11_write(sub_88_71);
        this->gen_06_delay_12_write(add_99_82);
        this->gen_06_delay_13_write(add_110_93);
        __gen_06_history_14_value = history_14_next_113_96;
        __gen_06_history_15_value = history_15_next_114_97;
        this->gen_06_delay_6_write(add_90_73);
        this->gen_06_delay_3_write(sub_34_17);
        this->gen_06_delay_4_write(sub_31_14);
        this->gen_06_delay_5_write(sub_28_11);
        this->gen_06_delay_2_write(sub_37_20);
        this->gen_06_delay_1_step();
        this->gen_06_delay_2_step();
        this->gen_06_delay_3_step();
        this->gen_06_delay_4_step();
        this->gen_06_delay_5_step();
        this->gen_06_delay_6_step();
        this->gen_06_delay_7_step();
        this->gen_06_delay_8_step();
        this->gen_06_delay_9_step();
        this->gen_06_delay_10_step();
        this->gen_06_delay_11_step();
        this->gen_06_delay_12_step();
        this->gen_06_delay_13_step();
    }

    this->gen_06_history_16_value = __gen_06_history_16_value;
    this->gen_06_history_14_value = __gen_06_history_14_value;
    this->gen_06_history_15_value = __gen_06_history_15_value;
}

void p_15_perform(
    const SampleValue * in1,
    const SampleValue * in2,
    SampleValue * out1,
    SampleValue * out2,
    SampleValue * out3,
    Index n
) {
    // subpatcher: Drive~
    ConstSampleArray<2> ins = {in1, in2};

    SampleArray<3> outs = {out1, out2, out3};
    this->p_15->process(ins, 2, outs, 3, n);
}

void p_14_perform(
    const SampleValue * in1,
    const SampleValue * in2,
    SampleValue * out1,
    SampleValue * out2,
    Index n
) {
    // subpatcher: Post-EQ~
    ConstSampleArray<2> ins = {in1, in2};

    SampleArray<2> outs = {out1, out2};
    this->p_14->process(ins, 2, outs, 2, n);
}

void stackprotect_perform(Index n) {
    RNBO_UNUSED(n);
    auto __stackprotect_count = this->stackprotect_count;
    __stackprotect_count = 0;
    this->stackprotect_count = __stackprotect_count;
}

void toggle_01_value_number_setter(number v) {
    this->toggle_01_value_number = (v != 0 ? 1 : 0);
}

void metro_01_interval_setter(number v) {
    this->metro_01_interval = (v > 0 ? v : 0);
}

void numberobj_43_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_43_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_43_value = localvalue;
}

void numberobj_44_value_setter(number v) {
    number localvalue = v;

    if ((bool)(true) && localvalue < 0) {
        localvalue = 0;
    }

    if ((bool)(true) && localvalue > 100) {
        localvalue = 100;
    }

    if (this->numberobj_44_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_44_value = localvalue;
}

void numberobj_45_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_45_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_45_value = localvalue;
}

void toggle_02_value_number_setter(number v) {
    this->toggle_02_value_number = (v != 0 ? 1 : 0);
}

void numberobj_46_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_46_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_46_value = localvalue;
}

void numberobj_47_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_47_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_47_value = localvalue;
}

void toggle_01_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->toggle_01_value_number;
}

void toggle_01_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->toggle_01_value_number_set(preset["value"]);
}

void metro_01_onTransportChanged(number ) {}

void metro_01_onBeatTimeChanged(number ) {}

void numberobj_43_init() {
    this->numberobj_43_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-96"), 1, this->_currentTime);
}

void numberobj_43_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_43_value;
}

void numberobj_43_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_43_value_set(preset["value"]);
}

void message_01_init() {
    this->message_01_set_set({1});
}

void gen_06_delay_1_step() {
    this->gen_06_delay_1_reader++;

    if (this->gen_06_delay_1_reader >= (int)(this->gen_06_delay_1_buffer->getSize()))
        this->gen_06_delay_1_reader = 0;
}

number gen_06_delay_1_read(number size, Int interp) {
    RNBO_UNUSED(interp);

    {
        number r = (int)(this->gen_06_delay_1_buffer->getSize()) + this->gen_06_delay_1_reader - ((size > this->gen_06_delay_1__maxdelay ? this->gen_06_delay_1__maxdelay : (size < (this->gen_06_delay_1_reader != this->gen_06_delay_1_writer) ? this->gen_06_delay_1_reader != this->gen_06_delay_1_writer : size)));
        long index1 = (long)(rnbo_floor(r));
        number frac = r - index1;
        long index2 = (long)(index1 + 1);

        return this->linearinterp(frac, this->gen_06_delay_1_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_06_delay_1_wrap))
        ), this->gen_06_delay_1_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->gen_06_delay_1_wrap))
        ));
    }

    number r = (int)(this->gen_06_delay_1_buffer->getSize()) + this->gen_06_delay_1_reader - ((size > this->gen_06_delay_1__maxdelay ? this->gen_06_delay_1__maxdelay : (size < (this->gen_06_delay_1_reader != this->gen_06_delay_1_writer) ? this->gen_06_delay_1_reader != this->gen_06_delay_1_writer : size)));
    long index1 = (long)(rnbo_floor(r));

    return this->gen_06_delay_1_buffer->getSample(
        0,
        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_06_delay_1_wrap))
    );
}

void gen_06_delay_1_write(number v) {
    this->gen_06_delay_1_writer = this->gen_06_delay_1_reader;
    this->gen_06_delay_1_buffer[(Index)this->gen_06_delay_1_writer] = v;
}

number gen_06_delay_1_next(number v, int size) {
    number effectiveSize = (size == -1 ? this->gen_06_delay_1__maxdelay : size);
    number val = this->gen_06_delay_1_read(effectiveSize, 0);
    this->gen_06_delay_1_write(v);
    this->gen_06_delay_1_step();
    return val;
}

array<Index, 2> gen_06_delay_1_calcSizeInSamples() {
    number sizeInSamples = 0;
    Index allocatedSizeInSamples = 0;

    {
        sizeInSamples = this->gen_06_delay_1_evaluateSizeExpr(this->samplerate(), this->vectorsize());
        this->gen_06_delay_1_sizemode = 0;
    }

    sizeInSamples = rnbo_floor(sizeInSamples);
    sizeInSamples = this->maximum(sizeInSamples, 2);
    allocatedSizeInSamples = (Index)(sizeInSamples);
    allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
    return {sizeInSamples, allocatedSizeInSamples};
}

void gen_06_delay_1_init() {
    auto result = this->gen_06_delay_1_calcSizeInSamples();
    this->gen_06_delay_1__maxdelay = result[0];
    Index requestedSizeInSamples = (Index)(result[1]);
    this->gen_06_delay_1_buffer->requestSize(requestedSizeInSamples, 1);
    this->gen_06_delay_1_wrap = requestedSizeInSamples - 1;
}

void gen_06_delay_1_clear() {
    this->gen_06_delay_1_buffer->setZero();
}

void gen_06_delay_1_reset() {
    auto result = this->gen_06_delay_1_calcSizeInSamples();
    this->gen_06_delay_1__maxdelay = result[0];
    Index allocatedSizeInSamples = (Index)(result[1]);
    this->gen_06_delay_1_buffer->setSize(allocatedSizeInSamples);
    updateDataRef(this, this->gen_06_delay_1_buffer);
    this->gen_06_delay_1_wrap = this->gen_06_delay_1_buffer->getSize() - 1;
    this->gen_06_delay_1_clear();

    if (this->gen_06_delay_1_reader >= this->gen_06_delay_1__maxdelay || this->gen_06_delay_1_writer >= this->gen_06_delay_1__maxdelay) {
        this->gen_06_delay_1_reader = 0;
        this->gen_06_delay_1_writer = 0;
    }
}

void gen_06_delay_1_dspsetup() {
    this->gen_06_delay_1_reset();
}

number gen_06_delay_1_evaluateSizeExpr(number samplerate, number vectorsize) {
    RNBO_UNUSED(vectorsize);
    RNBO_UNUSED(samplerate);
    return this->samplerate() * 0.1;
}

number gen_06_delay_1_size() {
    return this->gen_06_delay_1__maxdelay;
}

void gen_06_delay_2_step() {
    this->gen_06_delay_2_reader++;

    if (this->gen_06_delay_2_reader >= (int)(this->gen_06_delay_2_buffer->getSize()))
        this->gen_06_delay_2_reader = 0;
}

number gen_06_delay_2_read(number size, Int interp) {
    RNBO_UNUSED(interp);
    RNBO_UNUSED(size);

    {
        number r = (int)(this->gen_06_delay_2_buffer->getSize()) + this->gen_06_delay_2_reader - ((277 > this->gen_06_delay_2__maxdelay ? this->gen_06_delay_2__maxdelay : (277 < (this->gen_06_delay_2_reader != this->gen_06_delay_2_writer) ? this->gen_06_delay_2_reader != this->gen_06_delay_2_writer : 277)));
        long index1 = (long)(rnbo_floor(r));
        number frac = r - index1;
        long index2 = (long)(index1 + 1);

        return this->linearinterp(frac, this->gen_06_delay_2_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_06_delay_2_wrap))
        ), this->gen_06_delay_2_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->gen_06_delay_2_wrap))
        ));
    }

    number r = (int)(this->gen_06_delay_2_buffer->getSize()) + this->gen_06_delay_2_reader - ((277 > this->gen_06_delay_2__maxdelay ? this->gen_06_delay_2__maxdelay : (277 < (this->gen_06_delay_2_reader != this->gen_06_delay_2_writer) ? this->gen_06_delay_2_reader != this->gen_06_delay_2_writer : 277)));
    long index1 = (long)(rnbo_floor(r));

    return this->gen_06_delay_2_buffer->getSample(
        0,
        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_06_delay_2_wrap))
    );
}

void gen_06_delay_2_write(number v) {
    this->gen_06_delay_2_writer = this->gen_06_delay_2_reader;
    this->gen_06_delay_2_buffer[(Index)this->gen_06_delay_2_writer] = v;
}

number gen_06_delay_2_next(number v, int size) {
    number effectiveSize = (size == -1 ? this->gen_06_delay_2__maxdelay : size);
    number val = this->gen_06_delay_2_read(effectiveSize, 0);
    this->gen_06_delay_2_write(v);
    this->gen_06_delay_2_step();
    return val;
}

array<Index, 2> gen_06_delay_2_calcSizeInSamples() {
    number sizeInSamples = 0;
    Index allocatedSizeInSamples = 0;

    {
        sizeInSamples = this->gen_06_delay_2_evaluateSizeExpr(this->samplerate(), this->vectorsize());
        this->gen_06_delay_2_sizemode = 0;
    }

    sizeInSamples = rnbo_floor(sizeInSamples);
    sizeInSamples = this->maximum(sizeInSamples, 2);
    allocatedSizeInSamples = (Index)(sizeInSamples);
    allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
    return {sizeInSamples, allocatedSizeInSamples};
}

void gen_06_delay_2_init() {
    auto result = this->gen_06_delay_2_calcSizeInSamples();
    this->gen_06_delay_2__maxdelay = result[0];
    Index requestedSizeInSamples = (Index)(result[1]);
    this->gen_06_delay_2_buffer->requestSize(requestedSizeInSamples, 1);
    this->gen_06_delay_2_wrap = requestedSizeInSamples - 1;
}

void gen_06_delay_2_clear() {
    this->gen_06_delay_2_buffer->setZero();
}

void gen_06_delay_2_reset() {
    auto result = this->gen_06_delay_2_calcSizeInSamples();
    this->gen_06_delay_2__maxdelay = result[0];
    Index allocatedSizeInSamples = (Index)(result[1]);
    this->gen_06_delay_2_buffer->setSize(allocatedSizeInSamples);
    updateDataRef(this, this->gen_06_delay_2_buffer);
    this->gen_06_delay_2_wrap = this->gen_06_delay_2_buffer->getSize() - 1;
    this->gen_06_delay_2_clear();

    if (this->gen_06_delay_2_reader >= this->gen_06_delay_2__maxdelay || this->gen_06_delay_2_writer >= this->gen_06_delay_2__maxdelay) {
        this->gen_06_delay_2_reader = 0;
        this->gen_06_delay_2_writer = 0;
    }
}

void gen_06_delay_2_dspsetup() {
    this->gen_06_delay_2_reset();
}

number gen_06_delay_2_evaluateSizeExpr(number samplerate, number vectorsize) {
    RNBO_UNUSED(vectorsize);
    RNBO_UNUSED(samplerate);
    return 277;
}

number gen_06_delay_2_size() {
    return this->gen_06_delay_2__maxdelay;
}

void gen_06_delay_3_step() {
    this->gen_06_delay_3_reader++;

    if (this->gen_06_delay_3_reader >= (int)(this->gen_06_delay_3_buffer->getSize()))
        this->gen_06_delay_3_reader = 0;
}

number gen_06_delay_3_read(number size, Int interp) {
    RNBO_UNUSED(interp);
    RNBO_UNUSED(size);

    {
        number r = (int)(this->gen_06_delay_3_buffer->getSize()) + this->gen_06_delay_3_reader - ((379 > this->gen_06_delay_3__maxdelay ? this->gen_06_delay_3__maxdelay : (379 < (this->gen_06_delay_3_reader != this->gen_06_delay_3_writer) ? this->gen_06_delay_3_reader != this->gen_06_delay_3_writer : 379)));
        long index1 = (long)(rnbo_floor(r));
        number frac = r - index1;
        long index2 = (long)(index1 + 1);

        return this->linearinterp(frac, this->gen_06_delay_3_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_06_delay_3_wrap))
        ), this->gen_06_delay_3_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->gen_06_delay_3_wrap))
        ));
    }

    number r = (int)(this->gen_06_delay_3_buffer->getSize()) + this->gen_06_delay_3_reader - ((379 > this->gen_06_delay_3__maxdelay ? this->gen_06_delay_3__maxdelay : (379 < (this->gen_06_delay_3_reader != this->gen_06_delay_3_writer) ? this->gen_06_delay_3_reader != this->gen_06_delay_3_writer : 379)));
    long index1 = (long)(rnbo_floor(r));

    return this->gen_06_delay_3_buffer->getSample(
        0,
        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_06_delay_3_wrap))
    );
}

void gen_06_delay_3_write(number v) {
    this->gen_06_delay_3_writer = this->gen_06_delay_3_reader;
    this->gen_06_delay_3_buffer[(Index)this->gen_06_delay_3_writer] = v;
}

number gen_06_delay_3_next(number v, int size) {
    number effectiveSize = (size == -1 ? this->gen_06_delay_3__maxdelay : size);
    number val = this->gen_06_delay_3_read(effectiveSize, 0);
    this->gen_06_delay_3_write(v);
    this->gen_06_delay_3_step();
    return val;
}

array<Index, 2> gen_06_delay_3_calcSizeInSamples() {
    number sizeInSamples = 0;
    Index allocatedSizeInSamples = 0;

    {
        sizeInSamples = this->gen_06_delay_3_evaluateSizeExpr(this->samplerate(), this->vectorsize());
        this->gen_06_delay_3_sizemode = 0;
    }

    sizeInSamples = rnbo_floor(sizeInSamples);
    sizeInSamples = this->maximum(sizeInSamples, 2);
    allocatedSizeInSamples = (Index)(sizeInSamples);
    allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
    return {sizeInSamples, allocatedSizeInSamples};
}

void gen_06_delay_3_init() {
    auto result = this->gen_06_delay_3_calcSizeInSamples();
    this->gen_06_delay_3__maxdelay = result[0];
    Index requestedSizeInSamples = (Index)(result[1]);
    this->gen_06_delay_3_buffer->requestSize(requestedSizeInSamples, 1);
    this->gen_06_delay_3_wrap = requestedSizeInSamples - 1;
}

void gen_06_delay_3_clear() {
    this->gen_06_delay_3_buffer->setZero();
}

void gen_06_delay_3_reset() {
    auto result = this->gen_06_delay_3_calcSizeInSamples();
    this->gen_06_delay_3__maxdelay = result[0];
    Index allocatedSizeInSamples = (Index)(result[1]);
    this->gen_06_delay_3_buffer->setSize(allocatedSizeInSamples);
    updateDataRef(this, this->gen_06_delay_3_buffer);
    this->gen_06_delay_3_wrap = this->gen_06_delay_3_buffer->getSize() - 1;
    this->gen_06_delay_3_clear();

    if (this->gen_06_delay_3_reader >= this->gen_06_delay_3__maxdelay || this->gen_06_delay_3_writer >= this->gen_06_delay_3__maxdelay) {
        this->gen_06_delay_3_reader = 0;
        this->gen_06_delay_3_writer = 0;
    }
}

void gen_06_delay_3_dspsetup() {
    this->gen_06_delay_3_reset();
}

number gen_06_delay_3_evaluateSizeExpr(number samplerate, number vectorsize) {
    RNBO_UNUSED(vectorsize);
    RNBO_UNUSED(samplerate);
    return 379;
}

number gen_06_delay_3_size() {
    return this->gen_06_delay_3__maxdelay;
}

void gen_06_delay_4_step() {
    this->gen_06_delay_4_reader++;

    if (this->gen_06_delay_4_reader >= (int)(this->gen_06_delay_4_buffer->getSize()))
        this->gen_06_delay_4_reader = 0;
}

number gen_06_delay_4_read(number size, Int interp) {
    RNBO_UNUSED(interp);
    RNBO_UNUSED(size);

    {
        number r = (int)(this->gen_06_delay_4_buffer->getSize()) + this->gen_06_delay_4_reader - ((107 > this->gen_06_delay_4__maxdelay ? this->gen_06_delay_4__maxdelay : (107 < (this->gen_06_delay_4_reader != this->gen_06_delay_4_writer) ? this->gen_06_delay_4_reader != this->gen_06_delay_4_writer : 107)));
        long index1 = (long)(rnbo_floor(r));
        number frac = r - index1;
        long index2 = (long)(index1 + 1);

        return this->linearinterp(frac, this->gen_06_delay_4_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_06_delay_4_wrap))
        ), this->gen_06_delay_4_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->gen_06_delay_4_wrap))
        ));
    }

    number r = (int)(this->gen_06_delay_4_buffer->getSize()) + this->gen_06_delay_4_reader - ((107 > this->gen_06_delay_4__maxdelay ? this->gen_06_delay_4__maxdelay : (107 < (this->gen_06_delay_4_reader != this->gen_06_delay_4_writer) ? this->gen_06_delay_4_reader != this->gen_06_delay_4_writer : 107)));
    long index1 = (long)(rnbo_floor(r));

    return this->gen_06_delay_4_buffer->getSample(
        0,
        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_06_delay_4_wrap))
    );
}

void gen_06_delay_4_write(number v) {
    this->gen_06_delay_4_writer = this->gen_06_delay_4_reader;
    this->gen_06_delay_4_buffer[(Index)this->gen_06_delay_4_writer] = v;
}

number gen_06_delay_4_next(number v, int size) {
    number effectiveSize = (size == -1 ? this->gen_06_delay_4__maxdelay : size);
    number val = this->gen_06_delay_4_read(effectiveSize, 0);
    this->gen_06_delay_4_write(v);
    this->gen_06_delay_4_step();
    return val;
}

array<Index, 2> gen_06_delay_4_calcSizeInSamples() {
    number sizeInSamples = 0;
    Index allocatedSizeInSamples = 0;

    {
        sizeInSamples = this->gen_06_delay_4_evaluateSizeExpr(this->samplerate(), this->vectorsize());
        this->gen_06_delay_4_sizemode = 0;
    }

    sizeInSamples = rnbo_floor(sizeInSamples);
    sizeInSamples = this->maximum(sizeInSamples, 2);
    allocatedSizeInSamples = (Index)(sizeInSamples);
    allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
    return {sizeInSamples, allocatedSizeInSamples};
}

void gen_06_delay_4_init() {
    auto result = this->gen_06_delay_4_calcSizeInSamples();
    this->gen_06_delay_4__maxdelay = result[0];
    Index requestedSizeInSamples = (Index)(result[1]);
    this->gen_06_delay_4_buffer->requestSize(requestedSizeInSamples, 1);
    this->gen_06_delay_4_wrap = requestedSizeInSamples - 1;
}

void gen_06_delay_4_clear() {
    this->gen_06_delay_4_buffer->setZero();
}

void gen_06_delay_4_reset() {
    auto result = this->gen_06_delay_4_calcSizeInSamples();
    this->gen_06_delay_4__maxdelay = result[0];
    Index allocatedSizeInSamples = (Index)(result[1]);
    this->gen_06_delay_4_buffer->setSize(allocatedSizeInSamples);
    updateDataRef(this, this->gen_06_delay_4_buffer);
    this->gen_06_delay_4_wrap = this->gen_06_delay_4_buffer->getSize() - 1;
    this->gen_06_delay_4_clear();

    if (this->gen_06_delay_4_reader >= this->gen_06_delay_4__maxdelay || this->gen_06_delay_4_writer >= this->gen_06_delay_4__maxdelay) {
        this->gen_06_delay_4_reader = 0;
        this->gen_06_delay_4_writer = 0;
    }
}

void gen_06_delay_4_dspsetup() {
    this->gen_06_delay_4_reset();
}

number gen_06_delay_4_evaluateSizeExpr(number samplerate, number vectorsize) {
    RNBO_UNUSED(vectorsize);
    RNBO_UNUSED(samplerate);
    return 107;
}

number gen_06_delay_4_size() {
    return this->gen_06_delay_4__maxdelay;
}

void gen_06_delay_5_step() {
    this->gen_06_delay_5_reader++;

    if (this->gen_06_delay_5_reader >= (int)(this->gen_06_delay_5_buffer->getSize()))
        this->gen_06_delay_5_reader = 0;
}

number gen_06_delay_5_read(number size, Int interp) {
    RNBO_UNUSED(interp);
    RNBO_UNUSED(size);

    {
        number r = (int)(this->gen_06_delay_5_buffer->getSize()) + this->gen_06_delay_5_reader - ((142 > this->gen_06_delay_5__maxdelay ? this->gen_06_delay_5__maxdelay : (142 < (this->gen_06_delay_5_reader != this->gen_06_delay_5_writer) ? this->gen_06_delay_5_reader != this->gen_06_delay_5_writer : 142)));
        long index1 = (long)(rnbo_floor(r));
        number frac = r - index1;
        long index2 = (long)(index1 + 1);

        return this->linearinterp(frac, this->gen_06_delay_5_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_06_delay_5_wrap))
        ), this->gen_06_delay_5_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->gen_06_delay_5_wrap))
        ));
    }

    number r = (int)(this->gen_06_delay_5_buffer->getSize()) + this->gen_06_delay_5_reader - ((142 > this->gen_06_delay_5__maxdelay ? this->gen_06_delay_5__maxdelay : (142 < (this->gen_06_delay_5_reader != this->gen_06_delay_5_writer) ? this->gen_06_delay_5_reader != this->gen_06_delay_5_writer : 142)));
    long index1 = (long)(rnbo_floor(r));

    return this->gen_06_delay_5_buffer->getSample(
        0,
        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_06_delay_5_wrap))
    );
}

void gen_06_delay_5_write(number v) {
    this->gen_06_delay_5_writer = this->gen_06_delay_5_reader;
    this->gen_06_delay_5_buffer[(Index)this->gen_06_delay_5_writer] = v;
}

number gen_06_delay_5_next(number v, int size) {
    number effectiveSize = (size == -1 ? this->gen_06_delay_5__maxdelay : size);
    number val = this->gen_06_delay_5_read(effectiveSize, 0);
    this->gen_06_delay_5_write(v);
    this->gen_06_delay_5_step();
    return val;
}

array<Index, 2> gen_06_delay_5_calcSizeInSamples() {
    number sizeInSamples = 0;
    Index allocatedSizeInSamples = 0;

    {
        sizeInSamples = this->gen_06_delay_5_evaluateSizeExpr(this->samplerate(), this->vectorsize());
        this->gen_06_delay_5_sizemode = 0;
    }

    sizeInSamples = rnbo_floor(sizeInSamples);
    sizeInSamples = this->maximum(sizeInSamples, 2);
    allocatedSizeInSamples = (Index)(sizeInSamples);
    allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
    return {sizeInSamples, allocatedSizeInSamples};
}

void gen_06_delay_5_init() {
    auto result = this->gen_06_delay_5_calcSizeInSamples();
    this->gen_06_delay_5__maxdelay = result[0];
    Index requestedSizeInSamples = (Index)(result[1]);
    this->gen_06_delay_5_buffer->requestSize(requestedSizeInSamples, 1);
    this->gen_06_delay_5_wrap = requestedSizeInSamples - 1;
}

void gen_06_delay_5_clear() {
    this->gen_06_delay_5_buffer->setZero();
}

void gen_06_delay_5_reset() {
    auto result = this->gen_06_delay_5_calcSizeInSamples();
    this->gen_06_delay_5__maxdelay = result[0];
    Index allocatedSizeInSamples = (Index)(result[1]);
    this->gen_06_delay_5_buffer->setSize(allocatedSizeInSamples);
    updateDataRef(this, this->gen_06_delay_5_buffer);
    this->gen_06_delay_5_wrap = this->gen_06_delay_5_buffer->getSize() - 1;
    this->gen_06_delay_5_clear();

    if (this->gen_06_delay_5_reader >= this->gen_06_delay_5__maxdelay || this->gen_06_delay_5_writer >= this->gen_06_delay_5__maxdelay) {
        this->gen_06_delay_5_reader = 0;
        this->gen_06_delay_5_writer = 0;
    }
}

void gen_06_delay_5_dspsetup() {
    this->gen_06_delay_5_reset();
}

number gen_06_delay_5_evaluateSizeExpr(number samplerate, number vectorsize) {
    RNBO_UNUSED(vectorsize);
    RNBO_UNUSED(samplerate);
    return 142;
}

number gen_06_delay_5_size() {
    return this->gen_06_delay_5__maxdelay;
}

void gen_06_delay_6_step() {
    this->gen_06_delay_6_reader++;

    if (this->gen_06_delay_6_reader >= (int)(this->gen_06_delay_6_buffer->getSize()))
        this->gen_06_delay_6_reader = 0;
}

number gen_06_delay_6_read(number size, Int interp) {
    if (interp == 0) {
        number r = (int)(this->gen_06_delay_6_buffer->getSize()) + this->gen_06_delay_6_reader - ((size > this->gen_06_delay_6__maxdelay ? this->gen_06_delay_6__maxdelay : (size < (this->gen_06_delay_6_reader != this->gen_06_delay_6_writer) ? this->gen_06_delay_6_reader != this->gen_06_delay_6_writer : size)));
        long index1 = (long)(rnbo_floor(r));
        number frac = r - index1;
        long index2 = (long)(index1 + 1);

        return this->linearinterp(frac, this->gen_06_delay_6_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_06_delay_6_wrap))
        ), this->gen_06_delay_6_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->gen_06_delay_6_wrap))
        ));
    } else if (interp == 1) {
        number r = (int)(this->gen_06_delay_6_buffer->getSize()) + this->gen_06_delay_6_reader - ((size > this->gen_06_delay_6__maxdelay ? this->gen_06_delay_6__maxdelay : (size < (1 + this->gen_06_delay_6_reader != this->gen_06_delay_6_writer) ? 1 + this->gen_06_delay_6_reader != this->gen_06_delay_6_writer : size)));
        long index1 = (long)(rnbo_floor(r));
        number frac = r - index1;
        Index index2 = (Index)(index1 + 1);
        Index index3 = (Index)(index2 + 1);
        Index index4 = (Index)(index3 + 1);

        return this->cubicinterp(frac, this->gen_06_delay_6_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_06_delay_6_wrap))
        ), this->gen_06_delay_6_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->gen_06_delay_6_wrap))
        ), this->gen_06_delay_6_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->gen_06_delay_6_wrap))
        ), this->gen_06_delay_6_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->gen_06_delay_6_wrap))
        ));
    } else if (interp == 6) {
        number r = (int)(this->gen_06_delay_6_buffer->getSize()) + this->gen_06_delay_6_reader - ((size > this->gen_06_delay_6__maxdelay ? this->gen_06_delay_6__maxdelay : (size < (1 + this->gen_06_delay_6_reader != this->gen_06_delay_6_writer) ? 1 + this->gen_06_delay_6_reader != this->gen_06_delay_6_writer : size)));
        long index1 = (long)(rnbo_floor(r));
        number frac = r - index1;
        Index index2 = (Index)(index1 + 1);
        Index index3 = (Index)(index2 + 1);
        Index index4 = (Index)(index3 + 1);

        return this->fastcubicinterp(frac, this->gen_06_delay_6_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_06_delay_6_wrap))
        ), this->gen_06_delay_6_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->gen_06_delay_6_wrap))
        ), this->gen_06_delay_6_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->gen_06_delay_6_wrap))
        ), this->gen_06_delay_6_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->gen_06_delay_6_wrap))
        ));
    } else if (interp == 2) {
        number r = (int)(this->gen_06_delay_6_buffer->getSize()) + this->gen_06_delay_6_reader - ((size > this->gen_06_delay_6__maxdelay ? this->gen_06_delay_6__maxdelay : (size < (1 + this->gen_06_delay_6_reader != this->gen_06_delay_6_writer) ? 1 + this->gen_06_delay_6_reader != this->gen_06_delay_6_writer : size)));
        long index1 = (long)(rnbo_floor(r));
        number frac = r - index1;
        Index index2 = (Index)(index1 + 1);
        Index index3 = (Index)(index2 + 1);
        Index index4 = (Index)(index3 + 1);

        return this->splineinterp(frac, this->gen_06_delay_6_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_06_delay_6_wrap))
        ), this->gen_06_delay_6_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->gen_06_delay_6_wrap))
        ), this->gen_06_delay_6_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->gen_06_delay_6_wrap))
        ), this->gen_06_delay_6_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->gen_06_delay_6_wrap))
        ));
    } else if (interp == 7) {
        number r = (int)(this->gen_06_delay_6_buffer->getSize()) + this->gen_06_delay_6_reader - ((size > this->gen_06_delay_6__maxdelay ? this->gen_06_delay_6__maxdelay : (size < (1 + this->gen_06_delay_6_reader != this->gen_06_delay_6_writer) ? 1 + this->gen_06_delay_6_reader != this->gen_06_delay_6_writer : size)));
        long index1 = (long)(rnbo_floor(r));
        number frac = r - index1;
        Index index2 = (Index)(index1 + 1);
        Index index3 = (Index)(index2 + 1);
        Index index4 = (Index)(index3 + 1);
        Index index5 = (Index)(index4 + 1);
        Index index6 = (Index)(index5 + 1);

        return this->spline6interp(frac, this->gen_06_delay_6_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_06_delay_6_wrap))
        ), this->gen_06_delay_6_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->gen_06_delay_6_wrap))
        ), this->gen_06_delay_6_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->gen_06_delay_6_wrap))
        ), this->gen_06_delay_6_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->gen_06_delay_6_wrap))
        ), this->gen_06_delay_6_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->gen_06_delay_6_wrap))
        ), this->gen_06_delay_6_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->gen_06_delay_6_wrap))
        ));
    } else if (interp == 3) {
        number r = (int)(this->gen_06_delay_6_buffer->getSize()) + this->gen_06_delay_6_reader - ((size > this->gen_06_delay_6__maxdelay ? this->gen_06_delay_6__maxdelay : (size < (this->gen_06_delay_6_reader != this->gen_06_delay_6_writer) ? this->gen_06_delay_6_reader != this->gen_06_delay_6_writer : size)));
        long index1 = (long)(rnbo_floor(r));
        number frac = r - index1;
        Index index2 = (Index)(index1 + 1);

        return this->cosineinterp(frac, this->gen_06_delay_6_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_06_delay_6_wrap))
        ), this->gen_06_delay_6_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->gen_06_delay_6_wrap))
        ));
    }

    number r = (int)(this->gen_06_delay_6_buffer->getSize()) + this->gen_06_delay_6_reader - ((size > this->gen_06_delay_6__maxdelay ? this->gen_06_delay_6__maxdelay : (size < (this->gen_06_delay_6_reader != this->gen_06_delay_6_writer) ? this->gen_06_delay_6_reader != this->gen_06_delay_6_writer : size)));
    long index1 = (long)(rnbo_floor(r));

    return this->gen_06_delay_6_buffer->getSample(
        0,
        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_06_delay_6_wrap))
    );
}

void gen_06_delay_6_write(number v) {
    this->gen_06_delay_6_writer = this->gen_06_delay_6_reader;
    this->gen_06_delay_6_buffer[(Index)this->gen_06_delay_6_writer] = v;
}

number gen_06_delay_6_next(number v, int size) {
    number effectiveSize = (size == -1 ? this->gen_06_delay_6__maxdelay : size);
    number val = this->gen_06_delay_6_read(effectiveSize, 0);
    this->gen_06_delay_6_write(v);
    this->gen_06_delay_6_step();
    return val;
}

array<Index, 2> gen_06_delay_6_calcSizeInSamples() {
    number sizeInSamples = 0;
    Index allocatedSizeInSamples = 0;

    {
        sizeInSamples = this->gen_06_delay_6_evaluateSizeExpr(this->samplerate(), this->vectorsize());
        this->gen_06_delay_6_sizemode = 0;
    }

    sizeInSamples = rnbo_floor(sizeInSamples);
    sizeInSamples = this->maximum(sizeInSamples, 2);
    allocatedSizeInSamples = (Index)(sizeInSamples);
    allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
    return {sizeInSamples, allocatedSizeInSamples};
}

void gen_06_delay_6_init() {
    auto result = this->gen_06_delay_6_calcSizeInSamples();
    this->gen_06_delay_6__maxdelay = result[0];
    Index requestedSizeInSamples = (Index)(result[1]);
    this->gen_06_delay_6_buffer->requestSize(requestedSizeInSamples, 1);
    this->gen_06_delay_6_wrap = requestedSizeInSamples - 1;
}

void gen_06_delay_6_clear() {
    this->gen_06_delay_6_buffer->setZero();
}

void gen_06_delay_6_reset() {
    auto result = this->gen_06_delay_6_calcSizeInSamples();
    this->gen_06_delay_6__maxdelay = result[0];
    Index allocatedSizeInSamples = (Index)(result[1]);
    this->gen_06_delay_6_buffer->setSize(allocatedSizeInSamples);
    updateDataRef(this, this->gen_06_delay_6_buffer);
    this->gen_06_delay_6_wrap = this->gen_06_delay_6_buffer->getSize() - 1;
    this->gen_06_delay_6_clear();

    if (this->gen_06_delay_6_reader >= this->gen_06_delay_6__maxdelay || this->gen_06_delay_6_writer >= this->gen_06_delay_6__maxdelay) {
        this->gen_06_delay_6_reader = 0;
        this->gen_06_delay_6_writer = 0;
    }
}

void gen_06_delay_6_dspsetup() {
    this->gen_06_delay_6_reset();
}

number gen_06_delay_6_evaluateSizeExpr(number samplerate, number vectorsize) {
    RNBO_UNUSED(vectorsize);
    RNBO_UNUSED(samplerate);
    return 3163;
}

number gen_06_delay_6_size() {
    return this->gen_06_delay_6__maxdelay;
}

void gen_06_delay_7_step() {
    this->gen_06_delay_7_reader++;

    if (this->gen_06_delay_7_reader >= (int)(this->gen_06_delay_7_buffer->getSize()))
        this->gen_06_delay_7_reader = 0;
}

number gen_06_delay_7_read(number size, Int interp) {
    if (interp == 0) {
        number r = (int)(this->gen_06_delay_7_buffer->getSize()) + this->gen_06_delay_7_reader - ((size > this->gen_06_delay_7__maxdelay ? this->gen_06_delay_7__maxdelay : (size < (this->gen_06_delay_7_reader != this->gen_06_delay_7_writer) ? this->gen_06_delay_7_reader != this->gen_06_delay_7_writer : size)));
        long index1 = (long)(rnbo_floor(r));
        number frac = r - index1;
        long index2 = (long)(index1 + 1);

        return this->linearinterp(frac, this->gen_06_delay_7_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_06_delay_7_wrap))
        ), this->gen_06_delay_7_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->gen_06_delay_7_wrap))
        ));
    } else if (interp == 1) {
        number r = (int)(this->gen_06_delay_7_buffer->getSize()) + this->gen_06_delay_7_reader - ((size > this->gen_06_delay_7__maxdelay ? this->gen_06_delay_7__maxdelay : (size < (1 + this->gen_06_delay_7_reader != this->gen_06_delay_7_writer) ? 1 + this->gen_06_delay_7_reader != this->gen_06_delay_7_writer : size)));
        long index1 = (long)(rnbo_floor(r));
        number frac = r - index1;
        Index index2 = (Index)(index1 + 1);
        Index index3 = (Index)(index2 + 1);
        Index index4 = (Index)(index3 + 1);

        return this->cubicinterp(frac, this->gen_06_delay_7_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_06_delay_7_wrap))
        ), this->gen_06_delay_7_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->gen_06_delay_7_wrap))
        ), this->gen_06_delay_7_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->gen_06_delay_7_wrap))
        ), this->gen_06_delay_7_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->gen_06_delay_7_wrap))
        ));
    } else if (interp == 6) {
        number r = (int)(this->gen_06_delay_7_buffer->getSize()) + this->gen_06_delay_7_reader - ((size > this->gen_06_delay_7__maxdelay ? this->gen_06_delay_7__maxdelay : (size < (1 + this->gen_06_delay_7_reader != this->gen_06_delay_7_writer) ? 1 + this->gen_06_delay_7_reader != this->gen_06_delay_7_writer : size)));
        long index1 = (long)(rnbo_floor(r));
        number frac = r - index1;
        Index index2 = (Index)(index1 + 1);
        Index index3 = (Index)(index2 + 1);
        Index index4 = (Index)(index3 + 1);

        return this->fastcubicinterp(frac, this->gen_06_delay_7_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_06_delay_7_wrap))
        ), this->gen_06_delay_7_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->gen_06_delay_7_wrap))
        ), this->gen_06_delay_7_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->gen_06_delay_7_wrap))
        ), this->gen_06_delay_7_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->gen_06_delay_7_wrap))
        ));
    } else if (interp == 2) {
        number r = (int)(this->gen_06_delay_7_buffer->getSize()) + this->gen_06_delay_7_reader - ((size > this->gen_06_delay_7__maxdelay ? this->gen_06_delay_7__maxdelay : (size < (1 + this->gen_06_delay_7_reader != this->gen_06_delay_7_writer) ? 1 + this->gen_06_delay_7_reader != this->gen_06_delay_7_writer : size)));
        long index1 = (long)(rnbo_floor(r));
        number frac = r - index1;
        Index index2 = (Index)(index1 + 1);
        Index index3 = (Index)(index2 + 1);
        Index index4 = (Index)(index3 + 1);

        return this->splineinterp(frac, this->gen_06_delay_7_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_06_delay_7_wrap))
        ), this->gen_06_delay_7_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->gen_06_delay_7_wrap))
        ), this->gen_06_delay_7_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->gen_06_delay_7_wrap))
        ), this->gen_06_delay_7_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->gen_06_delay_7_wrap))
        ));
    } else if (interp == 7) {
        number r = (int)(this->gen_06_delay_7_buffer->getSize()) + this->gen_06_delay_7_reader - ((size > this->gen_06_delay_7__maxdelay ? this->gen_06_delay_7__maxdelay : (size < (1 + this->gen_06_delay_7_reader != this->gen_06_delay_7_writer) ? 1 + this->gen_06_delay_7_reader != this->gen_06_delay_7_writer : size)));
        long index1 = (long)(rnbo_floor(r));
        number frac = r - index1;
        Index index2 = (Index)(index1 + 1);
        Index index3 = (Index)(index2 + 1);
        Index index4 = (Index)(index3 + 1);
        Index index5 = (Index)(index4 + 1);
        Index index6 = (Index)(index5 + 1);

        return this->spline6interp(frac, this->gen_06_delay_7_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_06_delay_7_wrap))
        ), this->gen_06_delay_7_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->gen_06_delay_7_wrap))
        ), this->gen_06_delay_7_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->gen_06_delay_7_wrap))
        ), this->gen_06_delay_7_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->gen_06_delay_7_wrap))
        ), this->gen_06_delay_7_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->gen_06_delay_7_wrap))
        ), this->gen_06_delay_7_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->gen_06_delay_7_wrap))
        ));
    } else if (interp == 3) {
        number r = (int)(this->gen_06_delay_7_buffer->getSize()) + this->gen_06_delay_7_reader - ((size > this->gen_06_delay_7__maxdelay ? this->gen_06_delay_7__maxdelay : (size < (this->gen_06_delay_7_reader != this->gen_06_delay_7_writer) ? this->gen_06_delay_7_reader != this->gen_06_delay_7_writer : size)));
        long index1 = (long)(rnbo_floor(r));
        number frac = r - index1;
        Index index2 = (Index)(index1 + 1);

        return this->cosineinterp(frac, this->gen_06_delay_7_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_06_delay_7_wrap))
        ), this->gen_06_delay_7_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->gen_06_delay_7_wrap))
        ));
    }

    number r = (int)(this->gen_06_delay_7_buffer->getSize()) + this->gen_06_delay_7_reader - ((size > this->gen_06_delay_7__maxdelay ? this->gen_06_delay_7__maxdelay : (size < (this->gen_06_delay_7_reader != this->gen_06_delay_7_writer) ? this->gen_06_delay_7_reader != this->gen_06_delay_7_writer : size)));
    long index1 = (long)(rnbo_floor(r));

    return this->gen_06_delay_7_buffer->getSample(
        0,
        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_06_delay_7_wrap))
    );
}

void gen_06_delay_7_write(number v) {
    this->gen_06_delay_7_writer = this->gen_06_delay_7_reader;
    this->gen_06_delay_7_buffer[(Index)this->gen_06_delay_7_writer] = v;
}

number gen_06_delay_7_next(number v, int size) {
    number effectiveSize = (size == -1 ? this->gen_06_delay_7__maxdelay : size);
    number val = this->gen_06_delay_7_read(effectiveSize, 0);
    this->gen_06_delay_7_write(v);
    this->gen_06_delay_7_step();
    return val;
}

array<Index, 2> gen_06_delay_7_calcSizeInSamples() {
    number sizeInSamples = 0;
    Index allocatedSizeInSamples = 0;

    {
        sizeInSamples = this->gen_06_delay_7_evaluateSizeExpr(this->samplerate(), this->vectorsize());
        this->gen_06_delay_7_sizemode = 0;
    }

    sizeInSamples = rnbo_floor(sizeInSamples);
    sizeInSamples = this->maximum(sizeInSamples, 2);
    allocatedSizeInSamples = (Index)(sizeInSamples);
    allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
    return {sizeInSamples, allocatedSizeInSamples};
}

void gen_06_delay_7_init() {
    auto result = this->gen_06_delay_7_calcSizeInSamples();
    this->gen_06_delay_7__maxdelay = result[0];
    Index requestedSizeInSamples = (Index)(result[1]);
    this->gen_06_delay_7_buffer->requestSize(requestedSizeInSamples, 1);
    this->gen_06_delay_7_wrap = requestedSizeInSamples - 1;
}

void gen_06_delay_7_clear() {
    this->gen_06_delay_7_buffer->setZero();
}

void gen_06_delay_7_reset() {
    auto result = this->gen_06_delay_7_calcSizeInSamples();
    this->gen_06_delay_7__maxdelay = result[0];
    Index allocatedSizeInSamples = (Index)(result[1]);
    this->gen_06_delay_7_buffer->setSize(allocatedSizeInSamples);
    updateDataRef(this, this->gen_06_delay_7_buffer);
    this->gen_06_delay_7_wrap = this->gen_06_delay_7_buffer->getSize() - 1;
    this->gen_06_delay_7_clear();

    if (this->gen_06_delay_7_reader >= this->gen_06_delay_7__maxdelay || this->gen_06_delay_7_writer >= this->gen_06_delay_7__maxdelay) {
        this->gen_06_delay_7_reader = 0;
        this->gen_06_delay_7_writer = 0;
    }
}

void gen_06_delay_7_dspsetup() {
    this->gen_06_delay_7_reset();
}

number gen_06_delay_7_evaluateSizeExpr(number samplerate, number vectorsize) {
    RNBO_UNUSED(vectorsize);
    RNBO_UNUSED(samplerate);
    return 4217;
}

number gen_06_delay_7_size() {
    return this->gen_06_delay_7__maxdelay;
}

void gen_06_delay_8_step() {
    this->gen_06_delay_8_reader++;

    if (this->gen_06_delay_8_reader >= (int)(this->gen_06_delay_8_buffer->getSize()))
        this->gen_06_delay_8_reader = 0;
}

number gen_06_delay_8_read(number size, Int interp) {
    if (interp == 0) {
        number r = (int)(this->gen_06_delay_8_buffer->getSize()) + this->gen_06_delay_8_reader - ((size > this->gen_06_delay_8__maxdelay ? this->gen_06_delay_8__maxdelay : (size < (this->gen_06_delay_8_reader != this->gen_06_delay_8_writer) ? this->gen_06_delay_8_reader != this->gen_06_delay_8_writer : size)));
        long index1 = (long)(rnbo_floor(r));
        number frac = r - index1;
        long index2 = (long)(index1 + 1);

        return this->linearinterp(frac, this->gen_06_delay_8_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_06_delay_8_wrap))
        ), this->gen_06_delay_8_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->gen_06_delay_8_wrap))
        ));
    } else if (interp == 1) {
        number r = (int)(this->gen_06_delay_8_buffer->getSize()) + this->gen_06_delay_8_reader - ((size > this->gen_06_delay_8__maxdelay ? this->gen_06_delay_8__maxdelay : (size < (1 + this->gen_06_delay_8_reader != this->gen_06_delay_8_writer) ? 1 + this->gen_06_delay_8_reader != this->gen_06_delay_8_writer : size)));
        long index1 = (long)(rnbo_floor(r));
        number frac = r - index1;
        Index index2 = (Index)(index1 + 1);
        Index index3 = (Index)(index2 + 1);
        Index index4 = (Index)(index3 + 1);

        return this->cubicinterp(frac, this->gen_06_delay_8_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_06_delay_8_wrap))
        ), this->gen_06_delay_8_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->gen_06_delay_8_wrap))
        ), this->gen_06_delay_8_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->gen_06_delay_8_wrap))
        ), this->gen_06_delay_8_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->gen_06_delay_8_wrap))
        ));
    } else if (interp == 6) {
        number r = (int)(this->gen_06_delay_8_buffer->getSize()) + this->gen_06_delay_8_reader - ((size > this->gen_06_delay_8__maxdelay ? this->gen_06_delay_8__maxdelay : (size < (1 + this->gen_06_delay_8_reader != this->gen_06_delay_8_writer) ? 1 + this->gen_06_delay_8_reader != this->gen_06_delay_8_writer : size)));
        long index1 = (long)(rnbo_floor(r));
        number frac = r - index1;
        Index index2 = (Index)(index1 + 1);
        Index index3 = (Index)(index2 + 1);
        Index index4 = (Index)(index3 + 1);

        return this->fastcubicinterp(frac, this->gen_06_delay_8_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_06_delay_8_wrap))
        ), this->gen_06_delay_8_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->gen_06_delay_8_wrap))
        ), this->gen_06_delay_8_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->gen_06_delay_8_wrap))
        ), this->gen_06_delay_8_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->gen_06_delay_8_wrap))
        ));
    } else if (interp == 2) {
        number r = (int)(this->gen_06_delay_8_buffer->getSize()) + this->gen_06_delay_8_reader - ((size > this->gen_06_delay_8__maxdelay ? this->gen_06_delay_8__maxdelay : (size < (1 + this->gen_06_delay_8_reader != this->gen_06_delay_8_writer) ? 1 + this->gen_06_delay_8_reader != this->gen_06_delay_8_writer : size)));
        long index1 = (long)(rnbo_floor(r));
        number frac = r - index1;
        Index index2 = (Index)(index1 + 1);
        Index index3 = (Index)(index2 + 1);
        Index index4 = (Index)(index3 + 1);

        return this->splineinterp(frac, this->gen_06_delay_8_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_06_delay_8_wrap))
        ), this->gen_06_delay_8_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->gen_06_delay_8_wrap))
        ), this->gen_06_delay_8_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->gen_06_delay_8_wrap))
        ), this->gen_06_delay_8_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->gen_06_delay_8_wrap))
        ));
    } else if (interp == 7) {
        number r = (int)(this->gen_06_delay_8_buffer->getSize()) + this->gen_06_delay_8_reader - ((size > this->gen_06_delay_8__maxdelay ? this->gen_06_delay_8__maxdelay : (size < (1 + this->gen_06_delay_8_reader != this->gen_06_delay_8_writer) ? 1 + this->gen_06_delay_8_reader != this->gen_06_delay_8_writer : size)));
        long index1 = (long)(rnbo_floor(r));
        number frac = r - index1;
        Index index2 = (Index)(index1 + 1);
        Index index3 = (Index)(index2 + 1);
        Index index4 = (Index)(index3 + 1);
        Index index5 = (Index)(index4 + 1);
        Index index6 = (Index)(index5 + 1);

        return this->spline6interp(frac, this->gen_06_delay_8_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_06_delay_8_wrap))
        ), this->gen_06_delay_8_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->gen_06_delay_8_wrap))
        ), this->gen_06_delay_8_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->gen_06_delay_8_wrap))
        ), this->gen_06_delay_8_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->gen_06_delay_8_wrap))
        ), this->gen_06_delay_8_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->gen_06_delay_8_wrap))
        ), this->gen_06_delay_8_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->gen_06_delay_8_wrap))
        ));
    } else if (interp == 3) {
        number r = (int)(this->gen_06_delay_8_buffer->getSize()) + this->gen_06_delay_8_reader - ((size > this->gen_06_delay_8__maxdelay ? this->gen_06_delay_8__maxdelay : (size < (this->gen_06_delay_8_reader != this->gen_06_delay_8_writer) ? this->gen_06_delay_8_reader != this->gen_06_delay_8_writer : size)));
        long index1 = (long)(rnbo_floor(r));
        number frac = r - index1;
        Index index2 = (Index)(index1 + 1);

        return this->cosineinterp(frac, this->gen_06_delay_8_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_06_delay_8_wrap))
        ), this->gen_06_delay_8_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->gen_06_delay_8_wrap))
        ));
    }

    number r = (int)(this->gen_06_delay_8_buffer->getSize()) + this->gen_06_delay_8_reader - ((size > this->gen_06_delay_8__maxdelay ? this->gen_06_delay_8__maxdelay : (size < (this->gen_06_delay_8_reader != this->gen_06_delay_8_writer) ? this->gen_06_delay_8_reader != this->gen_06_delay_8_writer : size)));
    long index1 = (long)(rnbo_floor(r));

    return this->gen_06_delay_8_buffer->getSample(
        0,
        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_06_delay_8_wrap))
    );
}

void gen_06_delay_8_write(number v) {
    this->gen_06_delay_8_writer = this->gen_06_delay_8_reader;
    this->gen_06_delay_8_buffer[(Index)this->gen_06_delay_8_writer] = v;
}

number gen_06_delay_8_next(number v, int size) {
    number effectiveSize = (size == -1 ? this->gen_06_delay_8__maxdelay : size);
    number val = this->gen_06_delay_8_read(effectiveSize, 0);
    this->gen_06_delay_8_write(v);
    this->gen_06_delay_8_step();
    return val;
}

array<Index, 2> gen_06_delay_8_calcSizeInSamples() {
    number sizeInSamples = 0;
    Index allocatedSizeInSamples = 0;

    {
        sizeInSamples = this->gen_06_delay_8_evaluateSizeExpr(this->samplerate(), this->vectorsize());
        this->gen_06_delay_8_sizemode = 0;
    }

    sizeInSamples = rnbo_floor(sizeInSamples);
    sizeInSamples = this->maximum(sizeInSamples, 2);
    allocatedSizeInSamples = (Index)(sizeInSamples);
    allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
    return {sizeInSamples, allocatedSizeInSamples};
}

void gen_06_delay_8_init() {
    auto result = this->gen_06_delay_8_calcSizeInSamples();
    this->gen_06_delay_8__maxdelay = result[0];
    Index requestedSizeInSamples = (Index)(result[1]);
    this->gen_06_delay_8_buffer->requestSize(requestedSizeInSamples, 1);
    this->gen_06_delay_8_wrap = requestedSizeInSamples - 1;
}

void gen_06_delay_8_clear() {
    this->gen_06_delay_8_buffer->setZero();
}

void gen_06_delay_8_reset() {
    auto result = this->gen_06_delay_8_calcSizeInSamples();
    this->gen_06_delay_8__maxdelay = result[0];
    Index allocatedSizeInSamples = (Index)(result[1]);
    this->gen_06_delay_8_buffer->setSize(allocatedSizeInSamples);
    updateDataRef(this, this->gen_06_delay_8_buffer);
    this->gen_06_delay_8_wrap = this->gen_06_delay_8_buffer->getSize() - 1;
    this->gen_06_delay_8_clear();

    if (this->gen_06_delay_8_reader >= this->gen_06_delay_8__maxdelay || this->gen_06_delay_8_writer >= this->gen_06_delay_8__maxdelay) {
        this->gen_06_delay_8_reader = 0;
        this->gen_06_delay_8_writer = 0;
    }
}

void gen_06_delay_8_dspsetup() {
    this->gen_06_delay_8_reset();
}

number gen_06_delay_8_evaluateSizeExpr(number samplerate, number vectorsize) {
    RNBO_UNUSED(vectorsize);
    RNBO_UNUSED(samplerate);
    return 4453;
}

number gen_06_delay_8_size() {
    return this->gen_06_delay_8__maxdelay;
}

void gen_06_delay_9_step() {
    this->gen_06_delay_9_reader++;

    if (this->gen_06_delay_9_reader >= (int)(this->gen_06_delay_9_buffer->getSize()))
        this->gen_06_delay_9_reader = 0;
}

number gen_06_delay_9_read(number size, Int interp) {
    if (interp == 0) {
        number r = (int)(this->gen_06_delay_9_buffer->getSize()) + this->gen_06_delay_9_reader - ((size > this->gen_06_delay_9__maxdelay ? this->gen_06_delay_9__maxdelay : (size < (this->gen_06_delay_9_reader != this->gen_06_delay_9_writer) ? this->gen_06_delay_9_reader != this->gen_06_delay_9_writer : size)));
        long index1 = (long)(rnbo_floor(r));
        number frac = r - index1;
        long index2 = (long)(index1 + 1);

        return this->linearinterp(frac, this->gen_06_delay_9_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_06_delay_9_wrap))
        ), this->gen_06_delay_9_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->gen_06_delay_9_wrap))
        ));
    } else if (interp == 1) {
        number r = (int)(this->gen_06_delay_9_buffer->getSize()) + this->gen_06_delay_9_reader - ((size > this->gen_06_delay_9__maxdelay ? this->gen_06_delay_9__maxdelay : (size < (1 + this->gen_06_delay_9_reader != this->gen_06_delay_9_writer) ? 1 + this->gen_06_delay_9_reader != this->gen_06_delay_9_writer : size)));
        long index1 = (long)(rnbo_floor(r));
        number frac = r - index1;
        Index index2 = (Index)(index1 + 1);
        Index index3 = (Index)(index2 + 1);
        Index index4 = (Index)(index3 + 1);

        return this->cubicinterp(frac, this->gen_06_delay_9_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_06_delay_9_wrap))
        ), this->gen_06_delay_9_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->gen_06_delay_9_wrap))
        ), this->gen_06_delay_9_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->gen_06_delay_9_wrap))
        ), this->gen_06_delay_9_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->gen_06_delay_9_wrap))
        ));
    } else if (interp == 6) {
        number r = (int)(this->gen_06_delay_9_buffer->getSize()) + this->gen_06_delay_9_reader - ((size > this->gen_06_delay_9__maxdelay ? this->gen_06_delay_9__maxdelay : (size < (1 + this->gen_06_delay_9_reader != this->gen_06_delay_9_writer) ? 1 + this->gen_06_delay_9_reader != this->gen_06_delay_9_writer : size)));
        long index1 = (long)(rnbo_floor(r));
        number frac = r - index1;
        Index index2 = (Index)(index1 + 1);
        Index index3 = (Index)(index2 + 1);
        Index index4 = (Index)(index3 + 1);

        return this->fastcubicinterp(frac, this->gen_06_delay_9_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_06_delay_9_wrap))
        ), this->gen_06_delay_9_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->gen_06_delay_9_wrap))
        ), this->gen_06_delay_9_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->gen_06_delay_9_wrap))
        ), this->gen_06_delay_9_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->gen_06_delay_9_wrap))
        ));
    } else if (interp == 2) {
        number r = (int)(this->gen_06_delay_9_buffer->getSize()) + this->gen_06_delay_9_reader - ((size > this->gen_06_delay_9__maxdelay ? this->gen_06_delay_9__maxdelay : (size < (1 + this->gen_06_delay_9_reader != this->gen_06_delay_9_writer) ? 1 + this->gen_06_delay_9_reader != this->gen_06_delay_9_writer : size)));
        long index1 = (long)(rnbo_floor(r));
        number frac = r - index1;
        Index index2 = (Index)(index1 + 1);
        Index index3 = (Index)(index2 + 1);
        Index index4 = (Index)(index3 + 1);

        return this->splineinterp(frac, this->gen_06_delay_9_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_06_delay_9_wrap))
        ), this->gen_06_delay_9_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->gen_06_delay_9_wrap))
        ), this->gen_06_delay_9_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->gen_06_delay_9_wrap))
        ), this->gen_06_delay_9_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->gen_06_delay_9_wrap))
        ));
    } else if (interp == 7) {
        number r = (int)(this->gen_06_delay_9_buffer->getSize()) + this->gen_06_delay_9_reader - ((size > this->gen_06_delay_9__maxdelay ? this->gen_06_delay_9__maxdelay : (size < (1 + this->gen_06_delay_9_reader != this->gen_06_delay_9_writer) ? 1 + this->gen_06_delay_9_reader != this->gen_06_delay_9_writer : size)));
        long index1 = (long)(rnbo_floor(r));
        number frac = r - index1;
        Index index2 = (Index)(index1 + 1);
        Index index3 = (Index)(index2 + 1);
        Index index4 = (Index)(index3 + 1);
        Index index5 = (Index)(index4 + 1);
        Index index6 = (Index)(index5 + 1);

        return this->spline6interp(frac, this->gen_06_delay_9_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_06_delay_9_wrap))
        ), this->gen_06_delay_9_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->gen_06_delay_9_wrap))
        ), this->gen_06_delay_9_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->gen_06_delay_9_wrap))
        ), this->gen_06_delay_9_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->gen_06_delay_9_wrap))
        ), this->gen_06_delay_9_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->gen_06_delay_9_wrap))
        ), this->gen_06_delay_9_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->gen_06_delay_9_wrap))
        ));
    } else if (interp == 3) {
        number r = (int)(this->gen_06_delay_9_buffer->getSize()) + this->gen_06_delay_9_reader - ((size > this->gen_06_delay_9__maxdelay ? this->gen_06_delay_9__maxdelay : (size < (this->gen_06_delay_9_reader != this->gen_06_delay_9_writer) ? this->gen_06_delay_9_reader != this->gen_06_delay_9_writer : size)));
        long index1 = (long)(rnbo_floor(r));
        number frac = r - index1;
        Index index2 = (Index)(index1 + 1);

        return this->cosineinterp(frac, this->gen_06_delay_9_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_06_delay_9_wrap))
        ), this->gen_06_delay_9_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->gen_06_delay_9_wrap))
        ));
    }

    number r = (int)(this->gen_06_delay_9_buffer->getSize()) + this->gen_06_delay_9_reader - ((size > this->gen_06_delay_9__maxdelay ? this->gen_06_delay_9__maxdelay : (size < (this->gen_06_delay_9_reader != this->gen_06_delay_9_writer) ? this->gen_06_delay_9_reader != this->gen_06_delay_9_writer : size)));
    long index1 = (long)(rnbo_floor(r));

    return this->gen_06_delay_9_buffer->getSample(
        0,
        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_06_delay_9_wrap))
    );
}

void gen_06_delay_9_write(number v) {
    this->gen_06_delay_9_writer = this->gen_06_delay_9_reader;
    this->gen_06_delay_9_buffer[(Index)this->gen_06_delay_9_writer] = v;
}

number gen_06_delay_9_next(number v, int size) {
    number effectiveSize = (size == -1 ? this->gen_06_delay_9__maxdelay : size);
    number val = this->gen_06_delay_9_read(effectiveSize, 0);
    this->gen_06_delay_9_write(v);
    this->gen_06_delay_9_step();
    return val;
}

array<Index, 2> gen_06_delay_9_calcSizeInSamples() {
    number sizeInSamples = 0;
    Index allocatedSizeInSamples = 0;

    {
        sizeInSamples = this->gen_06_delay_9_evaluateSizeExpr(this->samplerate(), this->vectorsize());
        this->gen_06_delay_9_sizemode = 0;
    }

    sizeInSamples = rnbo_floor(sizeInSamples);
    sizeInSamples = this->maximum(sizeInSamples, 2);
    allocatedSizeInSamples = (Index)(sizeInSamples);
    allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
    return {sizeInSamples, allocatedSizeInSamples};
}

void gen_06_delay_9_init() {
    auto result = this->gen_06_delay_9_calcSizeInSamples();
    this->gen_06_delay_9__maxdelay = result[0];
    Index requestedSizeInSamples = (Index)(result[1]);
    this->gen_06_delay_9_buffer->requestSize(requestedSizeInSamples, 1);
    this->gen_06_delay_9_wrap = requestedSizeInSamples - 1;
}

void gen_06_delay_9_clear() {
    this->gen_06_delay_9_buffer->setZero();
}

void gen_06_delay_9_reset() {
    auto result = this->gen_06_delay_9_calcSizeInSamples();
    this->gen_06_delay_9__maxdelay = result[0];
    Index allocatedSizeInSamples = (Index)(result[1]);
    this->gen_06_delay_9_buffer->setSize(allocatedSizeInSamples);
    updateDataRef(this, this->gen_06_delay_9_buffer);
    this->gen_06_delay_9_wrap = this->gen_06_delay_9_buffer->getSize() - 1;
    this->gen_06_delay_9_clear();

    if (this->gen_06_delay_9_reader >= this->gen_06_delay_9__maxdelay || this->gen_06_delay_9_writer >= this->gen_06_delay_9__maxdelay) {
        this->gen_06_delay_9_reader = 0;
        this->gen_06_delay_9_writer = 0;
    }
}

void gen_06_delay_9_dspsetup() {
    this->gen_06_delay_9_reset();
}

number gen_06_delay_9_evaluateSizeExpr(number samplerate, number vectorsize) {
    RNBO_UNUSED(vectorsize);
    RNBO_UNUSED(samplerate);
    return 1800;
}

number gen_06_delay_9_size() {
    return this->gen_06_delay_9__maxdelay;
}

void gen_06_delay_10_step() {
    this->gen_06_delay_10_reader++;

    if (this->gen_06_delay_10_reader >= (int)(this->gen_06_delay_10_buffer->getSize()))
        this->gen_06_delay_10_reader = 0;
}

number gen_06_delay_10_read(number size, Int interp) {
    if (interp == 0) {
        number r = (int)(this->gen_06_delay_10_buffer->getSize()) + this->gen_06_delay_10_reader - ((size > this->gen_06_delay_10__maxdelay ? this->gen_06_delay_10__maxdelay : (size < (this->gen_06_delay_10_reader != this->gen_06_delay_10_writer) ? this->gen_06_delay_10_reader != this->gen_06_delay_10_writer : size)));
        long index1 = (long)(rnbo_floor(r));
        number frac = r - index1;
        long index2 = (long)(index1 + 1);

        return this->linearinterp(frac, this->gen_06_delay_10_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_06_delay_10_wrap))
        ), this->gen_06_delay_10_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->gen_06_delay_10_wrap))
        ));
    } else if (interp == 1) {
        number r = (int)(this->gen_06_delay_10_buffer->getSize()) + this->gen_06_delay_10_reader - ((size > this->gen_06_delay_10__maxdelay ? this->gen_06_delay_10__maxdelay : (size < (1 + this->gen_06_delay_10_reader != this->gen_06_delay_10_writer) ? 1 + this->gen_06_delay_10_reader != this->gen_06_delay_10_writer : size)));
        long index1 = (long)(rnbo_floor(r));
        number frac = r - index1;
        Index index2 = (Index)(index1 + 1);
        Index index3 = (Index)(index2 + 1);
        Index index4 = (Index)(index3 + 1);

        return this->cubicinterp(frac, this->gen_06_delay_10_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_06_delay_10_wrap))
        ), this->gen_06_delay_10_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->gen_06_delay_10_wrap))
        ), this->gen_06_delay_10_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->gen_06_delay_10_wrap))
        ), this->gen_06_delay_10_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->gen_06_delay_10_wrap))
        ));
    } else if (interp == 6) {
        number r = (int)(this->gen_06_delay_10_buffer->getSize()) + this->gen_06_delay_10_reader - ((size > this->gen_06_delay_10__maxdelay ? this->gen_06_delay_10__maxdelay : (size < (1 + this->gen_06_delay_10_reader != this->gen_06_delay_10_writer) ? 1 + this->gen_06_delay_10_reader != this->gen_06_delay_10_writer : size)));
        long index1 = (long)(rnbo_floor(r));
        number frac = r - index1;
        Index index2 = (Index)(index1 + 1);
        Index index3 = (Index)(index2 + 1);
        Index index4 = (Index)(index3 + 1);

        return this->fastcubicinterp(frac, this->gen_06_delay_10_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_06_delay_10_wrap))
        ), this->gen_06_delay_10_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->gen_06_delay_10_wrap))
        ), this->gen_06_delay_10_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->gen_06_delay_10_wrap))
        ), this->gen_06_delay_10_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->gen_06_delay_10_wrap))
        ));
    } else if (interp == 2) {
        number r = (int)(this->gen_06_delay_10_buffer->getSize()) + this->gen_06_delay_10_reader - ((size > this->gen_06_delay_10__maxdelay ? this->gen_06_delay_10__maxdelay : (size < (1 + this->gen_06_delay_10_reader != this->gen_06_delay_10_writer) ? 1 + this->gen_06_delay_10_reader != this->gen_06_delay_10_writer : size)));
        long index1 = (long)(rnbo_floor(r));
        number frac = r - index1;
        Index index2 = (Index)(index1 + 1);
        Index index3 = (Index)(index2 + 1);
        Index index4 = (Index)(index3 + 1);

        return this->splineinterp(frac, this->gen_06_delay_10_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_06_delay_10_wrap))
        ), this->gen_06_delay_10_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->gen_06_delay_10_wrap))
        ), this->gen_06_delay_10_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->gen_06_delay_10_wrap))
        ), this->gen_06_delay_10_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->gen_06_delay_10_wrap))
        ));
    } else if (interp == 7) {
        number r = (int)(this->gen_06_delay_10_buffer->getSize()) + this->gen_06_delay_10_reader - ((size > this->gen_06_delay_10__maxdelay ? this->gen_06_delay_10__maxdelay : (size < (1 + this->gen_06_delay_10_reader != this->gen_06_delay_10_writer) ? 1 + this->gen_06_delay_10_reader != this->gen_06_delay_10_writer : size)));
        long index1 = (long)(rnbo_floor(r));
        number frac = r - index1;
        Index index2 = (Index)(index1 + 1);
        Index index3 = (Index)(index2 + 1);
        Index index4 = (Index)(index3 + 1);
        Index index5 = (Index)(index4 + 1);
        Index index6 = (Index)(index5 + 1);

        return this->spline6interp(frac, this->gen_06_delay_10_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_06_delay_10_wrap))
        ), this->gen_06_delay_10_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->gen_06_delay_10_wrap))
        ), this->gen_06_delay_10_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->gen_06_delay_10_wrap))
        ), this->gen_06_delay_10_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->gen_06_delay_10_wrap))
        ), this->gen_06_delay_10_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->gen_06_delay_10_wrap))
        ), this->gen_06_delay_10_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->gen_06_delay_10_wrap))
        ));
    } else if (interp == 3) {
        number r = (int)(this->gen_06_delay_10_buffer->getSize()) + this->gen_06_delay_10_reader - ((size > this->gen_06_delay_10__maxdelay ? this->gen_06_delay_10__maxdelay : (size < (this->gen_06_delay_10_reader != this->gen_06_delay_10_writer) ? this->gen_06_delay_10_reader != this->gen_06_delay_10_writer : size)));
        long index1 = (long)(rnbo_floor(r));
        number frac = r - index1;
        Index index2 = (Index)(index1 + 1);

        return this->cosineinterp(frac, this->gen_06_delay_10_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_06_delay_10_wrap))
        ), this->gen_06_delay_10_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->gen_06_delay_10_wrap))
        ));
    }

    number r = (int)(this->gen_06_delay_10_buffer->getSize()) + this->gen_06_delay_10_reader - ((size > this->gen_06_delay_10__maxdelay ? this->gen_06_delay_10__maxdelay : (size < (this->gen_06_delay_10_reader != this->gen_06_delay_10_writer) ? this->gen_06_delay_10_reader != this->gen_06_delay_10_writer : size)));
    long index1 = (long)(rnbo_floor(r));

    return this->gen_06_delay_10_buffer->getSample(
        0,
        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_06_delay_10_wrap))
    );
}

void gen_06_delay_10_write(number v) {
    this->gen_06_delay_10_writer = this->gen_06_delay_10_reader;
    this->gen_06_delay_10_buffer[(Index)this->gen_06_delay_10_writer] = v;
}

number gen_06_delay_10_next(number v, int size) {
    number effectiveSize = (size == -1 ? this->gen_06_delay_10__maxdelay : size);
    number val = this->gen_06_delay_10_read(effectiveSize, 0);
    this->gen_06_delay_10_write(v);
    this->gen_06_delay_10_step();
    return val;
}

array<Index, 2> gen_06_delay_10_calcSizeInSamples() {
    number sizeInSamples = 0;
    Index allocatedSizeInSamples = 0;

    {
        sizeInSamples = this->gen_06_delay_10_evaluateSizeExpr(this->samplerate(), this->vectorsize());
        this->gen_06_delay_10_sizemode = 0;
    }

    sizeInSamples = rnbo_floor(sizeInSamples);
    sizeInSamples = this->maximum(sizeInSamples, 2);
    allocatedSizeInSamples = (Index)(sizeInSamples);
    allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
    return {sizeInSamples, allocatedSizeInSamples};
}

void gen_06_delay_10_init() {
    auto result = this->gen_06_delay_10_calcSizeInSamples();
    this->gen_06_delay_10__maxdelay = result[0];
    Index requestedSizeInSamples = (Index)(result[1]);
    this->gen_06_delay_10_buffer->requestSize(requestedSizeInSamples, 1);
    this->gen_06_delay_10_wrap = requestedSizeInSamples - 1;
}

void gen_06_delay_10_clear() {
    this->gen_06_delay_10_buffer->setZero();
}

void gen_06_delay_10_reset() {
    auto result = this->gen_06_delay_10_calcSizeInSamples();
    this->gen_06_delay_10__maxdelay = result[0];
    Index allocatedSizeInSamples = (Index)(result[1]);
    this->gen_06_delay_10_buffer->setSize(allocatedSizeInSamples);
    updateDataRef(this, this->gen_06_delay_10_buffer);
    this->gen_06_delay_10_wrap = this->gen_06_delay_10_buffer->getSize() - 1;
    this->gen_06_delay_10_clear();

    if (this->gen_06_delay_10_reader >= this->gen_06_delay_10__maxdelay || this->gen_06_delay_10_writer >= this->gen_06_delay_10__maxdelay) {
        this->gen_06_delay_10_reader = 0;
        this->gen_06_delay_10_writer = 0;
    }
}

void gen_06_delay_10_dspsetup() {
    this->gen_06_delay_10_reset();
}

number gen_06_delay_10_evaluateSizeExpr(number samplerate, number vectorsize) {
    RNBO_UNUSED(vectorsize);
    RNBO_UNUSED(samplerate);
    return 3720;
}

number gen_06_delay_10_size() {
    return this->gen_06_delay_10__maxdelay;
}

void gen_06_delay_11_step() {
    this->gen_06_delay_11_reader++;

    if (this->gen_06_delay_11_reader >= (int)(this->gen_06_delay_11_buffer->getSize()))
        this->gen_06_delay_11_reader = 0;
}

number gen_06_delay_11_read(number size, Int interp) {
    if (interp == 0) {
        number r = (int)(this->gen_06_delay_11_buffer->getSize()) + this->gen_06_delay_11_reader - ((size > this->gen_06_delay_11__maxdelay ? this->gen_06_delay_11__maxdelay : (size < (this->gen_06_delay_11_reader != this->gen_06_delay_11_writer) ? this->gen_06_delay_11_reader != this->gen_06_delay_11_writer : size)));
        long index1 = (long)(rnbo_floor(r));
        number frac = r - index1;
        long index2 = (long)(index1 + 1);

        return this->linearinterp(frac, this->gen_06_delay_11_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_06_delay_11_wrap))
        ), this->gen_06_delay_11_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->gen_06_delay_11_wrap))
        ));
    } else if (interp == 1) {
        number r = (int)(this->gen_06_delay_11_buffer->getSize()) + this->gen_06_delay_11_reader - ((size > this->gen_06_delay_11__maxdelay ? this->gen_06_delay_11__maxdelay : (size < (1 + this->gen_06_delay_11_reader != this->gen_06_delay_11_writer) ? 1 + this->gen_06_delay_11_reader != this->gen_06_delay_11_writer : size)));
        long index1 = (long)(rnbo_floor(r));
        number frac = r - index1;
        Index index2 = (Index)(index1 + 1);
        Index index3 = (Index)(index2 + 1);
        Index index4 = (Index)(index3 + 1);

        return this->cubicinterp(frac, this->gen_06_delay_11_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_06_delay_11_wrap))
        ), this->gen_06_delay_11_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->gen_06_delay_11_wrap))
        ), this->gen_06_delay_11_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->gen_06_delay_11_wrap))
        ), this->gen_06_delay_11_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->gen_06_delay_11_wrap))
        ));
    } else if (interp == 6) {
        number r = (int)(this->gen_06_delay_11_buffer->getSize()) + this->gen_06_delay_11_reader - ((size > this->gen_06_delay_11__maxdelay ? this->gen_06_delay_11__maxdelay : (size < (1 + this->gen_06_delay_11_reader != this->gen_06_delay_11_writer) ? 1 + this->gen_06_delay_11_reader != this->gen_06_delay_11_writer : size)));
        long index1 = (long)(rnbo_floor(r));
        number frac = r - index1;
        Index index2 = (Index)(index1 + 1);
        Index index3 = (Index)(index2 + 1);
        Index index4 = (Index)(index3 + 1);

        return this->fastcubicinterp(frac, this->gen_06_delay_11_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_06_delay_11_wrap))
        ), this->gen_06_delay_11_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->gen_06_delay_11_wrap))
        ), this->gen_06_delay_11_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->gen_06_delay_11_wrap))
        ), this->gen_06_delay_11_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->gen_06_delay_11_wrap))
        ));
    } else if (interp == 2) {
        number r = (int)(this->gen_06_delay_11_buffer->getSize()) + this->gen_06_delay_11_reader - ((size > this->gen_06_delay_11__maxdelay ? this->gen_06_delay_11__maxdelay : (size < (1 + this->gen_06_delay_11_reader != this->gen_06_delay_11_writer) ? 1 + this->gen_06_delay_11_reader != this->gen_06_delay_11_writer : size)));
        long index1 = (long)(rnbo_floor(r));
        number frac = r - index1;
        Index index2 = (Index)(index1 + 1);
        Index index3 = (Index)(index2 + 1);
        Index index4 = (Index)(index3 + 1);

        return this->splineinterp(frac, this->gen_06_delay_11_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_06_delay_11_wrap))
        ), this->gen_06_delay_11_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->gen_06_delay_11_wrap))
        ), this->gen_06_delay_11_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->gen_06_delay_11_wrap))
        ), this->gen_06_delay_11_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->gen_06_delay_11_wrap))
        ));
    } else if (interp == 7) {
        number r = (int)(this->gen_06_delay_11_buffer->getSize()) + this->gen_06_delay_11_reader - ((size > this->gen_06_delay_11__maxdelay ? this->gen_06_delay_11__maxdelay : (size < (1 + this->gen_06_delay_11_reader != this->gen_06_delay_11_writer) ? 1 + this->gen_06_delay_11_reader != this->gen_06_delay_11_writer : size)));
        long index1 = (long)(rnbo_floor(r));
        number frac = r - index1;
        Index index2 = (Index)(index1 + 1);
        Index index3 = (Index)(index2 + 1);
        Index index4 = (Index)(index3 + 1);
        Index index5 = (Index)(index4 + 1);
        Index index6 = (Index)(index5 + 1);

        return this->spline6interp(frac, this->gen_06_delay_11_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_06_delay_11_wrap))
        ), this->gen_06_delay_11_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->gen_06_delay_11_wrap))
        ), this->gen_06_delay_11_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->gen_06_delay_11_wrap))
        ), this->gen_06_delay_11_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->gen_06_delay_11_wrap))
        ), this->gen_06_delay_11_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->gen_06_delay_11_wrap))
        ), this->gen_06_delay_11_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->gen_06_delay_11_wrap))
        ));
    } else if (interp == 3) {
        number r = (int)(this->gen_06_delay_11_buffer->getSize()) + this->gen_06_delay_11_reader - ((size > this->gen_06_delay_11__maxdelay ? this->gen_06_delay_11__maxdelay : (size < (this->gen_06_delay_11_reader != this->gen_06_delay_11_writer) ? this->gen_06_delay_11_reader != this->gen_06_delay_11_writer : size)));
        long index1 = (long)(rnbo_floor(r));
        number frac = r - index1;
        Index index2 = (Index)(index1 + 1);

        return this->cosineinterp(frac, this->gen_06_delay_11_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_06_delay_11_wrap))
        ), this->gen_06_delay_11_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->gen_06_delay_11_wrap))
        ));
    }

    number r = (int)(this->gen_06_delay_11_buffer->getSize()) + this->gen_06_delay_11_reader - ((size > this->gen_06_delay_11__maxdelay ? this->gen_06_delay_11__maxdelay : (size < (this->gen_06_delay_11_reader != this->gen_06_delay_11_writer) ? this->gen_06_delay_11_reader != this->gen_06_delay_11_writer : size)));
    long index1 = (long)(rnbo_floor(r));

    return this->gen_06_delay_11_buffer->getSample(
        0,
        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_06_delay_11_wrap))
    );
}

void gen_06_delay_11_write(number v) {
    this->gen_06_delay_11_writer = this->gen_06_delay_11_reader;
    this->gen_06_delay_11_buffer[(Index)this->gen_06_delay_11_writer] = v;
}

number gen_06_delay_11_next(number v, int size) {
    number effectiveSize = (size == -1 ? this->gen_06_delay_11__maxdelay : size);
    number val = this->gen_06_delay_11_read(effectiveSize, 0);
    this->gen_06_delay_11_write(v);
    this->gen_06_delay_11_step();
    return val;
}

array<Index, 2> gen_06_delay_11_calcSizeInSamples() {
    number sizeInSamples = 0;
    Index allocatedSizeInSamples = 0;

    {
        sizeInSamples = this->gen_06_delay_11_evaluateSizeExpr(this->samplerate(), this->vectorsize());
        this->gen_06_delay_11_sizemode = 0;
    }

    sizeInSamples = rnbo_floor(sizeInSamples);
    sizeInSamples = this->maximum(sizeInSamples, 2);
    allocatedSizeInSamples = (Index)(sizeInSamples);
    allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
    return {sizeInSamples, allocatedSizeInSamples};
}

void gen_06_delay_11_init() {
    auto result = this->gen_06_delay_11_calcSizeInSamples();
    this->gen_06_delay_11__maxdelay = result[0];
    Index requestedSizeInSamples = (Index)(result[1]);
    this->gen_06_delay_11_buffer->requestSize(requestedSizeInSamples, 1);
    this->gen_06_delay_11_wrap = requestedSizeInSamples - 1;
}

void gen_06_delay_11_clear() {
    this->gen_06_delay_11_buffer->setZero();
}

void gen_06_delay_11_reset() {
    auto result = this->gen_06_delay_11_calcSizeInSamples();
    this->gen_06_delay_11__maxdelay = result[0];
    Index allocatedSizeInSamples = (Index)(result[1]);
    this->gen_06_delay_11_buffer->setSize(allocatedSizeInSamples);
    updateDataRef(this, this->gen_06_delay_11_buffer);
    this->gen_06_delay_11_wrap = this->gen_06_delay_11_buffer->getSize() - 1;
    this->gen_06_delay_11_clear();

    if (this->gen_06_delay_11_reader >= this->gen_06_delay_11__maxdelay || this->gen_06_delay_11_writer >= this->gen_06_delay_11__maxdelay) {
        this->gen_06_delay_11_reader = 0;
        this->gen_06_delay_11_writer = 0;
    }
}

void gen_06_delay_11_dspsetup() {
    this->gen_06_delay_11_reset();
}

number gen_06_delay_11_evaluateSizeExpr(number samplerate, number vectorsize) {
    RNBO_UNUSED(vectorsize);
    RNBO_UNUSED(samplerate);
    return 2656;
}

number gen_06_delay_11_size() {
    return this->gen_06_delay_11__maxdelay;
}

void gen_06_delay_12_step() {
    this->gen_06_delay_12_reader++;

    if (this->gen_06_delay_12_reader >= (int)(this->gen_06_delay_12_buffer->getSize()))
        this->gen_06_delay_12_reader = 0;
}

number gen_06_delay_12_read(number size, Int interp) {
    RNBO_UNUSED(interp);

    {
        number r = (int)(this->gen_06_delay_12_buffer->getSize()) + this->gen_06_delay_12_reader - ((size > this->gen_06_delay_12__maxdelay ? this->gen_06_delay_12__maxdelay : (size < (this->gen_06_delay_12_reader != this->gen_06_delay_12_writer) ? this->gen_06_delay_12_reader != this->gen_06_delay_12_writer : size)));
        long index1 = (long)(rnbo_floor(r));
        number frac = r - index1;
        long index2 = (long)(index1 + 1);

        return this->linearinterp(frac, this->gen_06_delay_12_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_06_delay_12_wrap))
        ), this->gen_06_delay_12_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->gen_06_delay_12_wrap))
        ));
    }

    number r = (int)(this->gen_06_delay_12_buffer->getSize()) + this->gen_06_delay_12_reader - ((size > this->gen_06_delay_12__maxdelay ? this->gen_06_delay_12__maxdelay : (size < (this->gen_06_delay_12_reader != this->gen_06_delay_12_writer) ? this->gen_06_delay_12_reader != this->gen_06_delay_12_writer : size)));
    long index1 = (long)(rnbo_floor(r));

    return this->gen_06_delay_12_buffer->getSample(
        0,
        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_06_delay_12_wrap))
    );
}

void gen_06_delay_12_write(number v) {
    this->gen_06_delay_12_writer = this->gen_06_delay_12_reader;
    this->gen_06_delay_12_buffer[(Index)this->gen_06_delay_12_writer] = v;
}

number gen_06_delay_12_next(number v, int size) {
    number effectiveSize = (size == -1 ? this->gen_06_delay_12__maxdelay : size);
    number val = this->gen_06_delay_12_read(effectiveSize, 0);
    this->gen_06_delay_12_write(v);
    this->gen_06_delay_12_step();
    return val;
}

array<Index, 2> gen_06_delay_12_calcSizeInSamples() {
    number sizeInSamples = 0;
    Index allocatedSizeInSamples = 0;

    {
        sizeInSamples = this->gen_06_delay_12_evaluateSizeExpr(this->samplerate(), this->vectorsize());
        this->gen_06_delay_12_sizemode = 0;
    }

    sizeInSamples = rnbo_floor(sizeInSamples);
    sizeInSamples = this->maximum(sizeInSamples, 2);
    allocatedSizeInSamples = (Index)(sizeInSamples);
    allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
    return {sizeInSamples, allocatedSizeInSamples};
}

void gen_06_delay_12_init() {
    auto result = this->gen_06_delay_12_calcSizeInSamples();
    this->gen_06_delay_12__maxdelay = result[0];
    Index requestedSizeInSamples = (Index)(result[1]);
    this->gen_06_delay_12_buffer->requestSize(requestedSizeInSamples, 1);
    this->gen_06_delay_12_wrap = requestedSizeInSamples - 1;
}

void gen_06_delay_12_clear() {
    this->gen_06_delay_12_buffer->setZero();
}

void gen_06_delay_12_reset() {
    auto result = this->gen_06_delay_12_calcSizeInSamples();
    this->gen_06_delay_12__maxdelay = result[0];
    Index allocatedSizeInSamples = (Index)(result[1]);
    this->gen_06_delay_12_buffer->setSize(allocatedSizeInSamples);
    updateDataRef(this, this->gen_06_delay_12_buffer);
    this->gen_06_delay_12_wrap = this->gen_06_delay_12_buffer->getSize() - 1;
    this->gen_06_delay_12_clear();

    if (this->gen_06_delay_12_reader >= this->gen_06_delay_12__maxdelay || this->gen_06_delay_12_writer >= this->gen_06_delay_12__maxdelay) {
        this->gen_06_delay_12_reader = 0;
        this->gen_06_delay_12_writer = 0;
    }
}

void gen_06_delay_12_dspsetup() {
    this->gen_06_delay_12_reset();
}

number gen_06_delay_12_evaluateSizeExpr(number samplerate, number vectorsize) {
    RNBO_UNUSED(vectorsize);
    RNBO_UNUSED(samplerate);
    return 924;
}

number gen_06_delay_12_size() {
    return this->gen_06_delay_12__maxdelay;
}

void gen_06_delay_13_step() {
    this->gen_06_delay_13_reader++;

    if (this->gen_06_delay_13_reader >= (int)(this->gen_06_delay_13_buffer->getSize()))
        this->gen_06_delay_13_reader = 0;
}

number gen_06_delay_13_read(number size, Int interp) {
    RNBO_UNUSED(interp);

    {
        number r = (int)(this->gen_06_delay_13_buffer->getSize()) + this->gen_06_delay_13_reader - ((size > this->gen_06_delay_13__maxdelay ? this->gen_06_delay_13__maxdelay : (size < (this->gen_06_delay_13_reader != this->gen_06_delay_13_writer) ? this->gen_06_delay_13_reader != this->gen_06_delay_13_writer : size)));
        long index1 = (long)(rnbo_floor(r));
        number frac = r - index1;
        long index2 = (long)(index1 + 1);

        return this->linearinterp(frac, this->gen_06_delay_13_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_06_delay_13_wrap))
        ), this->gen_06_delay_13_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->gen_06_delay_13_wrap))
        ));
    }

    number r = (int)(this->gen_06_delay_13_buffer->getSize()) + this->gen_06_delay_13_reader - ((size > this->gen_06_delay_13__maxdelay ? this->gen_06_delay_13__maxdelay : (size < (this->gen_06_delay_13_reader != this->gen_06_delay_13_writer) ? this->gen_06_delay_13_reader != this->gen_06_delay_13_writer : size)));
    long index1 = (long)(rnbo_floor(r));

    return this->gen_06_delay_13_buffer->getSample(
        0,
        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->gen_06_delay_13_wrap))
    );
}

void gen_06_delay_13_write(number v) {
    this->gen_06_delay_13_writer = this->gen_06_delay_13_reader;
    this->gen_06_delay_13_buffer[(Index)this->gen_06_delay_13_writer] = v;
}

number gen_06_delay_13_next(number v, int size) {
    number effectiveSize = (size == -1 ? this->gen_06_delay_13__maxdelay : size);
    number val = this->gen_06_delay_13_read(effectiveSize, 0);
    this->gen_06_delay_13_write(v);
    this->gen_06_delay_13_step();
    return val;
}

array<Index, 2> gen_06_delay_13_calcSizeInSamples() {
    number sizeInSamples = 0;
    Index allocatedSizeInSamples = 0;

    {
        sizeInSamples = this->gen_06_delay_13_evaluateSizeExpr(this->samplerate(), this->vectorsize());
        this->gen_06_delay_13_sizemode = 0;
    }

    sizeInSamples = rnbo_floor(sizeInSamples);
    sizeInSamples = this->maximum(sizeInSamples, 2);
    allocatedSizeInSamples = (Index)(sizeInSamples);
    allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
    return {sizeInSamples, allocatedSizeInSamples};
}

void gen_06_delay_13_init() {
    auto result = this->gen_06_delay_13_calcSizeInSamples();
    this->gen_06_delay_13__maxdelay = result[0];
    Index requestedSizeInSamples = (Index)(result[1]);
    this->gen_06_delay_13_buffer->requestSize(requestedSizeInSamples, 1);
    this->gen_06_delay_13_wrap = requestedSizeInSamples - 1;
}

void gen_06_delay_13_clear() {
    this->gen_06_delay_13_buffer->setZero();
}

void gen_06_delay_13_reset() {
    auto result = this->gen_06_delay_13_calcSizeInSamples();
    this->gen_06_delay_13__maxdelay = result[0];
    Index allocatedSizeInSamples = (Index)(result[1]);
    this->gen_06_delay_13_buffer->setSize(allocatedSizeInSamples);
    updateDataRef(this, this->gen_06_delay_13_buffer);
    this->gen_06_delay_13_wrap = this->gen_06_delay_13_buffer->getSize() - 1;
    this->gen_06_delay_13_clear();

    if (this->gen_06_delay_13_reader >= this->gen_06_delay_13__maxdelay || this->gen_06_delay_13_writer >= this->gen_06_delay_13__maxdelay) {
        this->gen_06_delay_13_reader = 0;
        this->gen_06_delay_13_writer = 0;
    }
}

void gen_06_delay_13_dspsetup() {
    this->gen_06_delay_13_reset();
}

number gen_06_delay_13_evaluateSizeExpr(number samplerate, number vectorsize) {
    RNBO_UNUSED(vectorsize);
    RNBO_UNUSED(samplerate);
    return 688;
}

number gen_06_delay_13_size() {
    return this->gen_06_delay_13__maxdelay;
}

number gen_06_history_14_getvalue() {
    return this->gen_06_history_14_value;
}

void gen_06_history_14_setvalue(number val) {
    this->gen_06_history_14_value = val;
}

void gen_06_history_14_reset() {
    this->gen_06_history_14_value = 0;
}

void gen_06_history_14_init() {
    this->gen_06_history_14_value = 0;
}

number gen_06_history_15_getvalue() {
    return this->gen_06_history_15_value;
}

void gen_06_history_15_setvalue(number val) {
    this->gen_06_history_15_value = val;
}

void gen_06_history_15_reset() {
    this->gen_06_history_15_value = 0;
}

void gen_06_history_15_init() {
    this->gen_06_history_15_value = 0;
}

number gen_06_history_16_getvalue() {
    return this->gen_06_history_16_value;
}

void gen_06_history_16_setvalue(number val) {
    this->gen_06_history_16_value = val;
}

void gen_06_history_16_reset() {
    this->gen_06_history_16_value = 0;
}

void gen_06_history_16_init() {
    this->gen_06_history_16_value = 0;
}

number gen_06_cycle_76_ph_next(number freq, number reset) {
    RNBO_UNUSED(reset);

    {
        {}
    }

    number pincr = freq * this->gen_06_cycle_76_ph_conv;

    if (this->gen_06_cycle_76_ph_currentPhase < 0.)
        this->gen_06_cycle_76_ph_currentPhase = 1. + this->gen_06_cycle_76_ph_currentPhase;

    if (this->gen_06_cycle_76_ph_currentPhase > 1.)
        this->gen_06_cycle_76_ph_currentPhase = this->gen_06_cycle_76_ph_currentPhase - 1.;

    number tmp = this->gen_06_cycle_76_ph_currentPhase;
    this->gen_06_cycle_76_ph_currentPhase += pincr;
    return tmp;
}

void gen_06_cycle_76_ph_reset() {
    this->gen_06_cycle_76_ph_currentPhase = 0;
}

void gen_06_cycle_76_ph_dspsetup() {
    this->gen_06_cycle_76_ph_conv = (this->sr == 0. ? 0. : (number)1 / this->sr);
}

array<number, 2> gen_06_cycle_76_next(number frequency, number phase_offset) {
    RNBO_UNUSED(phase_offset);
    RNBO_UNUSED(frequency);

    {
        uint32_t uint_phase;

        {
            uint_phase = this->gen_06_cycle_76_phasei;
        }

        uint32_t idx = (uint32_t)(uint32_rshift(uint_phase, 18));
        number frac = ((BinOpInt)((BinOpInt)uint_phase & (BinOpInt)262143)) * 3.81471181759574e-6;
        number y0 = this->gen_06_cycle_76_buffer[(Index)idx];
        number y1 = this->gen_06_cycle_76_buffer[(Index)((BinOpInt)(idx + 1) & (BinOpInt)16383)];
        number y = y0 + frac * (y1 - y0);

        {
            uint32_t pincr = (uint32_t)(uint32_trunc(0.07 * this->gen_06_cycle_76_f2i));
            this->gen_06_cycle_76_phasei = uint32_add(this->gen_06_cycle_76_phasei, pincr);
        }

        return {y, uint_phase * 0.232830643653869629e-9};
    }
}

void gen_06_cycle_76_dspsetup() {
    this->gen_06_cycle_76_phasei = 0;
    this->gen_06_cycle_76_f2i = (this->samplerate() == 0. ? 0. : (number)4294967296 / this->samplerate());
    this->gen_06_cycle_76_wrap = (long)(this->gen_06_cycle_76_buffer->getSize()) - 1;
}

void gen_06_cycle_76_reset() {
    this->gen_06_cycle_76_phasei = 0;
}

void gen_06_cycle_76_bufferUpdated() {
    this->gen_06_cycle_76_wrap = (long)(this->gen_06_cycle_76_buffer->getSize()) - 1;
}

number gen_06_cycle_87_ph_next(number freq, number reset) {
    RNBO_UNUSED(reset);

    {
        {}
    }

    number pincr = freq * this->gen_06_cycle_87_ph_conv;

    if (this->gen_06_cycle_87_ph_currentPhase < 0.)
        this->gen_06_cycle_87_ph_currentPhase = 1. + this->gen_06_cycle_87_ph_currentPhase;

    if (this->gen_06_cycle_87_ph_currentPhase > 1.)
        this->gen_06_cycle_87_ph_currentPhase = this->gen_06_cycle_87_ph_currentPhase - 1.;

    number tmp = this->gen_06_cycle_87_ph_currentPhase;
    this->gen_06_cycle_87_ph_currentPhase += pincr;
    return tmp;
}

void gen_06_cycle_87_ph_reset() {
    this->gen_06_cycle_87_ph_currentPhase = 0;
}

void gen_06_cycle_87_ph_dspsetup() {
    this->gen_06_cycle_87_ph_conv = (this->sr == 0. ? 0. : (number)1 / this->sr);
}

array<number, 2> gen_06_cycle_87_next(number frequency, number phase_offset) {
    RNBO_UNUSED(phase_offset);
    RNBO_UNUSED(frequency);

    {
        uint32_t uint_phase;

        {
            uint_phase = this->gen_06_cycle_87_phasei;
        }

        uint32_t idx = (uint32_t)(uint32_rshift(uint_phase, 18));
        number frac = ((BinOpInt)((BinOpInt)uint_phase & (BinOpInt)262143)) * 3.81471181759574e-6;
        number y0 = this->gen_06_cycle_87_buffer[(Index)idx];
        number y1 = this->gen_06_cycle_87_buffer[(Index)((BinOpInt)(idx + 1) & (BinOpInt)16383)];
        number y = y0 + frac * (y1 - y0);

        {
            uint32_t pincr = (uint32_t)(uint32_trunc(0.1 * this->gen_06_cycle_87_f2i));
            this->gen_06_cycle_87_phasei = uint32_add(this->gen_06_cycle_87_phasei, pincr);
        }

        return {y, uint_phase * 0.232830643653869629e-9};
    }
}

void gen_06_cycle_87_dspsetup() {
    this->gen_06_cycle_87_phasei = 0;
    this->gen_06_cycle_87_f2i = (this->samplerate() == 0. ? 0. : (number)4294967296 / this->samplerate());
    this->gen_06_cycle_87_wrap = (long)(this->gen_06_cycle_87_buffer->getSize()) - 1;
}

void gen_06_cycle_87_reset() {
    this->gen_06_cycle_87_phasei = 0;
}

void gen_06_cycle_87_bufferUpdated() {
    this->gen_06_cycle_87_wrap = (long)(this->gen_06_cycle_87_buffer->getSize()) - 1;
}

void gen_06_dspsetup(bool force) {
    if ((bool)(this->gen_06_setupDone) && (bool)(!(bool)(force)))
        return;

    this->gen_06_setupDone = true;
    this->gen_06_delay_1_dspsetup();
    this->gen_06_delay_2_dspsetup();
    this->gen_06_delay_3_dspsetup();
    this->gen_06_delay_4_dspsetup();
    this->gen_06_delay_5_dspsetup();
    this->gen_06_delay_6_dspsetup();
    this->gen_06_delay_7_dspsetup();
    this->gen_06_delay_8_dspsetup();
    this->gen_06_delay_9_dspsetup();
    this->gen_06_delay_10_dspsetup();
    this->gen_06_delay_11_dspsetup();
    this->gen_06_delay_12_dspsetup();
    this->gen_06_delay_13_dspsetup();
    this->gen_06_cycle_76_ph_dspsetup();
    this->gen_06_cycle_76_dspsetup();
    this->gen_06_cycle_87_ph_dspsetup();
    this->gen_06_cycle_87_dspsetup();
}

void message_02_init() {
    this->message_02_set_set({100});
}

void message_03_init() {
    this->message_03_set_set({1.5});
}

void message_04_init() {
    this->message_04_set_set({1.75});
}

void numberobj_44_init() {
    this->numberobj_44_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-60"), 1, this->_currentTime);
}

void numberobj_44_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_44_value;
}

void numberobj_44_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_44_value_set(preset["value"]);
}

void param_36_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_36_value;
}

void param_36_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_36_value_set(preset["value"]);
}

void message_05_init() {
    this->message_05_set_set({2});
}

void numberobj_45_init() {
    this->numberobj_45_currentFormat = 0;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-31"), 1, this->_currentTime);
}

void numberobj_45_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_45_value;
}

void numberobj_45_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_45_value_set(preset["value"]);
}

void counter_01_inc() {
    this->counter_01_count = ((bool)(this->counter_01_phase) ? this->counter_01_count + 1 : this->counter_01_count - 1);
}

void message_06_init() {
    this->message_06_set_set({4});
}

void toggle_02_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->toggle_02_value_number;
}

void toggle_02_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->toggle_02_value_number_set(preset["value"]);
}

void numberobj_46_init() {
    this->numberobj_46_currentFormat = 0;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-22"), 1, this->_currentTime);
}

void numberobj_46_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_46_value;
}

void numberobj_46_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_46_value_set(preset["value"]);
}

void numberobj_47_init() {
    this->numberobj_47_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-14"), 1, this->_currentTime);
}

void numberobj_47_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_47_value;
}

void numberobj_47_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_47_value_set(preset["value"]);
}

void transport_01_onTempoChanged(number state) {
    this->transport_01_outtempo_set(state);
}

void transport_01_onTransportChanged(number state) {
    this->transport_01_state_set(state);
}

void transport_01_onTimeSignatureChanged(number numerator, number denominator) {
    this->transport_01_outtimesig_set({numerator, denominator});
}

void param_37_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_37_value;
}

void param_37_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_37_value_set(preset["value"]);
}

void gen_06_param_reverb_indiffusion2_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->gen_06_param_reverb_indiffusion2_value;
}

void gen_06_param_reverb_indiffusion2_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->gen_06_param_reverb_indiffusion2_value_set(preset["value"]);
}

void gen_06_param_reverb_decay1_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->gen_06_param_reverb_decay1_value;
}

void gen_06_param_reverb_decay1_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->gen_06_param_reverb_decay1_value_set(preset["value"]);
}

void gen_06_param_reverb_decay_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->gen_06_param_reverb_decay_value;
}

void gen_06_param_reverb_decay_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->gen_06_param_reverb_decay_value_set(preset["value"]);
}

void gen_06_param_reverb_drywet_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->gen_06_param_reverb_drywet_value;
}

void gen_06_param_reverb_drywet_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->gen_06_param_reverb_drywet_value_set(preset["value"]);
}

void gen_06_param_reverb_inbandwidth_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->gen_06_param_reverb_inbandwidth_value;
}

void gen_06_param_reverb_inbandwidth_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->gen_06_param_reverb_inbandwidth_value_set(preset["value"]);
}

void gen_06_param_reverb_damping_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->gen_06_param_reverb_damping_value;
}

void gen_06_param_reverb_damping_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->gen_06_param_reverb_damping_value_set(preset["value"]);
}

void gen_06_param_reverb_decay2_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->gen_06_param_reverb_decay2_value;
}

void gen_06_param_reverb_decay2_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->gen_06_param_reverb_decay2_value_set(preset["value"]);
}

void gen_06_param_reverb_indiffusion1_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->gen_06_param_reverb_indiffusion1_value;
}

void gen_06_param_reverb_indiffusion1_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->gen_06_param_reverb_indiffusion1_value_set(preset["value"]);
}

void gen_06_param_reverb_predelay_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->gen_06_param_reverb_predelay_value;
}

void gen_06_param_reverb_predelay_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->gen_06_param_reverb_predelay_value_set(preset["value"]);
}

void timevalue_01_sendValue() {
    {
        {
            {
                {
                    this->timevalue_01_out_set(this->tickstoms(480));
                }
            }
        }
    }
}

void timevalue_01_onTempoChanged(number tempo) {
    RNBO_UNUSED(tempo);

    {
        this->timevalue_01_sendValue();
    }
}

void timevalue_01_onSampleRateChanged(number ) {}

void timevalue_01_onTimeSignatureChanged(number , number ) {}

Index globaltransport_getSampleOffset(MillisecondTime time) {
    return this->mstosamps(this->maximum(0, time - this->getEngine()->getCurrentTime()));
}

number globaltransport_getTempoAtSample(SampleIndex sampleOffset) {
    return (sampleOffset >= 0 && sampleOffset < this->vs ? this->globaltransport_tempo[(Index)sampleOffset] : this->globaltransport_lastTempo);
}

number globaltransport_getStateAtSample(SampleIndex sampleOffset) {
    return (sampleOffset >= 0 && sampleOffset < this->vs ? this->globaltransport_state[(Index)sampleOffset] : this->globaltransport_lastState);
}

number globaltransport_getState(MillisecondTime time) {
    return this->globaltransport_getStateAtSample(this->globaltransport_getSampleOffset(time));
}

number globaltransport_getTempo(MillisecondTime time) {
    return this->globaltransport_getTempoAtSample(this->globaltransport_getSampleOffset(time));
}

number globaltransport_getBeatTime(MillisecondTime time) {
    number i = 2;

    while (i < this->globaltransport_beatTimeChanges->length && this->globaltransport_beatTimeChanges[(Index)(i + 1)] <= time) {
        i += 2;
    }

    i -= 2;
    number beatTimeBase = this->globaltransport_beatTimeChanges[(Index)i];

    if (this->globaltransport_getState(time) == 0)
        return beatTimeBase;

    number beatTimeBaseMsTime = this->globaltransport_beatTimeChanges[(Index)(i + 1)];
    number diff = time - beatTimeBaseMsTime;
    number diffInBeats = diff * this->globaltransport_getTempo(time) * 0.008 / (number)480;
    return beatTimeBase + diffInBeats;
}

bool globaltransport_setTempo(MillisecondTime time, number tempo, bool notify) {
    if ((bool)(notify)) {
        this->processTempoEvent(time, tempo);
        this->globaltransport_notify = true;
    } else {
        Index offset = (Index)(this->globaltransport_getSampleOffset(time));

        if (this->globaltransport_getTempoAtSample((SampleIndex)(offset)) != tempo) {
            this->globaltransport_beatTimeChanges->push(this->globaltransport_getBeatTime(time));
            this->globaltransport_beatTimeChanges->push(time);
            fillSignal(this->globaltransport_tempo, this->vs, tempo, offset);
            this->globaltransport_lastTempo = tempo;
            this->globaltransport_tempoNeedsReset = true;
            return true;
        }
    }

    return false;
}

bool globaltransport_setState(MillisecondTime time, number state, bool notify) {
    if ((bool)(notify)) {
        this->processTransportEvent(time, TransportState(state));
        this->globaltransport_notify = true;
    } else {
        Index offset = (Index)(this->globaltransport_getSampleOffset(time));

        if (this->globaltransport_getStateAtSample(offset) != state) {
            this->globaltransport_beatTimeChanges->push(this->globaltransport_getBeatTime(time));
            this->globaltransport_beatTimeChanges->push(time);
            fillSignal(this->globaltransport_state, this->vs, state, offset);
            this->globaltransport_lastState = TransportState(state);
            this->globaltransport_stateNeedsReset = true;
            return true;
        }
    }

    return false;
}

bool globaltransport_setBeatTime(MillisecondTime time, number beattime, bool notify) {
    if ((bool)(notify)) {
        this->processBeatTimeEvent(time, beattime);
        this->globaltransport_notify = true;
        return false;
    } else {
        bool beatTimeHasChanged = false;
        float oldBeatTime = (float)(this->globaltransport_getBeatTime(time));
        float newBeatTime = (float)(beattime);

        if (oldBeatTime != newBeatTime) {
            beatTimeHasChanged = true;
        }

        this->globaltransport_beatTimeChanges->push(beattime);
        this->globaltransport_beatTimeChanges->push(time);
        return beatTimeHasChanged;
    }
}

number globaltransport_getBeatTimeAtSample(SampleIndex sampleOffset) {
    auto msOffset = this->sampstoms(sampleOffset);
    return this->globaltransport_getBeatTime(this->getEngine()->getCurrentTime() + msOffset);
}

array<number, 2> globaltransport_getTimeSignature(MillisecondTime time) {
    number i = 3;

    while (i < this->globaltransport_timeSignatureChanges->length && this->globaltransport_timeSignatureChanges[(Index)(i + 2)] <= time) {
        i += 3;
    }

    i -= 3;

    return {
        this->globaltransport_timeSignatureChanges[(Index)i],
        this->globaltransport_timeSignatureChanges[(Index)(i + 1)]
    };
}

array<number, 2> globaltransport_getTimeSignatureAtSample(SampleIndex sampleOffset) {
    MillisecondTime msOffset = (MillisecondTime)(this->sampstoms(sampleOffset));
    return this->globaltransport_getTimeSignature(this->getEngine()->getCurrentTime() + msOffset);
}

void globaltransport_setBBUBase(
    MillisecondTime time,
    number numerator,
    number denominator,
    number bars,
    number beats,
    number units
) {
    number beatsInQuarterNotes = this->globaltransport_getBeatTime(time);
    bars--;
    beats--;
    number beatsIncCurrenttDenom = beatsInQuarterNotes * (denominator * 0.25);
    number beatLength = (number)4 / denominator;
    number beatLengthInUnits = beatLength * 480;

    while (units > beatLengthInUnits) {
        units -= beatLengthInUnits;
        beats++;
    }

    number targetBeatTime = bars * numerator + beats + units / beatLengthInUnits;
    this->globaltransport_bbuBase = targetBeatTime - beatsIncCurrenttDenom;
}

array<number, 3> globaltransport_getBBU(MillisecondTime time) {
    array<number, 2> currentSig = this->globaltransport_getTimeSignature(time);
    number numerator = currentSig[0];
    number denominator = currentSig[1];
    number beatsInQuarterNotes = this->globaltransport_getBeatTime(time);
    number beatsIncCurrenttDenom = beatsInQuarterNotes * (denominator * 0.25);
    number beatLength = (number)4 / denominator;
    number beatLengthInUnits = beatLength * 480;
    number targetBeatTime = beatsIncCurrenttDenom + this->globaltransport_bbuBase;
    number currentBars = 0;
    number currentBeats = 0;
    number currentUnits = 0;

    if (targetBeatTime >= 0) {
        currentBars = trunc(targetBeatTime / numerator);
        targetBeatTime -= currentBars * numerator;
        currentBeats = trunc(targetBeatTime);
        targetBeatTime -= currentBeats;
        currentUnits = targetBeatTime * beatLengthInUnits;
    } else {
        currentBars = trunc(targetBeatTime / numerator);
        targetBeatTime -= currentBars * numerator;

        if (targetBeatTime != 0) {
            currentBars -= 1;
            currentBeats = trunc(targetBeatTime);
            targetBeatTime -= currentBeats;
            currentBeats = numerator + currentBeats;
            currentUnits = targetBeatTime * beatLengthInUnits;

            if (currentUnits != 0) {
                currentUnits = beatLengthInUnits + currentUnits;
                currentBeats -= 1;
            }
        }
    }

    return {currentBars + 1, currentBeats + 1, currentUnits};
}

bool globaltransport_setTimeSignature(MillisecondTime time, number numerator, number denominator, bool notify) {
    if ((bool)(notify)) {
        this->processTimeSignatureEvent(time, (int)(numerator), (int)(denominator));
        this->globaltransport_notify = true;
    } else {
        array<number, 2> currentSig = this->globaltransport_getTimeSignature(time);

        if (currentSig[0] != numerator || currentSig[1] != denominator) {
            array<number, 3> bbu = this->globaltransport_getBBU(time);
            this->globaltransport_setBBUBase(time, numerator, denominator, bbu[0], bbu[1], bbu[2]);
            this->globaltransport_timeSignatureChanges->push(numerator);
            this->globaltransport_timeSignatureChanges->push(denominator);
            this->globaltransport_timeSignatureChanges->push(time);
            return true;
        }
    }

    return false;
}

array<number, 3> globaltransport_getBBUAtSample(SampleIndex sampleOffset) {
    auto msOffset = this->sampstoms(sampleOffset);
    return this->globaltransport_getBBU(this->getEngine()->getCurrentTime() + msOffset);
}

bool globaltransport_setBBU(MillisecondTime time, number bars, number beats, number units, bool notify) {
    RNBO_UNUSED(notify);
    array<number, 2> sig = this->globaltransport_getTimeSignature(time);
    number numerator = sig[0];
    number denominator = sig[1];
    this->globaltransport_setBBUBase(time, numerator, denominator, bars, beats, units);
    return true;
}

void globaltransport_advance() {
    if ((bool)(this->globaltransport_tempoNeedsReset)) {
        fillSignal(this->globaltransport_tempo, this->vs, this->globaltransport_lastTempo);
        this->globaltransport_tempoNeedsReset = false;

        if ((bool)(this->globaltransport_notify)) {
            this->getEngine()->sendTempoEvent(this->globaltransport_lastTempo);
        }
    }

    if ((bool)(this->globaltransport_stateNeedsReset)) {
        fillSignal(this->globaltransport_state, this->vs, this->globaltransport_lastState);
        this->globaltransport_stateNeedsReset = false;

        if ((bool)(this->globaltransport_notify)) {
            this->getEngine()->sendTransportEvent(TransportState(this->globaltransport_lastState));
        }
    }

    if (this->globaltransport_beatTimeChanges->length > 2) {
        this->globaltransport_beatTimeChanges[0] = this->globaltransport_beatTimeChanges[(Index)(this->globaltransport_beatTimeChanges->length - 2)];
        this->globaltransport_beatTimeChanges[1] = this->globaltransport_beatTimeChanges[(Index)(this->globaltransport_beatTimeChanges->length - 1)];
        this->globaltransport_beatTimeChanges->length = 2;

        if ((bool)(this->globaltransport_notify)) {
            this->getEngine()->sendBeatTimeEvent(this->globaltransport_beatTimeChanges[0]);
        }
    }

    if (this->globaltransport_timeSignatureChanges->length > 3) {
        this->globaltransport_timeSignatureChanges[0] = this->globaltransport_timeSignatureChanges[(Index)(this->globaltransport_timeSignatureChanges->length - 3)];
        this->globaltransport_timeSignatureChanges[1] = this->globaltransport_timeSignatureChanges[(Index)(this->globaltransport_timeSignatureChanges->length - 2)];
        this->globaltransport_timeSignatureChanges[2] = this->globaltransport_timeSignatureChanges[(Index)(this->globaltransport_timeSignatureChanges->length - 1)];
        this->globaltransport_timeSignatureChanges->length = 3;

        if ((bool)(this->globaltransport_notify)) {
            this->getEngine()->sendTimeSignatureEvent(
                (int)(this->globaltransport_timeSignatureChanges[0]),
                (int)(this->globaltransport_timeSignatureChanges[1])
            );
        }
    }

    this->globaltransport_notify = false;
}

void globaltransport_dspsetup(bool force) {
    if ((bool)(this->globaltransport_setupDone) && (bool)(!(bool)(force)))
        return;

    fillSignal(this->globaltransport_tempo, this->vs, this->globaltransport_lastTempo);
    this->globaltransport_tempoNeedsReset = false;
    fillSignal(this->globaltransport_state, this->vs, this->globaltransport_lastState);
    this->globaltransport_stateNeedsReset = false;
    this->globaltransport_setupDone = true;
}

bool stackprotect_check() {
    this->stackprotect_count++;

    if (this->stackprotect_count > 128) {
        console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
        return true;
    }

    return false;
}

void updateTime(MillisecondTime time) {
    this->_currentTime = time;
    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));

    if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;

    if (this->sampleOffsetIntoNextAudioBuffer < 0)
        this->sampleOffsetIntoNextAudioBuffer = 0;
}

void assign_defaults()
{
    toggle_01_value_number = 0;
    toggle_01_value_number_setter(toggle_01_value_number);
    metro_01_on = 1;
    metro_01_interval = 0;
    metro_01_interval_setter(metro_01_interval);
    numberobj_43_value = 0;
    numberobj_43_value_setter(numberobj_43_value);
    send_01_input_number = 0;
    p_14_target = 0;
    p_15_target = 0;
    p_16_target = 0;
    gen_06_in1 = 0;
    gen_06_indiffusion2 = 0.625;
    gen_06_decay1 = 0.7;
    gen_06_decay = 0.5;
    gen_06_drywet = 0.5;
    gen_06_inbandwidth = 0.5;
    gen_06_damping = 0.5;
    gen_06_decay2 = 0.5;
    gen_06_indiffusion1 = 0.75;
    gen_06_predelay = 10;
    send_02_input_number = 0;
    p_17_target = 0;
    p_18_target = 0;
    numberobj_44_value = 0;
    numberobj_44_value_setter(numberobj_44_value);
    param_36_value = 25;
    p_19_target = 0;
    numberobj_45_value = 0;
    numberobj_45_value_setter(numberobj_45_value);
    counter_01_carryflag = 0;
    counter_01_direction = 0;
    counter_01_resetnext_number = 0;
    counter_01_resetnow_number = 0;
    counter_01_maximum = 32;
    counter_01_output = 0;
    counter_01_underflow_number = 0;
    counter_01_overflow_number = 0;
    counter_01_carry = 0;
    counter_01_minimum = 0;
    send_03_input_number = 0;
    p_20_target = 0;
    toggle_02_value_number = 0;
    toggle_02_value_number_setter(toggle_02_value_number);
    numberobj_46_value = 0;
    numberobj_46_value_setter(numberobj_46_value);
    numberobj_47_value = 0;
    numberobj_47_value_setter(numberobj_47_value);
    transport_01_input_number = 0;
    transport_01_position = 0;
    transport_01_tempo = 120;
    transport_01_ticks = 0;
    param_37_value = 60;
    gen_06_param_reverb_indiffusion2_value = 0.625;
    gen_06_param_reverb_decay1_value = 0.7;
    gen_06_param_reverb_decay_value = 0.5;
    gen_06_param_reverb_drywet_value = 0.5;
    gen_06_param_reverb_inbandwidth_value = 0.5;
    gen_06_param_reverb_damping_value = 0.5;
    gen_06_param_reverb_decay2_value = 0.5;
    gen_06_param_reverb_indiffusion1_value = 0.75;
    gen_06_param_reverb_predelay_value = 10;
    ctlin_01_input = 0;
    ctlin_01_controller = 3;
    ctlin_01_channel = -1;
    expr_30_in1 = 0;
    expr_30_in2 = 0.007874015748;
    expr_30_out1 = 0;
    _currentTime = 0;
    audioProcessSampleCount = 0;
    sampleOffsetIntoNextAudioBuffer = 0;
    zeroBuffer = nullptr;
    dummyBuffer = nullptr;
    signals[0] = nullptr;
    signals[1] = nullptr;
    signals[2] = nullptr;
    signals[3] = nullptr;
    signals[4] = nullptr;
    signals[5] = nullptr;
    didAllocateSignals = 0;
    vs = 0;
    maxvs = 0;
    sr = 44100;
    invsr = 0.00002267573696;
    toggle_01_lastValue = 0;
    metro_01_last = -1;
    metro_01_next = -1;
    numberobj_43_currentFormat = 6;
    numberobj_43_lastValue = 0;
    gen_06_delay_1__maxdelay = 0;
    gen_06_delay_1_sizemode = 0;
    gen_06_delay_1_wrap = 0;
    gen_06_delay_1_reader = 0;
    gen_06_delay_1_writer = 0;
    gen_06_delay_2__maxdelay = 0;
    gen_06_delay_2_sizemode = 0;
    gen_06_delay_2_wrap = 0;
    gen_06_delay_2_reader = 0;
    gen_06_delay_2_writer = 0;
    gen_06_delay_3__maxdelay = 0;
    gen_06_delay_3_sizemode = 0;
    gen_06_delay_3_wrap = 0;
    gen_06_delay_3_reader = 0;
    gen_06_delay_3_writer = 0;
    gen_06_delay_4__maxdelay = 0;
    gen_06_delay_4_sizemode = 0;
    gen_06_delay_4_wrap = 0;
    gen_06_delay_4_reader = 0;
    gen_06_delay_4_writer = 0;
    gen_06_delay_5__maxdelay = 0;
    gen_06_delay_5_sizemode = 0;
    gen_06_delay_5_wrap = 0;
    gen_06_delay_5_reader = 0;
    gen_06_delay_5_writer = 0;
    gen_06_delay_6__maxdelay = 0;
    gen_06_delay_6_sizemode = 0;
    gen_06_delay_6_wrap = 0;
    gen_06_delay_6_reader = 0;
    gen_06_delay_6_writer = 0;
    gen_06_delay_7__maxdelay = 0;
    gen_06_delay_7_sizemode = 0;
    gen_06_delay_7_wrap = 0;
    gen_06_delay_7_reader = 0;
    gen_06_delay_7_writer = 0;
    gen_06_delay_8__maxdelay = 0;
    gen_06_delay_8_sizemode = 0;
    gen_06_delay_8_wrap = 0;
    gen_06_delay_8_reader = 0;
    gen_06_delay_8_writer = 0;
    gen_06_delay_9__maxdelay = 0;
    gen_06_delay_9_sizemode = 0;
    gen_06_delay_9_wrap = 0;
    gen_06_delay_9_reader = 0;
    gen_06_delay_9_writer = 0;
    gen_06_delay_10__maxdelay = 0;
    gen_06_delay_10_sizemode = 0;
    gen_06_delay_10_wrap = 0;
    gen_06_delay_10_reader = 0;
    gen_06_delay_10_writer = 0;
    gen_06_delay_11__maxdelay = 0;
    gen_06_delay_11_sizemode = 0;
    gen_06_delay_11_wrap = 0;
    gen_06_delay_11_reader = 0;
    gen_06_delay_11_writer = 0;
    gen_06_delay_12__maxdelay = 0;
    gen_06_delay_12_sizemode = 0;
    gen_06_delay_12_wrap = 0;
    gen_06_delay_12_reader = 0;
    gen_06_delay_12_writer = 0;
    gen_06_delay_13__maxdelay = 0;
    gen_06_delay_13_sizemode = 0;
    gen_06_delay_13_wrap = 0;
    gen_06_delay_13_reader = 0;
    gen_06_delay_13_writer = 0;
    gen_06_history_14_value = 0;
    gen_06_history_15_value = 0;
    gen_06_history_16_value = 0;
    gen_06_cycle_76_ph_currentPhase = 0;
    gen_06_cycle_76_ph_conv = 0;
    gen_06_cycle_76_wrap = 0;
    gen_06_cycle_87_ph_currentPhase = 0;
    gen_06_cycle_87_ph_conv = 0;
    gen_06_cycle_87_wrap = 0;
    gen_06_setupDone = false;
    numberobj_44_currentFormat = 6;
    numberobj_44_lastValue = 0;
    param_36_lastValue = 0;
    numberobj_45_currentFormat = 6;
    numberobj_45_lastValue = 0;
    counter_01_count = 0;
    counter_01_phase = true;
    toggle_02_lastValue = 0;
    numberobj_46_currentFormat = 6;
    numberobj_46_lastValue = 0;
    numberobj_47_currentFormat = 6;
    numberobj_47_lastValue = 0;
    param_37_lastValue = 0;
    gen_06_param_reverb_indiffusion2_lastValue = 0;
    gen_06_param_reverb_decay1_lastValue = 0;
    gen_06_param_reverb_decay_lastValue = 0;
    gen_06_param_reverb_drywet_lastValue = 0;
    gen_06_param_reverb_inbandwidth_lastValue = 0;
    gen_06_param_reverb_damping_lastValue = 0;
    gen_06_param_reverb_decay2_lastValue = 0;
    gen_06_param_reverb_indiffusion1_lastValue = 0;
    gen_06_param_reverb_predelay_lastValue = 0;
    ctlin_01_status = 0;
    ctlin_01_byte1 = -1;
    ctlin_01_inchan = 0;
    globaltransport_tempo = nullptr;
    globaltransport_tempoNeedsReset = false;
    globaltransport_lastTempo = 120;
    globaltransport_state = nullptr;
    globaltransport_stateNeedsReset = false;
    globaltransport_lastState = 0;
    globaltransport_beatTimeChanges = { 0, 0 };
    globaltransport_timeSignatureChanges = { 4, 4, 0 };
    globaltransport_notify = false;
    globaltransport_bbuBase = 0;
    globaltransport_setupDone = false;
    stackprotect_count = 0;
    _voiceIndex = 0;
    _noteNumber = 0;
    isMuted = 1;
}

// member variables

    number toggle_01_value_number;
    number metro_01_on;
    number metro_01_interval;
    number numberobj_43_value;
    number send_01_input_number;
    list send_01_input_list;
    number p_14_target;
    number p_15_target;
    list message_01_set;
    number p_16_target;
    number gen_06_in1;
    number gen_06_indiffusion2;
    number gen_06_decay1;
    number gen_06_decay;
    number gen_06_drywet;
    number gen_06_inbandwidth;
    number gen_06_damping;
    number gen_06_decay2;
    number gen_06_indiffusion1;
    number gen_06_predelay;
    number send_02_input_number;
    list send_02_input_list;
    list message_02_set;
    list message_03_set;
    number p_17_target;
    list message_04_set;
    number p_18_target;
    number numberobj_44_value;
    number param_36_value;
    list message_05_set;
    number p_19_target;
    number numberobj_45_value;
    Int counter_01_carryflag;
    number counter_01_direction;
    number counter_01_resetnext_number;
    number counter_01_resetnow_number;
    number counter_01_maximum;
    number counter_01_output;
    number counter_01_underflow_number;
    number counter_01_overflow_number;
    number counter_01_carry;
    number counter_01_minimum;
    number send_03_input_number;
    list send_03_input_list;
    list message_06_set;
    number p_20_target;
    number toggle_02_value_number;
    number numberobj_46_value;
    number numberobj_47_value;
    number transport_01_input_number;
    number transport_01_position;
    number transport_01_tempo;
    list transport_01_timesig;
    number transport_01_ticks;
    number param_37_value;
    number gen_06_param_reverb_indiffusion2_value;
    number gen_06_param_reverb_decay1_value;
    number gen_06_param_reverb_decay_value;
    number gen_06_param_reverb_drywet_value;
    number gen_06_param_reverb_inbandwidth_value;
    number gen_06_param_reverb_damping_value;
    number gen_06_param_reverb_decay2_value;
    number gen_06_param_reverb_indiffusion1_value;
    number gen_06_param_reverb_predelay_value;
    number ctlin_01_input;
    number ctlin_01_controller;
    number ctlin_01_channel;
    number expr_30_in1;
    number expr_30_in2;
    number expr_30_out1;
    MillisecondTime _currentTime;
    UInt64 audioProcessSampleCount;
    SampleIndex sampleOffsetIntoNextAudioBuffer;
    signal zeroBuffer;
    signal dummyBuffer;
    SampleValue * signals[6];
    bool didAllocateSignals;
    Index vs;
    Index maxvs;
    number sr;
    number invsr;
    number toggle_01_lastValue;
    MillisecondTime metro_01_last;
    MillisecondTime metro_01_next;
    Int numberobj_43_currentFormat;
    number numberobj_43_lastValue;
    Float64BufferRef gen_06_delay_1_buffer;
    Index gen_06_delay_1__maxdelay;
    Int gen_06_delay_1_sizemode;
    Index gen_06_delay_1_wrap;
    Int gen_06_delay_1_reader;
    Int gen_06_delay_1_writer;
    Float64BufferRef gen_06_delay_2_buffer;
    Index gen_06_delay_2__maxdelay;
    Int gen_06_delay_2_sizemode;
    Index gen_06_delay_2_wrap;
    Int gen_06_delay_2_reader;
    Int gen_06_delay_2_writer;
    Float64BufferRef gen_06_delay_3_buffer;
    Index gen_06_delay_3__maxdelay;
    Int gen_06_delay_3_sizemode;
    Index gen_06_delay_3_wrap;
    Int gen_06_delay_3_reader;
    Int gen_06_delay_3_writer;
    Float64BufferRef gen_06_delay_4_buffer;
    Index gen_06_delay_4__maxdelay;
    Int gen_06_delay_4_sizemode;
    Index gen_06_delay_4_wrap;
    Int gen_06_delay_4_reader;
    Int gen_06_delay_4_writer;
    Float64BufferRef gen_06_delay_5_buffer;
    Index gen_06_delay_5__maxdelay;
    Int gen_06_delay_5_sizemode;
    Index gen_06_delay_5_wrap;
    Int gen_06_delay_5_reader;
    Int gen_06_delay_5_writer;
    Float64BufferRef gen_06_delay_6_buffer;
    Index gen_06_delay_6__maxdelay;
    Int gen_06_delay_6_sizemode;
    Index gen_06_delay_6_wrap;
    Int gen_06_delay_6_reader;
    Int gen_06_delay_6_writer;
    Float64BufferRef gen_06_delay_7_buffer;
    Index gen_06_delay_7__maxdelay;
    Int gen_06_delay_7_sizemode;
    Index gen_06_delay_7_wrap;
    Int gen_06_delay_7_reader;
    Int gen_06_delay_7_writer;
    Float64BufferRef gen_06_delay_8_buffer;
    Index gen_06_delay_8__maxdelay;
    Int gen_06_delay_8_sizemode;
    Index gen_06_delay_8_wrap;
    Int gen_06_delay_8_reader;
    Int gen_06_delay_8_writer;
    Float64BufferRef gen_06_delay_9_buffer;
    Index gen_06_delay_9__maxdelay;
    Int gen_06_delay_9_sizemode;
    Index gen_06_delay_9_wrap;
    Int gen_06_delay_9_reader;
    Int gen_06_delay_9_writer;
    Float64BufferRef gen_06_delay_10_buffer;
    Index gen_06_delay_10__maxdelay;
    Int gen_06_delay_10_sizemode;
    Index gen_06_delay_10_wrap;
    Int gen_06_delay_10_reader;
    Int gen_06_delay_10_writer;
    Float64BufferRef gen_06_delay_11_buffer;
    Index gen_06_delay_11__maxdelay;
    Int gen_06_delay_11_sizemode;
    Index gen_06_delay_11_wrap;
    Int gen_06_delay_11_reader;
    Int gen_06_delay_11_writer;
    Float64BufferRef gen_06_delay_12_buffer;
    Index gen_06_delay_12__maxdelay;
    Int gen_06_delay_12_sizemode;
    Index gen_06_delay_12_wrap;
    Int gen_06_delay_12_reader;
    Int gen_06_delay_12_writer;
    Float64BufferRef gen_06_delay_13_buffer;
    Index gen_06_delay_13__maxdelay;
    Int gen_06_delay_13_sizemode;
    Index gen_06_delay_13_wrap;
    Int gen_06_delay_13_reader;
    Int gen_06_delay_13_writer;
    number gen_06_history_14_value;
    number gen_06_history_15_value;
    number gen_06_history_16_value;
    number gen_06_cycle_76_ph_currentPhase;
    number gen_06_cycle_76_ph_conv;
    Float64BufferRef gen_06_cycle_76_buffer;
    long gen_06_cycle_76_wrap;
    uint32_t gen_06_cycle_76_phasei;
    SampleValue gen_06_cycle_76_f2i;
    number gen_06_cycle_87_ph_currentPhase;
    number gen_06_cycle_87_ph_conv;
    Float64BufferRef gen_06_cycle_87_buffer;
    long gen_06_cycle_87_wrap;
    uint32_t gen_06_cycle_87_phasei;
    SampleValue gen_06_cycle_87_f2i;
    bool gen_06_setupDone;
    Int numberobj_44_currentFormat;
    number numberobj_44_lastValue;
    number param_36_lastValue;
    Int numberobj_45_currentFormat;
    number numberobj_45_lastValue;
    number counter_01_count;
    bool counter_01_phase;
    number toggle_02_lastValue;
    Int numberobj_46_currentFormat;
    number numberobj_46_lastValue;
    Int numberobj_47_currentFormat;
    number numberobj_47_lastValue;
    number param_37_lastValue;
    number gen_06_param_reverb_indiffusion2_lastValue;
    number gen_06_param_reverb_decay1_lastValue;
    number gen_06_param_reverb_decay_lastValue;
    number gen_06_param_reverb_drywet_lastValue;
    number gen_06_param_reverb_inbandwidth_lastValue;
    number gen_06_param_reverb_damping_lastValue;
    number gen_06_param_reverb_decay2_lastValue;
    number gen_06_param_reverb_indiffusion1_lastValue;
    number gen_06_param_reverb_predelay_lastValue;
    int ctlin_01_status;
    int ctlin_01_byte1;
    int ctlin_01_inchan;
    signal globaltransport_tempo;
    bool globaltransport_tempoNeedsReset;
    number globaltransport_lastTempo;
    signal globaltransport_state;
    bool globaltransport_stateNeedsReset;
    number globaltransport_lastState;
    list globaltransport_beatTimeChanges;
    list globaltransport_timeSignatureChanges;
    bool globaltransport_notify;
    number globaltransport_bbuBase;
    bool globaltransport_setupDone;
    number stackprotect_count;
    DataRef RNBODefaultSinus;
    DataRef RNBODefaultMtofLookupTable256;
    DataRef gen_06_delay_1_bufferobj;
    DataRef gen_06_delay_2_bufferobj;
    DataRef gen_06_delay_3_bufferobj;
    DataRef gen_06_delay_4_bufferobj;
    DataRef gen_06_delay_5_bufferobj;
    DataRef gen_06_delay_6_bufferobj;
    DataRef gen_06_delay_7_bufferobj;
    DataRef gen_06_delay_8_bufferobj;
    DataRef gen_06_delay_9_bufferobj;
    DataRef gen_06_delay_10_bufferobj;
    DataRef gen_06_delay_11_bufferobj;
    DataRef gen_06_delay_12_bufferobj;
    DataRef gen_06_delay_13_bufferobj;
    Index _voiceIndex;
    Int _noteNumber;
    Index isMuted;
    indexlist paramInitIndices;
    indexlist paramInitOrder;
    RNBOSubpatcher_804* p_14;
    RNBOSubpatcher_805* p_15;
    RNBOSubpatcher_806* p_16;
    RNBOSubpatcher_807* p_17;
    RNBOSubpatcher_808* p_18;
    RNBOSubpatcher_809* p_19;
    RNBOSubpatcher_810* p_20;

};

PatcherInterface* createdrone()
{
    return new drone();
}

#ifndef RNBO_NO_PATCHERFACTORY

extern "C" PatcherFactoryFunctionPtr GetPatcherFactoryFunction(PlatformInterface* platformInterface)
#else

extern "C" PatcherFactoryFunctionPtr droneFactoryFunction(PlatformInterface* platformInterface)
#endif

{
    Platform::set(platformInterface);
    return createdrone;
}

} // end RNBO namespace

